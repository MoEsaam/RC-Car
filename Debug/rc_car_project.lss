
rc_car_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800200  000028c2  00002956  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000028c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  0080020a  0080020a  00002960  2**0
                  ALLOC
  3 .stab         00001e9c  00000000  00000000  00002960  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e1c  00000000  00000000  000047fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00005618  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00005778  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00005907  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000794c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00008a4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  000099d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00009b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  00009e12  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a6a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 f9 0e 	jmp	0x1df2	; 0x1df2 <__vector_16>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e2 ec       	ldi	r30, 0xC2	; 194
      fc:	f8 e2       	ldi	r31, 0x28	; 40
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	aa 30       	cpi	r26, 0x0A	; 10
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	aa e0       	ldi	r26, 0x0A	; 10
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	af 30       	cpi	r26, 0x0F	; 15
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 64 11 	call	0x22c8	; 0x22c8 <main>
     122:	0c 94 5f 14 	jmp	0x28be	; 0x28be <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <__fixunssfsi>:
     12a:	ef 92       	push	r14
     12c:	ff 92       	push	r15
     12e:	0f 93       	push	r16
     130:	1f 93       	push	r17
     132:	7b 01       	movw	r14, r22
     134:	8c 01       	movw	r16, r24
     136:	20 e0       	ldi	r18, 0x00	; 0
     138:	30 e0       	ldi	r19, 0x00	; 0
     13a:	40 e0       	ldi	r20, 0x00	; 0
     13c:	5f e4       	ldi	r21, 0x4F	; 79
     13e:	0e 94 41 04 	call	0x882	; 0x882 <__gesf2>
     142:	88 23       	and	r24, r24
     144:	8c f0       	brlt	.+34     	; 0x168 <__fixunssfsi+0x3e>
     146:	c8 01       	movw	r24, r16
     148:	b7 01       	movw	r22, r14
     14a:	20 e0       	ldi	r18, 0x00	; 0
     14c:	30 e0       	ldi	r19, 0x00	; 0
     14e:	40 e0       	ldi	r20, 0x00	; 0
     150:	5f e4       	ldi	r21, 0x4F	; 79
     152:	0e 94 0d 02 	call	0x41a	; 0x41a <__subsf3>
     156:	0e 94 a1 04 	call	0x942	; 0x942 <__fixsfsi>
     15a:	9b 01       	movw	r18, r22
     15c:	ac 01       	movw	r20, r24
     15e:	20 50       	subi	r18, 0x00	; 0
     160:	30 40       	sbci	r19, 0x00	; 0
     162:	40 40       	sbci	r20, 0x00	; 0
     164:	50 48       	sbci	r21, 0x80	; 128
     166:	06 c0       	rjmp	.+12     	; 0x174 <__fixunssfsi+0x4a>
     168:	c8 01       	movw	r24, r16
     16a:	b7 01       	movw	r22, r14
     16c:	0e 94 a1 04 	call	0x942	; 0x942 <__fixsfsi>
     170:	9b 01       	movw	r18, r22
     172:	ac 01       	movw	r20, r24
     174:	b9 01       	movw	r22, r18
     176:	ca 01       	movw	r24, r20
     178:	1f 91       	pop	r17
     17a:	0f 91       	pop	r16
     17c:	ff 90       	pop	r15
     17e:	ef 90       	pop	r14
     180:	08 95       	ret

00000182 <_fpadd_parts>:
     182:	a0 e0       	ldi	r26, 0x00	; 0
     184:	b0 e0       	ldi	r27, 0x00	; 0
     186:	e7 ec       	ldi	r30, 0xC7	; 199
     188:	f0 e0       	ldi	r31, 0x00	; 0
     18a:	0c 94 28 14 	jmp	0x2850	; 0x2850 <__prologue_saves__>
     18e:	dc 01       	movw	r26, r24
     190:	2b 01       	movw	r4, r22
     192:	fa 01       	movw	r30, r20
     194:	9c 91       	ld	r25, X
     196:	92 30       	cpi	r25, 0x02	; 2
     198:	08 f4       	brcc	.+2      	; 0x19c <_fpadd_parts+0x1a>
     19a:	39 c1       	rjmp	.+626    	; 0x40e <_fpadd_parts+0x28c>
     19c:	eb 01       	movw	r28, r22
     19e:	88 81       	ld	r24, Y
     1a0:	82 30       	cpi	r24, 0x02	; 2
     1a2:	08 f4       	brcc	.+2      	; 0x1a6 <_fpadd_parts+0x24>
     1a4:	33 c1       	rjmp	.+614    	; 0x40c <_fpadd_parts+0x28a>
     1a6:	94 30       	cpi	r25, 0x04	; 4
     1a8:	69 f4       	brne	.+26     	; 0x1c4 <_fpadd_parts+0x42>
     1aa:	84 30       	cpi	r24, 0x04	; 4
     1ac:	09 f0       	breq	.+2      	; 0x1b0 <_fpadd_parts+0x2e>
     1ae:	2f c1       	rjmp	.+606    	; 0x40e <_fpadd_parts+0x28c>
     1b0:	11 96       	adiw	r26, 0x01	; 1
     1b2:	9c 91       	ld	r25, X
     1b4:	11 97       	sbiw	r26, 0x01	; 1
     1b6:	89 81       	ldd	r24, Y+1	; 0x01
     1b8:	98 17       	cp	r25, r24
     1ba:	09 f4       	brne	.+2      	; 0x1be <_fpadd_parts+0x3c>
     1bc:	28 c1       	rjmp	.+592    	; 0x40e <_fpadd_parts+0x28c>
     1be:	a0 e0       	ldi	r26, 0x00	; 0
     1c0:	b2 e0       	ldi	r27, 0x02	; 2
     1c2:	25 c1       	rjmp	.+586    	; 0x40e <_fpadd_parts+0x28c>
     1c4:	84 30       	cpi	r24, 0x04	; 4
     1c6:	09 f4       	brne	.+2      	; 0x1ca <_fpadd_parts+0x48>
     1c8:	21 c1       	rjmp	.+578    	; 0x40c <_fpadd_parts+0x28a>
     1ca:	82 30       	cpi	r24, 0x02	; 2
     1cc:	a9 f4       	brne	.+42     	; 0x1f8 <_fpadd_parts+0x76>
     1ce:	92 30       	cpi	r25, 0x02	; 2
     1d0:	09 f0       	breq	.+2      	; 0x1d4 <_fpadd_parts+0x52>
     1d2:	1d c1       	rjmp	.+570    	; 0x40e <_fpadd_parts+0x28c>
     1d4:	9a 01       	movw	r18, r20
     1d6:	ad 01       	movw	r20, r26
     1d8:	88 e0       	ldi	r24, 0x08	; 8
     1da:	ea 01       	movw	r28, r20
     1dc:	09 90       	ld	r0, Y+
     1de:	ae 01       	movw	r20, r28
     1e0:	e9 01       	movw	r28, r18
     1e2:	09 92       	st	Y+, r0
     1e4:	9e 01       	movw	r18, r28
     1e6:	81 50       	subi	r24, 0x01	; 1
     1e8:	c1 f7       	brne	.-16     	; 0x1da <_fpadd_parts+0x58>
     1ea:	e2 01       	movw	r28, r4
     1ec:	89 81       	ldd	r24, Y+1	; 0x01
     1ee:	11 96       	adiw	r26, 0x01	; 1
     1f0:	9c 91       	ld	r25, X
     1f2:	89 23       	and	r24, r25
     1f4:	81 83       	std	Z+1, r24	; 0x01
     1f6:	08 c1       	rjmp	.+528    	; 0x408 <_fpadd_parts+0x286>
     1f8:	92 30       	cpi	r25, 0x02	; 2
     1fa:	09 f4       	brne	.+2      	; 0x1fe <_fpadd_parts+0x7c>
     1fc:	07 c1       	rjmp	.+526    	; 0x40c <_fpadd_parts+0x28a>
     1fe:	12 96       	adiw	r26, 0x02	; 2
     200:	2d 90       	ld	r2, X+
     202:	3c 90       	ld	r3, X
     204:	13 97       	sbiw	r26, 0x03	; 3
     206:	eb 01       	movw	r28, r22
     208:	8a 81       	ldd	r24, Y+2	; 0x02
     20a:	9b 81       	ldd	r25, Y+3	; 0x03
     20c:	14 96       	adiw	r26, 0x04	; 4
     20e:	ad 90       	ld	r10, X+
     210:	bd 90       	ld	r11, X+
     212:	cd 90       	ld	r12, X+
     214:	dc 90       	ld	r13, X
     216:	17 97       	sbiw	r26, 0x07	; 7
     218:	ec 80       	ldd	r14, Y+4	; 0x04
     21a:	fd 80       	ldd	r15, Y+5	; 0x05
     21c:	0e 81       	ldd	r16, Y+6	; 0x06
     21e:	1f 81       	ldd	r17, Y+7	; 0x07
     220:	91 01       	movw	r18, r2
     222:	28 1b       	sub	r18, r24
     224:	39 0b       	sbc	r19, r25
     226:	b9 01       	movw	r22, r18
     228:	37 ff       	sbrs	r19, 7
     22a:	04 c0       	rjmp	.+8      	; 0x234 <_fpadd_parts+0xb2>
     22c:	66 27       	eor	r22, r22
     22e:	77 27       	eor	r23, r23
     230:	62 1b       	sub	r22, r18
     232:	73 0b       	sbc	r23, r19
     234:	60 32       	cpi	r22, 0x20	; 32
     236:	71 05       	cpc	r23, r1
     238:	0c f0       	brlt	.+2      	; 0x23c <_fpadd_parts+0xba>
     23a:	61 c0       	rjmp	.+194    	; 0x2fe <_fpadd_parts+0x17c>
     23c:	12 16       	cp	r1, r18
     23e:	13 06       	cpc	r1, r19
     240:	6c f5       	brge	.+90     	; 0x29c <_fpadd_parts+0x11a>
     242:	37 01       	movw	r6, r14
     244:	48 01       	movw	r8, r16
     246:	06 2e       	mov	r0, r22
     248:	04 c0       	rjmp	.+8      	; 0x252 <_fpadd_parts+0xd0>
     24a:	96 94       	lsr	r9
     24c:	87 94       	ror	r8
     24e:	77 94       	ror	r7
     250:	67 94       	ror	r6
     252:	0a 94       	dec	r0
     254:	d2 f7       	brpl	.-12     	; 0x24a <_fpadd_parts+0xc8>
     256:	21 e0       	ldi	r18, 0x01	; 1
     258:	30 e0       	ldi	r19, 0x00	; 0
     25a:	40 e0       	ldi	r20, 0x00	; 0
     25c:	50 e0       	ldi	r21, 0x00	; 0
     25e:	04 c0       	rjmp	.+8      	; 0x268 <_fpadd_parts+0xe6>
     260:	22 0f       	add	r18, r18
     262:	33 1f       	adc	r19, r19
     264:	44 1f       	adc	r20, r20
     266:	55 1f       	adc	r21, r21
     268:	6a 95       	dec	r22
     26a:	d2 f7       	brpl	.-12     	; 0x260 <_fpadd_parts+0xde>
     26c:	21 50       	subi	r18, 0x01	; 1
     26e:	30 40       	sbci	r19, 0x00	; 0
     270:	40 40       	sbci	r20, 0x00	; 0
     272:	50 40       	sbci	r21, 0x00	; 0
     274:	2e 21       	and	r18, r14
     276:	3f 21       	and	r19, r15
     278:	40 23       	and	r20, r16
     27a:	51 23       	and	r21, r17
     27c:	21 15       	cp	r18, r1
     27e:	31 05       	cpc	r19, r1
     280:	41 05       	cpc	r20, r1
     282:	51 05       	cpc	r21, r1
     284:	21 f0       	breq	.+8      	; 0x28e <_fpadd_parts+0x10c>
     286:	21 e0       	ldi	r18, 0x01	; 1
     288:	30 e0       	ldi	r19, 0x00	; 0
     28a:	40 e0       	ldi	r20, 0x00	; 0
     28c:	50 e0       	ldi	r21, 0x00	; 0
     28e:	79 01       	movw	r14, r18
     290:	8a 01       	movw	r16, r20
     292:	e6 28       	or	r14, r6
     294:	f7 28       	or	r15, r7
     296:	08 29       	or	r16, r8
     298:	19 29       	or	r17, r9
     29a:	3c c0       	rjmp	.+120    	; 0x314 <_fpadd_parts+0x192>
     29c:	23 2b       	or	r18, r19
     29e:	d1 f1       	breq	.+116    	; 0x314 <_fpadd_parts+0x192>
     2a0:	26 0e       	add	r2, r22
     2a2:	37 1e       	adc	r3, r23
     2a4:	35 01       	movw	r6, r10
     2a6:	46 01       	movw	r8, r12
     2a8:	06 2e       	mov	r0, r22
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <_fpadd_parts+0x132>
     2ac:	96 94       	lsr	r9
     2ae:	87 94       	ror	r8
     2b0:	77 94       	ror	r7
     2b2:	67 94       	ror	r6
     2b4:	0a 94       	dec	r0
     2b6:	d2 f7       	brpl	.-12     	; 0x2ac <_fpadd_parts+0x12a>
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	04 c0       	rjmp	.+8      	; 0x2ca <_fpadd_parts+0x148>
     2c2:	22 0f       	add	r18, r18
     2c4:	33 1f       	adc	r19, r19
     2c6:	44 1f       	adc	r20, r20
     2c8:	55 1f       	adc	r21, r21
     2ca:	6a 95       	dec	r22
     2cc:	d2 f7       	brpl	.-12     	; 0x2c2 <_fpadd_parts+0x140>
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	30 40       	sbci	r19, 0x00	; 0
     2d2:	40 40       	sbci	r20, 0x00	; 0
     2d4:	50 40       	sbci	r21, 0x00	; 0
     2d6:	2a 21       	and	r18, r10
     2d8:	3b 21       	and	r19, r11
     2da:	4c 21       	and	r20, r12
     2dc:	5d 21       	and	r21, r13
     2de:	21 15       	cp	r18, r1
     2e0:	31 05       	cpc	r19, r1
     2e2:	41 05       	cpc	r20, r1
     2e4:	51 05       	cpc	r21, r1
     2e6:	21 f0       	breq	.+8      	; 0x2f0 <_fpadd_parts+0x16e>
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	59 01       	movw	r10, r18
     2f2:	6a 01       	movw	r12, r20
     2f4:	a6 28       	or	r10, r6
     2f6:	b7 28       	or	r11, r7
     2f8:	c8 28       	or	r12, r8
     2fa:	d9 28       	or	r13, r9
     2fc:	0b c0       	rjmp	.+22     	; 0x314 <_fpadd_parts+0x192>
     2fe:	82 15       	cp	r24, r2
     300:	93 05       	cpc	r25, r3
     302:	2c f0       	brlt	.+10     	; 0x30e <_fpadd_parts+0x18c>
     304:	1c 01       	movw	r2, r24
     306:	aa 24       	eor	r10, r10
     308:	bb 24       	eor	r11, r11
     30a:	65 01       	movw	r12, r10
     30c:	03 c0       	rjmp	.+6      	; 0x314 <_fpadd_parts+0x192>
     30e:	ee 24       	eor	r14, r14
     310:	ff 24       	eor	r15, r15
     312:	87 01       	movw	r16, r14
     314:	11 96       	adiw	r26, 0x01	; 1
     316:	9c 91       	ld	r25, X
     318:	d2 01       	movw	r26, r4
     31a:	11 96       	adiw	r26, 0x01	; 1
     31c:	8c 91       	ld	r24, X
     31e:	98 17       	cp	r25, r24
     320:	09 f4       	brne	.+2      	; 0x324 <_fpadd_parts+0x1a2>
     322:	45 c0       	rjmp	.+138    	; 0x3ae <_fpadd_parts+0x22c>
     324:	99 23       	and	r25, r25
     326:	39 f0       	breq	.+14     	; 0x336 <_fpadd_parts+0x1b4>
     328:	a8 01       	movw	r20, r16
     32a:	97 01       	movw	r18, r14
     32c:	2a 19       	sub	r18, r10
     32e:	3b 09       	sbc	r19, r11
     330:	4c 09       	sbc	r20, r12
     332:	5d 09       	sbc	r21, r13
     334:	06 c0       	rjmp	.+12     	; 0x342 <_fpadd_parts+0x1c0>
     336:	a6 01       	movw	r20, r12
     338:	95 01       	movw	r18, r10
     33a:	2e 19       	sub	r18, r14
     33c:	3f 09       	sbc	r19, r15
     33e:	40 0b       	sbc	r20, r16
     340:	51 0b       	sbc	r21, r17
     342:	57 fd       	sbrc	r21, 7
     344:	08 c0       	rjmp	.+16     	; 0x356 <_fpadd_parts+0x1d4>
     346:	11 82       	std	Z+1, r1	; 0x01
     348:	33 82       	std	Z+3, r3	; 0x03
     34a:	22 82       	std	Z+2, r2	; 0x02
     34c:	24 83       	std	Z+4, r18	; 0x04
     34e:	35 83       	std	Z+5, r19	; 0x05
     350:	46 83       	std	Z+6, r20	; 0x06
     352:	57 83       	std	Z+7, r21	; 0x07
     354:	1d c0       	rjmp	.+58     	; 0x390 <_fpadd_parts+0x20e>
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	81 83       	std	Z+1, r24	; 0x01
     35a:	33 82       	std	Z+3, r3	; 0x03
     35c:	22 82       	std	Z+2, r2	; 0x02
     35e:	88 27       	eor	r24, r24
     360:	99 27       	eor	r25, r25
     362:	dc 01       	movw	r26, r24
     364:	82 1b       	sub	r24, r18
     366:	93 0b       	sbc	r25, r19
     368:	a4 0b       	sbc	r26, r20
     36a:	b5 0b       	sbc	r27, r21
     36c:	84 83       	std	Z+4, r24	; 0x04
     36e:	95 83       	std	Z+5, r25	; 0x05
     370:	a6 83       	std	Z+6, r26	; 0x06
     372:	b7 83       	std	Z+7, r27	; 0x07
     374:	0d c0       	rjmp	.+26     	; 0x390 <_fpadd_parts+0x20e>
     376:	22 0f       	add	r18, r18
     378:	33 1f       	adc	r19, r19
     37a:	44 1f       	adc	r20, r20
     37c:	55 1f       	adc	r21, r21
     37e:	24 83       	std	Z+4, r18	; 0x04
     380:	35 83       	std	Z+5, r19	; 0x05
     382:	46 83       	std	Z+6, r20	; 0x06
     384:	57 83       	std	Z+7, r21	; 0x07
     386:	82 81       	ldd	r24, Z+2	; 0x02
     388:	93 81       	ldd	r25, Z+3	; 0x03
     38a:	01 97       	sbiw	r24, 0x01	; 1
     38c:	93 83       	std	Z+3, r25	; 0x03
     38e:	82 83       	std	Z+2, r24	; 0x02
     390:	24 81       	ldd	r18, Z+4	; 0x04
     392:	35 81       	ldd	r19, Z+5	; 0x05
     394:	46 81       	ldd	r20, Z+6	; 0x06
     396:	57 81       	ldd	r21, Z+7	; 0x07
     398:	da 01       	movw	r26, r20
     39a:	c9 01       	movw	r24, r18
     39c:	01 97       	sbiw	r24, 0x01	; 1
     39e:	a1 09       	sbc	r26, r1
     3a0:	b1 09       	sbc	r27, r1
     3a2:	8f 5f       	subi	r24, 0xFF	; 255
     3a4:	9f 4f       	sbci	r25, 0xFF	; 255
     3a6:	af 4f       	sbci	r26, 0xFF	; 255
     3a8:	bf 43       	sbci	r27, 0x3F	; 63
     3aa:	28 f3       	brcs	.-54     	; 0x376 <_fpadd_parts+0x1f4>
     3ac:	0b c0       	rjmp	.+22     	; 0x3c4 <_fpadd_parts+0x242>
     3ae:	91 83       	std	Z+1, r25	; 0x01
     3b0:	33 82       	std	Z+3, r3	; 0x03
     3b2:	22 82       	std	Z+2, r2	; 0x02
     3b4:	ea 0c       	add	r14, r10
     3b6:	fb 1c       	adc	r15, r11
     3b8:	0c 1d       	adc	r16, r12
     3ba:	1d 1d       	adc	r17, r13
     3bc:	e4 82       	std	Z+4, r14	; 0x04
     3be:	f5 82       	std	Z+5, r15	; 0x05
     3c0:	06 83       	std	Z+6, r16	; 0x06
     3c2:	17 83       	std	Z+7, r17	; 0x07
     3c4:	83 e0       	ldi	r24, 0x03	; 3
     3c6:	80 83       	st	Z, r24
     3c8:	24 81       	ldd	r18, Z+4	; 0x04
     3ca:	35 81       	ldd	r19, Z+5	; 0x05
     3cc:	46 81       	ldd	r20, Z+6	; 0x06
     3ce:	57 81       	ldd	r21, Z+7	; 0x07
     3d0:	57 ff       	sbrs	r21, 7
     3d2:	1a c0       	rjmp	.+52     	; 0x408 <_fpadd_parts+0x286>
     3d4:	c9 01       	movw	r24, r18
     3d6:	aa 27       	eor	r26, r26
     3d8:	97 fd       	sbrc	r25, 7
     3da:	a0 95       	com	r26
     3dc:	ba 2f       	mov	r27, r26
     3de:	81 70       	andi	r24, 0x01	; 1
     3e0:	90 70       	andi	r25, 0x00	; 0
     3e2:	a0 70       	andi	r26, 0x00	; 0
     3e4:	b0 70       	andi	r27, 0x00	; 0
     3e6:	56 95       	lsr	r21
     3e8:	47 95       	ror	r20
     3ea:	37 95       	ror	r19
     3ec:	27 95       	ror	r18
     3ee:	82 2b       	or	r24, r18
     3f0:	93 2b       	or	r25, r19
     3f2:	a4 2b       	or	r26, r20
     3f4:	b5 2b       	or	r27, r21
     3f6:	84 83       	std	Z+4, r24	; 0x04
     3f8:	95 83       	std	Z+5, r25	; 0x05
     3fa:	a6 83       	std	Z+6, r26	; 0x06
     3fc:	b7 83       	std	Z+7, r27	; 0x07
     3fe:	82 81       	ldd	r24, Z+2	; 0x02
     400:	93 81       	ldd	r25, Z+3	; 0x03
     402:	01 96       	adiw	r24, 0x01	; 1
     404:	93 83       	std	Z+3, r25	; 0x03
     406:	82 83       	std	Z+2, r24	; 0x02
     408:	df 01       	movw	r26, r30
     40a:	01 c0       	rjmp	.+2      	; 0x40e <_fpadd_parts+0x28c>
     40c:	d2 01       	movw	r26, r4
     40e:	cd 01       	movw	r24, r26
     410:	cd b7       	in	r28, 0x3d	; 61
     412:	de b7       	in	r29, 0x3e	; 62
     414:	e2 e1       	ldi	r30, 0x12	; 18
     416:	0c 94 44 14 	jmp	0x2888	; 0x2888 <__epilogue_restores__>

0000041a <__subsf3>:
     41a:	a0 e2       	ldi	r26, 0x20	; 32
     41c:	b0 e0       	ldi	r27, 0x00	; 0
     41e:	e3 e1       	ldi	r30, 0x13	; 19
     420:	f2 e0       	ldi	r31, 0x02	; 2
     422:	0c 94 34 14 	jmp	0x2868	; 0x2868 <__prologue_saves__+0x18>
     426:	69 83       	std	Y+1, r22	; 0x01
     428:	7a 83       	std	Y+2, r23	; 0x02
     42a:	8b 83       	std	Y+3, r24	; 0x03
     42c:	9c 83       	std	Y+4, r25	; 0x04
     42e:	2d 83       	std	Y+5, r18	; 0x05
     430:	3e 83       	std	Y+6, r19	; 0x06
     432:	4f 83       	std	Y+7, r20	; 0x07
     434:	58 87       	std	Y+8, r21	; 0x08
     436:	e9 e0       	ldi	r30, 0x09	; 9
     438:	ee 2e       	mov	r14, r30
     43a:	f1 2c       	mov	r15, r1
     43c:	ec 0e       	add	r14, r28
     43e:	fd 1e       	adc	r15, r29
     440:	ce 01       	movw	r24, r28
     442:	01 96       	adiw	r24, 0x01	; 1
     444:	b7 01       	movw	r22, r14
     446:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     44a:	8e 01       	movw	r16, r28
     44c:	0f 5e       	subi	r16, 0xEF	; 239
     44e:	1f 4f       	sbci	r17, 0xFF	; 255
     450:	ce 01       	movw	r24, r28
     452:	05 96       	adiw	r24, 0x05	; 5
     454:	b8 01       	movw	r22, r16
     456:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     45a:	8a 89       	ldd	r24, Y+18	; 0x12
     45c:	91 e0       	ldi	r25, 0x01	; 1
     45e:	89 27       	eor	r24, r25
     460:	8a 8b       	std	Y+18, r24	; 0x12
     462:	c7 01       	movw	r24, r14
     464:	b8 01       	movw	r22, r16
     466:	ae 01       	movw	r20, r28
     468:	47 5e       	subi	r20, 0xE7	; 231
     46a:	5f 4f       	sbci	r21, 0xFF	; 255
     46c:	0e 94 c1 00 	call	0x182	; 0x182 <_fpadd_parts>
     470:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__pack_f>
     474:	a0 96       	adiw	r28, 0x20	; 32
     476:	e6 e0       	ldi	r30, 0x06	; 6
     478:	0c 94 50 14 	jmp	0x28a0	; 0x28a0 <__epilogue_restores__+0x18>

0000047c <__addsf3>:
     47c:	a0 e2       	ldi	r26, 0x20	; 32
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	e4 e4       	ldi	r30, 0x44	; 68
     482:	f2 e0       	ldi	r31, 0x02	; 2
     484:	0c 94 34 14 	jmp	0x2868	; 0x2868 <__prologue_saves__+0x18>
     488:	69 83       	std	Y+1, r22	; 0x01
     48a:	7a 83       	std	Y+2, r23	; 0x02
     48c:	8b 83       	std	Y+3, r24	; 0x03
     48e:	9c 83       	std	Y+4, r25	; 0x04
     490:	2d 83       	std	Y+5, r18	; 0x05
     492:	3e 83       	std	Y+6, r19	; 0x06
     494:	4f 83       	std	Y+7, r20	; 0x07
     496:	58 87       	std	Y+8, r21	; 0x08
     498:	f9 e0       	ldi	r31, 0x09	; 9
     49a:	ef 2e       	mov	r14, r31
     49c:	f1 2c       	mov	r15, r1
     49e:	ec 0e       	add	r14, r28
     4a0:	fd 1e       	adc	r15, r29
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	b7 01       	movw	r22, r14
     4a8:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     4ac:	8e 01       	movw	r16, r28
     4ae:	0f 5e       	subi	r16, 0xEF	; 239
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
     4b2:	ce 01       	movw	r24, r28
     4b4:	05 96       	adiw	r24, 0x05	; 5
     4b6:	b8 01       	movw	r22, r16
     4b8:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     4bc:	c7 01       	movw	r24, r14
     4be:	b8 01       	movw	r22, r16
     4c0:	ae 01       	movw	r20, r28
     4c2:	47 5e       	subi	r20, 0xE7	; 231
     4c4:	5f 4f       	sbci	r21, 0xFF	; 255
     4c6:	0e 94 c1 00 	call	0x182	; 0x182 <_fpadd_parts>
     4ca:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__pack_f>
     4ce:	a0 96       	adiw	r28, 0x20	; 32
     4d0:	e6 e0       	ldi	r30, 0x06	; 6
     4d2:	0c 94 50 14 	jmp	0x28a0	; 0x28a0 <__epilogue_restores__+0x18>

000004d6 <__mulsf3>:
     4d6:	a0 e2       	ldi	r26, 0x20	; 32
     4d8:	b0 e0       	ldi	r27, 0x00	; 0
     4da:	e1 e7       	ldi	r30, 0x71	; 113
     4dc:	f2 e0       	ldi	r31, 0x02	; 2
     4de:	0c 94 28 14 	jmp	0x2850	; 0x2850 <__prologue_saves__>
     4e2:	69 83       	std	Y+1, r22	; 0x01
     4e4:	7a 83       	std	Y+2, r23	; 0x02
     4e6:	8b 83       	std	Y+3, r24	; 0x03
     4e8:	9c 83       	std	Y+4, r25	; 0x04
     4ea:	2d 83       	std	Y+5, r18	; 0x05
     4ec:	3e 83       	std	Y+6, r19	; 0x06
     4ee:	4f 83       	std	Y+7, r20	; 0x07
     4f0:	58 87       	std	Y+8, r21	; 0x08
     4f2:	ce 01       	movw	r24, r28
     4f4:	01 96       	adiw	r24, 0x01	; 1
     4f6:	be 01       	movw	r22, r28
     4f8:	67 5f       	subi	r22, 0xF7	; 247
     4fa:	7f 4f       	sbci	r23, 0xFF	; 255
     4fc:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     500:	ce 01       	movw	r24, r28
     502:	05 96       	adiw	r24, 0x05	; 5
     504:	be 01       	movw	r22, r28
     506:	6f 5e       	subi	r22, 0xEF	; 239
     508:	7f 4f       	sbci	r23, 0xFF	; 255
     50a:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     50e:	99 85       	ldd	r25, Y+9	; 0x09
     510:	92 30       	cpi	r25, 0x02	; 2
     512:	88 f0       	brcs	.+34     	; 0x536 <__mulsf3+0x60>
     514:	89 89       	ldd	r24, Y+17	; 0x11
     516:	82 30       	cpi	r24, 0x02	; 2
     518:	c8 f0       	brcs	.+50     	; 0x54c <__mulsf3+0x76>
     51a:	94 30       	cpi	r25, 0x04	; 4
     51c:	19 f4       	brne	.+6      	; 0x524 <__mulsf3+0x4e>
     51e:	82 30       	cpi	r24, 0x02	; 2
     520:	51 f4       	brne	.+20     	; 0x536 <__mulsf3+0x60>
     522:	04 c0       	rjmp	.+8      	; 0x52c <__mulsf3+0x56>
     524:	84 30       	cpi	r24, 0x04	; 4
     526:	29 f4       	brne	.+10     	; 0x532 <__mulsf3+0x5c>
     528:	92 30       	cpi	r25, 0x02	; 2
     52a:	81 f4       	brne	.+32     	; 0x54c <__mulsf3+0x76>
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	92 e0       	ldi	r25, 0x02	; 2
     530:	c6 c0       	rjmp	.+396    	; 0x6be <__mulsf3+0x1e8>
     532:	92 30       	cpi	r25, 0x02	; 2
     534:	49 f4       	brne	.+18     	; 0x548 <__mulsf3+0x72>
     536:	20 e0       	ldi	r18, 0x00	; 0
     538:	9a 85       	ldd	r25, Y+10	; 0x0a
     53a:	8a 89       	ldd	r24, Y+18	; 0x12
     53c:	98 13       	cpse	r25, r24
     53e:	21 e0       	ldi	r18, 0x01	; 1
     540:	2a 87       	std	Y+10, r18	; 0x0a
     542:	ce 01       	movw	r24, r28
     544:	09 96       	adiw	r24, 0x09	; 9
     546:	bb c0       	rjmp	.+374    	; 0x6be <__mulsf3+0x1e8>
     548:	82 30       	cpi	r24, 0x02	; 2
     54a:	49 f4       	brne	.+18     	; 0x55e <__mulsf3+0x88>
     54c:	20 e0       	ldi	r18, 0x00	; 0
     54e:	9a 85       	ldd	r25, Y+10	; 0x0a
     550:	8a 89       	ldd	r24, Y+18	; 0x12
     552:	98 13       	cpse	r25, r24
     554:	21 e0       	ldi	r18, 0x01	; 1
     556:	2a 8b       	std	Y+18, r18	; 0x12
     558:	ce 01       	movw	r24, r28
     55a:	41 96       	adiw	r24, 0x11	; 17
     55c:	b0 c0       	rjmp	.+352    	; 0x6be <__mulsf3+0x1e8>
     55e:	2d 84       	ldd	r2, Y+13	; 0x0d
     560:	3e 84       	ldd	r3, Y+14	; 0x0e
     562:	4f 84       	ldd	r4, Y+15	; 0x0f
     564:	58 88       	ldd	r5, Y+16	; 0x10
     566:	6d 88       	ldd	r6, Y+21	; 0x15
     568:	7e 88       	ldd	r7, Y+22	; 0x16
     56a:	8f 88       	ldd	r8, Y+23	; 0x17
     56c:	98 8c       	ldd	r9, Y+24	; 0x18
     56e:	ee 24       	eor	r14, r14
     570:	ff 24       	eor	r15, r15
     572:	87 01       	movw	r16, r14
     574:	aa 24       	eor	r10, r10
     576:	bb 24       	eor	r11, r11
     578:	65 01       	movw	r12, r10
     57a:	40 e0       	ldi	r20, 0x00	; 0
     57c:	50 e0       	ldi	r21, 0x00	; 0
     57e:	60 e0       	ldi	r22, 0x00	; 0
     580:	70 e0       	ldi	r23, 0x00	; 0
     582:	e0 e0       	ldi	r30, 0x00	; 0
     584:	f0 e0       	ldi	r31, 0x00	; 0
     586:	c1 01       	movw	r24, r2
     588:	81 70       	andi	r24, 0x01	; 1
     58a:	90 70       	andi	r25, 0x00	; 0
     58c:	89 2b       	or	r24, r25
     58e:	e9 f0       	breq	.+58     	; 0x5ca <__mulsf3+0xf4>
     590:	e6 0c       	add	r14, r6
     592:	f7 1c       	adc	r15, r7
     594:	08 1d       	adc	r16, r8
     596:	19 1d       	adc	r17, r9
     598:	9a 01       	movw	r18, r20
     59a:	ab 01       	movw	r20, r22
     59c:	2a 0d       	add	r18, r10
     59e:	3b 1d       	adc	r19, r11
     5a0:	4c 1d       	adc	r20, r12
     5a2:	5d 1d       	adc	r21, r13
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	a0 e0       	ldi	r26, 0x00	; 0
     5aa:	b0 e0       	ldi	r27, 0x00	; 0
     5ac:	e6 14       	cp	r14, r6
     5ae:	f7 04       	cpc	r15, r7
     5b0:	08 05       	cpc	r16, r8
     5b2:	19 05       	cpc	r17, r9
     5b4:	20 f4       	brcc	.+8      	; 0x5be <__mulsf3+0xe8>
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	a0 e0       	ldi	r26, 0x00	; 0
     5bc:	b0 e0       	ldi	r27, 0x00	; 0
     5be:	ba 01       	movw	r22, r20
     5c0:	a9 01       	movw	r20, r18
     5c2:	48 0f       	add	r20, r24
     5c4:	59 1f       	adc	r21, r25
     5c6:	6a 1f       	adc	r22, r26
     5c8:	7b 1f       	adc	r23, r27
     5ca:	aa 0c       	add	r10, r10
     5cc:	bb 1c       	adc	r11, r11
     5ce:	cc 1c       	adc	r12, r12
     5d0:	dd 1c       	adc	r13, r13
     5d2:	97 fe       	sbrs	r9, 7
     5d4:	08 c0       	rjmp	.+16     	; 0x5e6 <__mulsf3+0x110>
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	a0 e0       	ldi	r26, 0x00	; 0
     5dc:	b0 e0       	ldi	r27, 0x00	; 0
     5de:	a8 2a       	or	r10, r24
     5e0:	b9 2a       	or	r11, r25
     5e2:	ca 2a       	or	r12, r26
     5e4:	db 2a       	or	r13, r27
     5e6:	31 96       	adiw	r30, 0x01	; 1
     5e8:	e0 32       	cpi	r30, 0x20	; 32
     5ea:	f1 05       	cpc	r31, r1
     5ec:	49 f0       	breq	.+18     	; 0x600 <__mulsf3+0x12a>
     5ee:	66 0c       	add	r6, r6
     5f0:	77 1c       	adc	r7, r7
     5f2:	88 1c       	adc	r8, r8
     5f4:	99 1c       	adc	r9, r9
     5f6:	56 94       	lsr	r5
     5f8:	47 94       	ror	r4
     5fa:	37 94       	ror	r3
     5fc:	27 94       	ror	r2
     5fe:	c3 cf       	rjmp	.-122    	; 0x586 <__mulsf3+0xb0>
     600:	fa 85       	ldd	r31, Y+10	; 0x0a
     602:	ea 89       	ldd	r30, Y+18	; 0x12
     604:	2b 89       	ldd	r18, Y+19	; 0x13
     606:	3c 89       	ldd	r19, Y+20	; 0x14
     608:	8b 85       	ldd	r24, Y+11	; 0x0b
     60a:	9c 85       	ldd	r25, Y+12	; 0x0c
     60c:	28 0f       	add	r18, r24
     60e:	39 1f       	adc	r19, r25
     610:	2e 5f       	subi	r18, 0xFE	; 254
     612:	3f 4f       	sbci	r19, 0xFF	; 255
     614:	17 c0       	rjmp	.+46     	; 0x644 <__mulsf3+0x16e>
     616:	ca 01       	movw	r24, r20
     618:	81 70       	andi	r24, 0x01	; 1
     61a:	90 70       	andi	r25, 0x00	; 0
     61c:	89 2b       	or	r24, r25
     61e:	61 f0       	breq	.+24     	; 0x638 <__mulsf3+0x162>
     620:	16 95       	lsr	r17
     622:	07 95       	ror	r16
     624:	f7 94       	ror	r15
     626:	e7 94       	ror	r14
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	a0 e0       	ldi	r26, 0x00	; 0
     62e:	b0 e8       	ldi	r27, 0x80	; 128
     630:	e8 2a       	or	r14, r24
     632:	f9 2a       	or	r15, r25
     634:	0a 2b       	or	r16, r26
     636:	1b 2b       	or	r17, r27
     638:	76 95       	lsr	r23
     63a:	67 95       	ror	r22
     63c:	57 95       	ror	r21
     63e:	47 95       	ror	r20
     640:	2f 5f       	subi	r18, 0xFF	; 255
     642:	3f 4f       	sbci	r19, 0xFF	; 255
     644:	77 fd       	sbrc	r23, 7
     646:	e7 cf       	rjmp	.-50     	; 0x616 <__mulsf3+0x140>
     648:	0c c0       	rjmp	.+24     	; 0x662 <__mulsf3+0x18c>
     64a:	44 0f       	add	r20, r20
     64c:	55 1f       	adc	r21, r21
     64e:	66 1f       	adc	r22, r22
     650:	77 1f       	adc	r23, r23
     652:	17 fd       	sbrc	r17, 7
     654:	41 60       	ori	r20, 0x01	; 1
     656:	ee 0c       	add	r14, r14
     658:	ff 1c       	adc	r15, r15
     65a:	00 1f       	adc	r16, r16
     65c:	11 1f       	adc	r17, r17
     65e:	21 50       	subi	r18, 0x01	; 1
     660:	30 40       	sbci	r19, 0x00	; 0
     662:	40 30       	cpi	r20, 0x00	; 0
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	59 07       	cpc	r21, r25
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	69 07       	cpc	r22, r25
     66c:	90 e4       	ldi	r25, 0x40	; 64
     66e:	79 07       	cpc	r23, r25
     670:	60 f3       	brcs	.-40     	; 0x64a <__mulsf3+0x174>
     672:	2b 8f       	std	Y+27, r18	; 0x1b
     674:	3c 8f       	std	Y+28, r19	; 0x1c
     676:	db 01       	movw	r26, r22
     678:	ca 01       	movw	r24, r20
     67a:	8f 77       	andi	r24, 0x7F	; 127
     67c:	90 70       	andi	r25, 0x00	; 0
     67e:	a0 70       	andi	r26, 0x00	; 0
     680:	b0 70       	andi	r27, 0x00	; 0
     682:	80 34       	cpi	r24, 0x40	; 64
     684:	91 05       	cpc	r25, r1
     686:	a1 05       	cpc	r26, r1
     688:	b1 05       	cpc	r27, r1
     68a:	61 f4       	brne	.+24     	; 0x6a4 <__mulsf3+0x1ce>
     68c:	47 fd       	sbrc	r20, 7
     68e:	0a c0       	rjmp	.+20     	; 0x6a4 <__mulsf3+0x1ce>
     690:	e1 14       	cp	r14, r1
     692:	f1 04       	cpc	r15, r1
     694:	01 05       	cpc	r16, r1
     696:	11 05       	cpc	r17, r1
     698:	29 f0       	breq	.+10     	; 0x6a4 <__mulsf3+0x1ce>
     69a:	40 5c       	subi	r20, 0xC0	; 192
     69c:	5f 4f       	sbci	r21, 0xFF	; 255
     69e:	6f 4f       	sbci	r22, 0xFF	; 255
     6a0:	7f 4f       	sbci	r23, 0xFF	; 255
     6a2:	40 78       	andi	r20, 0x80	; 128
     6a4:	1a 8e       	std	Y+26, r1	; 0x1a
     6a6:	fe 17       	cp	r31, r30
     6a8:	11 f0       	breq	.+4      	; 0x6ae <__mulsf3+0x1d8>
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	8a 8f       	std	Y+26, r24	; 0x1a
     6ae:	4d 8f       	std	Y+29, r20	; 0x1d
     6b0:	5e 8f       	std	Y+30, r21	; 0x1e
     6b2:	6f 8f       	std	Y+31, r22	; 0x1f
     6b4:	78 a3       	std	Y+32, r23	; 0x20
     6b6:	83 e0       	ldi	r24, 0x03	; 3
     6b8:	89 8f       	std	Y+25, r24	; 0x19
     6ba:	ce 01       	movw	r24, r28
     6bc:	49 96       	adiw	r24, 0x19	; 25
     6be:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__pack_f>
     6c2:	a0 96       	adiw	r28, 0x20	; 32
     6c4:	e2 e1       	ldi	r30, 0x12	; 18
     6c6:	0c 94 44 14 	jmp	0x2888	; 0x2888 <__epilogue_restores__>

000006ca <__divsf3>:
     6ca:	a8 e1       	ldi	r26, 0x18	; 24
     6cc:	b0 e0       	ldi	r27, 0x00	; 0
     6ce:	eb e6       	ldi	r30, 0x6B	; 107
     6d0:	f3 e0       	ldi	r31, 0x03	; 3
     6d2:	0c 94 30 14 	jmp	0x2860	; 0x2860 <__prologue_saves__+0x10>
     6d6:	69 83       	std	Y+1, r22	; 0x01
     6d8:	7a 83       	std	Y+2, r23	; 0x02
     6da:	8b 83       	std	Y+3, r24	; 0x03
     6dc:	9c 83       	std	Y+4, r25	; 0x04
     6de:	2d 83       	std	Y+5, r18	; 0x05
     6e0:	3e 83       	std	Y+6, r19	; 0x06
     6e2:	4f 83       	std	Y+7, r20	; 0x07
     6e4:	58 87       	std	Y+8, r21	; 0x08
     6e6:	b9 e0       	ldi	r27, 0x09	; 9
     6e8:	eb 2e       	mov	r14, r27
     6ea:	f1 2c       	mov	r15, r1
     6ec:	ec 0e       	add	r14, r28
     6ee:	fd 1e       	adc	r15, r29
     6f0:	ce 01       	movw	r24, r28
     6f2:	01 96       	adiw	r24, 0x01	; 1
     6f4:	b7 01       	movw	r22, r14
     6f6:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     6fa:	8e 01       	movw	r16, r28
     6fc:	0f 5e       	subi	r16, 0xEF	; 239
     6fe:	1f 4f       	sbci	r17, 0xFF	; 255
     700:	ce 01       	movw	r24, r28
     702:	05 96       	adiw	r24, 0x05	; 5
     704:	b8 01       	movw	r22, r16
     706:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     70a:	29 85       	ldd	r18, Y+9	; 0x09
     70c:	22 30       	cpi	r18, 0x02	; 2
     70e:	08 f4       	brcc	.+2      	; 0x712 <__divsf3+0x48>
     710:	7e c0       	rjmp	.+252    	; 0x80e <__divsf3+0x144>
     712:	39 89       	ldd	r19, Y+17	; 0x11
     714:	32 30       	cpi	r19, 0x02	; 2
     716:	10 f4       	brcc	.+4      	; 0x71c <__divsf3+0x52>
     718:	b8 01       	movw	r22, r16
     71a:	7c c0       	rjmp	.+248    	; 0x814 <__divsf3+0x14a>
     71c:	8a 85       	ldd	r24, Y+10	; 0x0a
     71e:	9a 89       	ldd	r25, Y+18	; 0x12
     720:	89 27       	eor	r24, r25
     722:	8a 87       	std	Y+10, r24	; 0x0a
     724:	24 30       	cpi	r18, 0x04	; 4
     726:	11 f0       	breq	.+4      	; 0x72c <__divsf3+0x62>
     728:	22 30       	cpi	r18, 0x02	; 2
     72a:	31 f4       	brne	.+12     	; 0x738 <__divsf3+0x6e>
     72c:	23 17       	cp	r18, r19
     72e:	09 f0       	breq	.+2      	; 0x732 <__divsf3+0x68>
     730:	6e c0       	rjmp	.+220    	; 0x80e <__divsf3+0x144>
     732:	60 e0       	ldi	r22, 0x00	; 0
     734:	72 e0       	ldi	r23, 0x02	; 2
     736:	6e c0       	rjmp	.+220    	; 0x814 <__divsf3+0x14a>
     738:	34 30       	cpi	r19, 0x04	; 4
     73a:	39 f4       	brne	.+14     	; 0x74a <__divsf3+0x80>
     73c:	1d 86       	std	Y+13, r1	; 0x0d
     73e:	1e 86       	std	Y+14, r1	; 0x0e
     740:	1f 86       	std	Y+15, r1	; 0x0f
     742:	18 8a       	std	Y+16, r1	; 0x10
     744:	1c 86       	std	Y+12, r1	; 0x0c
     746:	1b 86       	std	Y+11, r1	; 0x0b
     748:	04 c0       	rjmp	.+8      	; 0x752 <__divsf3+0x88>
     74a:	32 30       	cpi	r19, 0x02	; 2
     74c:	21 f4       	brne	.+8      	; 0x756 <__divsf3+0x8c>
     74e:	84 e0       	ldi	r24, 0x04	; 4
     750:	89 87       	std	Y+9, r24	; 0x09
     752:	b7 01       	movw	r22, r14
     754:	5f c0       	rjmp	.+190    	; 0x814 <__divsf3+0x14a>
     756:	2b 85       	ldd	r18, Y+11	; 0x0b
     758:	3c 85       	ldd	r19, Y+12	; 0x0c
     75a:	8b 89       	ldd	r24, Y+19	; 0x13
     75c:	9c 89       	ldd	r25, Y+20	; 0x14
     75e:	28 1b       	sub	r18, r24
     760:	39 0b       	sbc	r19, r25
     762:	3c 87       	std	Y+12, r19	; 0x0c
     764:	2b 87       	std	Y+11, r18	; 0x0b
     766:	ed 84       	ldd	r14, Y+13	; 0x0d
     768:	fe 84       	ldd	r15, Y+14	; 0x0e
     76a:	0f 85       	ldd	r16, Y+15	; 0x0f
     76c:	18 89       	ldd	r17, Y+16	; 0x10
     76e:	ad 88       	ldd	r10, Y+21	; 0x15
     770:	be 88       	ldd	r11, Y+22	; 0x16
     772:	cf 88       	ldd	r12, Y+23	; 0x17
     774:	d8 8c       	ldd	r13, Y+24	; 0x18
     776:	ea 14       	cp	r14, r10
     778:	fb 04       	cpc	r15, r11
     77a:	0c 05       	cpc	r16, r12
     77c:	1d 05       	cpc	r17, r13
     77e:	40 f4       	brcc	.+16     	; 0x790 <__divsf3+0xc6>
     780:	ee 0c       	add	r14, r14
     782:	ff 1c       	adc	r15, r15
     784:	00 1f       	adc	r16, r16
     786:	11 1f       	adc	r17, r17
     788:	21 50       	subi	r18, 0x01	; 1
     78a:	30 40       	sbci	r19, 0x00	; 0
     78c:	3c 87       	std	Y+12, r19	; 0x0c
     78e:	2b 87       	std	Y+11, r18	; 0x0b
     790:	20 e0       	ldi	r18, 0x00	; 0
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	40 e0       	ldi	r20, 0x00	; 0
     796:	50 e0       	ldi	r21, 0x00	; 0
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	a0 e0       	ldi	r26, 0x00	; 0
     79e:	b0 e4       	ldi	r27, 0x40	; 64
     7a0:	60 e0       	ldi	r22, 0x00	; 0
     7a2:	70 e0       	ldi	r23, 0x00	; 0
     7a4:	ea 14       	cp	r14, r10
     7a6:	fb 04       	cpc	r15, r11
     7a8:	0c 05       	cpc	r16, r12
     7aa:	1d 05       	cpc	r17, r13
     7ac:	40 f0       	brcs	.+16     	; 0x7be <__divsf3+0xf4>
     7ae:	28 2b       	or	r18, r24
     7b0:	39 2b       	or	r19, r25
     7b2:	4a 2b       	or	r20, r26
     7b4:	5b 2b       	or	r21, r27
     7b6:	ea 18       	sub	r14, r10
     7b8:	fb 08       	sbc	r15, r11
     7ba:	0c 09       	sbc	r16, r12
     7bc:	1d 09       	sbc	r17, r13
     7be:	b6 95       	lsr	r27
     7c0:	a7 95       	ror	r26
     7c2:	97 95       	ror	r25
     7c4:	87 95       	ror	r24
     7c6:	ee 0c       	add	r14, r14
     7c8:	ff 1c       	adc	r15, r15
     7ca:	00 1f       	adc	r16, r16
     7cc:	11 1f       	adc	r17, r17
     7ce:	6f 5f       	subi	r22, 0xFF	; 255
     7d0:	7f 4f       	sbci	r23, 0xFF	; 255
     7d2:	6f 31       	cpi	r22, 0x1F	; 31
     7d4:	71 05       	cpc	r23, r1
     7d6:	31 f7       	brne	.-52     	; 0x7a4 <__divsf3+0xda>
     7d8:	da 01       	movw	r26, r20
     7da:	c9 01       	movw	r24, r18
     7dc:	8f 77       	andi	r24, 0x7F	; 127
     7de:	90 70       	andi	r25, 0x00	; 0
     7e0:	a0 70       	andi	r26, 0x00	; 0
     7e2:	b0 70       	andi	r27, 0x00	; 0
     7e4:	80 34       	cpi	r24, 0x40	; 64
     7e6:	91 05       	cpc	r25, r1
     7e8:	a1 05       	cpc	r26, r1
     7ea:	b1 05       	cpc	r27, r1
     7ec:	61 f4       	brne	.+24     	; 0x806 <__divsf3+0x13c>
     7ee:	27 fd       	sbrc	r18, 7
     7f0:	0a c0       	rjmp	.+20     	; 0x806 <__divsf3+0x13c>
     7f2:	e1 14       	cp	r14, r1
     7f4:	f1 04       	cpc	r15, r1
     7f6:	01 05       	cpc	r16, r1
     7f8:	11 05       	cpc	r17, r1
     7fa:	29 f0       	breq	.+10     	; 0x806 <__divsf3+0x13c>
     7fc:	20 5c       	subi	r18, 0xC0	; 192
     7fe:	3f 4f       	sbci	r19, 0xFF	; 255
     800:	4f 4f       	sbci	r20, 0xFF	; 255
     802:	5f 4f       	sbci	r21, 0xFF	; 255
     804:	20 78       	andi	r18, 0x80	; 128
     806:	2d 87       	std	Y+13, r18	; 0x0d
     808:	3e 87       	std	Y+14, r19	; 0x0e
     80a:	4f 87       	std	Y+15, r20	; 0x0f
     80c:	58 8b       	std	Y+16, r21	; 0x10
     80e:	be 01       	movw	r22, r28
     810:	67 5f       	subi	r22, 0xF7	; 247
     812:	7f 4f       	sbci	r23, 0xFF	; 255
     814:	cb 01       	movw	r24, r22
     816:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__pack_f>
     81a:	68 96       	adiw	r28, 0x18	; 24
     81c:	ea e0       	ldi	r30, 0x0A	; 10
     81e:	0c 94 4c 14 	jmp	0x2898	; 0x2898 <__epilogue_restores__+0x10>

00000822 <__gtsf2>:
     822:	a8 e1       	ldi	r26, 0x18	; 24
     824:	b0 e0       	ldi	r27, 0x00	; 0
     826:	e7 e1       	ldi	r30, 0x17	; 23
     828:	f4 e0       	ldi	r31, 0x04	; 4
     82a:	0c 94 34 14 	jmp	0x2868	; 0x2868 <__prologue_saves__+0x18>
     82e:	69 83       	std	Y+1, r22	; 0x01
     830:	7a 83       	std	Y+2, r23	; 0x02
     832:	8b 83       	std	Y+3, r24	; 0x03
     834:	9c 83       	std	Y+4, r25	; 0x04
     836:	2d 83       	std	Y+5, r18	; 0x05
     838:	3e 83       	std	Y+6, r19	; 0x06
     83a:	4f 83       	std	Y+7, r20	; 0x07
     83c:	58 87       	std	Y+8, r21	; 0x08
     83e:	89 e0       	ldi	r24, 0x09	; 9
     840:	e8 2e       	mov	r14, r24
     842:	f1 2c       	mov	r15, r1
     844:	ec 0e       	add	r14, r28
     846:	fd 1e       	adc	r15, r29
     848:	ce 01       	movw	r24, r28
     84a:	01 96       	adiw	r24, 0x01	; 1
     84c:	b7 01       	movw	r22, r14
     84e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     852:	8e 01       	movw	r16, r28
     854:	0f 5e       	subi	r16, 0xEF	; 239
     856:	1f 4f       	sbci	r17, 0xFF	; 255
     858:	ce 01       	movw	r24, r28
     85a:	05 96       	adiw	r24, 0x05	; 5
     85c:	b8 01       	movw	r22, r16
     85e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     862:	89 85       	ldd	r24, Y+9	; 0x09
     864:	82 30       	cpi	r24, 0x02	; 2
     866:	40 f0       	brcs	.+16     	; 0x878 <__gtsf2+0x56>
     868:	89 89       	ldd	r24, Y+17	; 0x11
     86a:	82 30       	cpi	r24, 0x02	; 2
     86c:	28 f0       	brcs	.+10     	; 0x878 <__gtsf2+0x56>
     86e:	c7 01       	movw	r24, r14
     870:	b8 01       	movw	r22, r16
     872:	0e 94 42 06 	call	0xc84	; 0xc84 <__fpcmp_parts_f>
     876:	01 c0       	rjmp	.+2      	; 0x87a <__gtsf2+0x58>
     878:	8f ef       	ldi	r24, 0xFF	; 255
     87a:	68 96       	adiw	r28, 0x18	; 24
     87c:	e6 e0       	ldi	r30, 0x06	; 6
     87e:	0c 94 50 14 	jmp	0x28a0	; 0x28a0 <__epilogue_restores__+0x18>

00000882 <__gesf2>:
     882:	a8 e1       	ldi	r26, 0x18	; 24
     884:	b0 e0       	ldi	r27, 0x00	; 0
     886:	e7 e4       	ldi	r30, 0x47	; 71
     888:	f4 e0       	ldi	r31, 0x04	; 4
     88a:	0c 94 34 14 	jmp	0x2868	; 0x2868 <__prologue_saves__+0x18>
     88e:	69 83       	std	Y+1, r22	; 0x01
     890:	7a 83       	std	Y+2, r23	; 0x02
     892:	8b 83       	std	Y+3, r24	; 0x03
     894:	9c 83       	std	Y+4, r25	; 0x04
     896:	2d 83       	std	Y+5, r18	; 0x05
     898:	3e 83       	std	Y+6, r19	; 0x06
     89a:	4f 83       	std	Y+7, r20	; 0x07
     89c:	58 87       	std	Y+8, r21	; 0x08
     89e:	89 e0       	ldi	r24, 0x09	; 9
     8a0:	e8 2e       	mov	r14, r24
     8a2:	f1 2c       	mov	r15, r1
     8a4:	ec 0e       	add	r14, r28
     8a6:	fd 1e       	adc	r15, r29
     8a8:	ce 01       	movw	r24, r28
     8aa:	01 96       	adiw	r24, 0x01	; 1
     8ac:	b7 01       	movw	r22, r14
     8ae:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     8b2:	8e 01       	movw	r16, r28
     8b4:	0f 5e       	subi	r16, 0xEF	; 239
     8b6:	1f 4f       	sbci	r17, 0xFF	; 255
     8b8:	ce 01       	movw	r24, r28
     8ba:	05 96       	adiw	r24, 0x05	; 5
     8bc:	b8 01       	movw	r22, r16
     8be:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     8c2:	89 85       	ldd	r24, Y+9	; 0x09
     8c4:	82 30       	cpi	r24, 0x02	; 2
     8c6:	40 f0       	brcs	.+16     	; 0x8d8 <__gesf2+0x56>
     8c8:	89 89       	ldd	r24, Y+17	; 0x11
     8ca:	82 30       	cpi	r24, 0x02	; 2
     8cc:	28 f0       	brcs	.+10     	; 0x8d8 <__gesf2+0x56>
     8ce:	c7 01       	movw	r24, r14
     8d0:	b8 01       	movw	r22, r16
     8d2:	0e 94 42 06 	call	0xc84	; 0xc84 <__fpcmp_parts_f>
     8d6:	01 c0       	rjmp	.+2      	; 0x8da <__gesf2+0x58>
     8d8:	8f ef       	ldi	r24, 0xFF	; 255
     8da:	68 96       	adiw	r28, 0x18	; 24
     8dc:	e6 e0       	ldi	r30, 0x06	; 6
     8de:	0c 94 50 14 	jmp	0x28a0	; 0x28a0 <__epilogue_restores__+0x18>

000008e2 <__ltsf2>:
     8e2:	a8 e1       	ldi	r26, 0x18	; 24
     8e4:	b0 e0       	ldi	r27, 0x00	; 0
     8e6:	e7 e7       	ldi	r30, 0x77	; 119
     8e8:	f4 e0       	ldi	r31, 0x04	; 4
     8ea:	0c 94 34 14 	jmp	0x2868	; 0x2868 <__prologue_saves__+0x18>
     8ee:	69 83       	std	Y+1, r22	; 0x01
     8f0:	7a 83       	std	Y+2, r23	; 0x02
     8f2:	8b 83       	std	Y+3, r24	; 0x03
     8f4:	9c 83       	std	Y+4, r25	; 0x04
     8f6:	2d 83       	std	Y+5, r18	; 0x05
     8f8:	3e 83       	std	Y+6, r19	; 0x06
     8fa:	4f 83       	std	Y+7, r20	; 0x07
     8fc:	58 87       	std	Y+8, r21	; 0x08
     8fe:	89 e0       	ldi	r24, 0x09	; 9
     900:	e8 2e       	mov	r14, r24
     902:	f1 2c       	mov	r15, r1
     904:	ec 0e       	add	r14, r28
     906:	fd 1e       	adc	r15, r29
     908:	ce 01       	movw	r24, r28
     90a:	01 96       	adiw	r24, 0x01	; 1
     90c:	b7 01       	movw	r22, r14
     90e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     912:	8e 01       	movw	r16, r28
     914:	0f 5e       	subi	r16, 0xEF	; 239
     916:	1f 4f       	sbci	r17, 0xFF	; 255
     918:	ce 01       	movw	r24, r28
     91a:	05 96       	adiw	r24, 0x05	; 5
     91c:	b8 01       	movw	r22, r16
     91e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     922:	89 85       	ldd	r24, Y+9	; 0x09
     924:	82 30       	cpi	r24, 0x02	; 2
     926:	40 f0       	brcs	.+16     	; 0x938 <__ltsf2+0x56>
     928:	89 89       	ldd	r24, Y+17	; 0x11
     92a:	82 30       	cpi	r24, 0x02	; 2
     92c:	28 f0       	brcs	.+10     	; 0x938 <__ltsf2+0x56>
     92e:	c7 01       	movw	r24, r14
     930:	b8 01       	movw	r22, r16
     932:	0e 94 42 06 	call	0xc84	; 0xc84 <__fpcmp_parts_f>
     936:	01 c0       	rjmp	.+2      	; 0x93a <__ltsf2+0x58>
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	68 96       	adiw	r28, 0x18	; 24
     93c:	e6 e0       	ldi	r30, 0x06	; 6
     93e:	0c 94 50 14 	jmp	0x28a0	; 0x28a0 <__epilogue_restores__+0x18>

00000942 <__fixsfsi>:
     942:	ac e0       	ldi	r26, 0x0C	; 12
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 38 14 	jmp	0x2870	; 0x2870 <__prologue_saves__+0x20>
     94e:	69 83       	std	Y+1, r22	; 0x01
     950:	7a 83       	std	Y+2, r23	; 0x02
     952:	8b 83       	std	Y+3, r24	; 0x03
     954:	9c 83       	std	Y+4, r25	; 0x04
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	be 01       	movw	r22, r28
     95c:	6b 5f       	subi	r22, 0xFB	; 251
     95e:	7f 4f       	sbci	r23, 0xFF	; 255
     960:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     964:	8d 81       	ldd	r24, Y+5	; 0x05
     966:	82 30       	cpi	r24, 0x02	; 2
     968:	61 f1       	breq	.+88     	; 0x9c2 <__fixsfsi+0x80>
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	50 f1       	brcs	.+84     	; 0x9c2 <__fixsfsi+0x80>
     96e:	84 30       	cpi	r24, 0x04	; 4
     970:	21 f4       	brne	.+8      	; 0x97a <__fixsfsi+0x38>
     972:	8e 81       	ldd	r24, Y+6	; 0x06
     974:	88 23       	and	r24, r24
     976:	51 f1       	breq	.+84     	; 0x9cc <__fixsfsi+0x8a>
     978:	2e c0       	rjmp	.+92     	; 0x9d6 <__fixsfsi+0x94>
     97a:	2f 81       	ldd	r18, Y+7	; 0x07
     97c:	38 85       	ldd	r19, Y+8	; 0x08
     97e:	37 fd       	sbrc	r19, 7
     980:	20 c0       	rjmp	.+64     	; 0x9c2 <__fixsfsi+0x80>
     982:	6e 81       	ldd	r22, Y+6	; 0x06
     984:	2f 31       	cpi	r18, 0x1F	; 31
     986:	31 05       	cpc	r19, r1
     988:	1c f0       	brlt	.+6      	; 0x990 <__fixsfsi+0x4e>
     98a:	66 23       	and	r22, r22
     98c:	f9 f0       	breq	.+62     	; 0x9cc <__fixsfsi+0x8a>
     98e:	23 c0       	rjmp	.+70     	; 0x9d6 <__fixsfsi+0x94>
     990:	8e e1       	ldi	r24, 0x1E	; 30
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	82 1b       	sub	r24, r18
     996:	93 0b       	sbc	r25, r19
     998:	29 85       	ldd	r18, Y+9	; 0x09
     99a:	3a 85       	ldd	r19, Y+10	; 0x0a
     99c:	4b 85       	ldd	r20, Y+11	; 0x0b
     99e:	5c 85       	ldd	r21, Y+12	; 0x0c
     9a0:	04 c0       	rjmp	.+8      	; 0x9aa <__fixsfsi+0x68>
     9a2:	56 95       	lsr	r21
     9a4:	47 95       	ror	r20
     9a6:	37 95       	ror	r19
     9a8:	27 95       	ror	r18
     9aa:	8a 95       	dec	r24
     9ac:	d2 f7       	brpl	.-12     	; 0x9a2 <__fixsfsi+0x60>
     9ae:	66 23       	and	r22, r22
     9b0:	b1 f0       	breq	.+44     	; 0x9de <__fixsfsi+0x9c>
     9b2:	50 95       	com	r21
     9b4:	40 95       	com	r20
     9b6:	30 95       	com	r19
     9b8:	21 95       	neg	r18
     9ba:	3f 4f       	sbci	r19, 0xFF	; 255
     9bc:	4f 4f       	sbci	r20, 0xFF	; 255
     9be:	5f 4f       	sbci	r21, 0xFF	; 255
     9c0:	0e c0       	rjmp	.+28     	; 0x9de <__fixsfsi+0x9c>
     9c2:	20 e0       	ldi	r18, 0x00	; 0
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	40 e0       	ldi	r20, 0x00	; 0
     9c8:	50 e0       	ldi	r21, 0x00	; 0
     9ca:	09 c0       	rjmp	.+18     	; 0x9de <__fixsfsi+0x9c>
     9cc:	2f ef       	ldi	r18, 0xFF	; 255
     9ce:	3f ef       	ldi	r19, 0xFF	; 255
     9d0:	4f ef       	ldi	r20, 0xFF	; 255
     9d2:	5f e7       	ldi	r21, 0x7F	; 127
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__fixsfsi+0x9c>
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	40 e0       	ldi	r20, 0x00	; 0
     9dc:	50 e8       	ldi	r21, 0x80	; 128
     9de:	b9 01       	movw	r22, r18
     9e0:	ca 01       	movw	r24, r20
     9e2:	2c 96       	adiw	r28, 0x0c	; 12
     9e4:	e2 e0       	ldi	r30, 0x02	; 2
     9e6:	0c 94 54 14 	jmp	0x28a8	; 0x28a8 <__epilogue_restores__+0x20>

000009ea <__pack_f>:
     9ea:	df 92       	push	r13
     9ec:	ef 92       	push	r14
     9ee:	ff 92       	push	r15
     9f0:	0f 93       	push	r16
     9f2:	1f 93       	push	r17
     9f4:	fc 01       	movw	r30, r24
     9f6:	e4 80       	ldd	r14, Z+4	; 0x04
     9f8:	f5 80       	ldd	r15, Z+5	; 0x05
     9fa:	06 81       	ldd	r16, Z+6	; 0x06
     9fc:	17 81       	ldd	r17, Z+7	; 0x07
     9fe:	d1 80       	ldd	r13, Z+1	; 0x01
     a00:	80 81       	ld	r24, Z
     a02:	82 30       	cpi	r24, 0x02	; 2
     a04:	48 f4       	brcc	.+18     	; 0xa18 <__pack_f+0x2e>
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	a0 e1       	ldi	r26, 0x10	; 16
     a0c:	b0 e0       	ldi	r27, 0x00	; 0
     a0e:	e8 2a       	or	r14, r24
     a10:	f9 2a       	or	r15, r25
     a12:	0a 2b       	or	r16, r26
     a14:	1b 2b       	or	r17, r27
     a16:	a5 c0       	rjmp	.+330    	; 0xb62 <__pack_f+0x178>
     a18:	84 30       	cpi	r24, 0x04	; 4
     a1a:	09 f4       	brne	.+2      	; 0xa1e <__pack_f+0x34>
     a1c:	9f c0       	rjmp	.+318    	; 0xb5c <__pack_f+0x172>
     a1e:	82 30       	cpi	r24, 0x02	; 2
     a20:	21 f4       	brne	.+8      	; 0xa2a <__pack_f+0x40>
     a22:	ee 24       	eor	r14, r14
     a24:	ff 24       	eor	r15, r15
     a26:	87 01       	movw	r16, r14
     a28:	05 c0       	rjmp	.+10     	; 0xa34 <__pack_f+0x4a>
     a2a:	e1 14       	cp	r14, r1
     a2c:	f1 04       	cpc	r15, r1
     a2e:	01 05       	cpc	r16, r1
     a30:	11 05       	cpc	r17, r1
     a32:	19 f4       	brne	.+6      	; 0xa3a <__pack_f+0x50>
     a34:	e0 e0       	ldi	r30, 0x00	; 0
     a36:	f0 e0       	ldi	r31, 0x00	; 0
     a38:	96 c0       	rjmp	.+300    	; 0xb66 <__pack_f+0x17c>
     a3a:	62 81       	ldd	r22, Z+2	; 0x02
     a3c:	73 81       	ldd	r23, Z+3	; 0x03
     a3e:	9f ef       	ldi	r25, 0xFF	; 255
     a40:	62 38       	cpi	r22, 0x82	; 130
     a42:	79 07       	cpc	r23, r25
     a44:	0c f0       	brlt	.+2      	; 0xa48 <__pack_f+0x5e>
     a46:	5b c0       	rjmp	.+182    	; 0xafe <__pack_f+0x114>
     a48:	22 e8       	ldi	r18, 0x82	; 130
     a4a:	3f ef       	ldi	r19, 0xFF	; 255
     a4c:	26 1b       	sub	r18, r22
     a4e:	37 0b       	sbc	r19, r23
     a50:	2a 31       	cpi	r18, 0x1A	; 26
     a52:	31 05       	cpc	r19, r1
     a54:	2c f0       	brlt	.+10     	; 0xa60 <__pack_f+0x76>
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	40 e0       	ldi	r20, 0x00	; 0
     a5c:	50 e0       	ldi	r21, 0x00	; 0
     a5e:	2a c0       	rjmp	.+84     	; 0xab4 <__pack_f+0xca>
     a60:	b8 01       	movw	r22, r16
     a62:	a7 01       	movw	r20, r14
     a64:	02 2e       	mov	r0, r18
     a66:	04 c0       	rjmp	.+8      	; 0xa70 <__pack_f+0x86>
     a68:	76 95       	lsr	r23
     a6a:	67 95       	ror	r22
     a6c:	57 95       	ror	r21
     a6e:	47 95       	ror	r20
     a70:	0a 94       	dec	r0
     a72:	d2 f7       	brpl	.-12     	; 0xa68 <__pack_f+0x7e>
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	a0 e0       	ldi	r26, 0x00	; 0
     a7a:	b0 e0       	ldi	r27, 0x00	; 0
     a7c:	04 c0       	rjmp	.+8      	; 0xa86 <__pack_f+0x9c>
     a7e:	88 0f       	add	r24, r24
     a80:	99 1f       	adc	r25, r25
     a82:	aa 1f       	adc	r26, r26
     a84:	bb 1f       	adc	r27, r27
     a86:	2a 95       	dec	r18
     a88:	d2 f7       	brpl	.-12     	; 0xa7e <__pack_f+0x94>
     a8a:	01 97       	sbiw	r24, 0x01	; 1
     a8c:	a1 09       	sbc	r26, r1
     a8e:	b1 09       	sbc	r27, r1
     a90:	8e 21       	and	r24, r14
     a92:	9f 21       	and	r25, r15
     a94:	a0 23       	and	r26, r16
     a96:	b1 23       	and	r27, r17
     a98:	00 97       	sbiw	r24, 0x00	; 0
     a9a:	a1 05       	cpc	r26, r1
     a9c:	b1 05       	cpc	r27, r1
     a9e:	21 f0       	breq	.+8      	; 0xaa8 <__pack_f+0xbe>
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	9a 01       	movw	r18, r20
     aaa:	ab 01       	movw	r20, r22
     aac:	28 2b       	or	r18, r24
     aae:	39 2b       	or	r19, r25
     ab0:	4a 2b       	or	r20, r26
     ab2:	5b 2b       	or	r21, r27
     ab4:	da 01       	movw	r26, r20
     ab6:	c9 01       	movw	r24, r18
     ab8:	8f 77       	andi	r24, 0x7F	; 127
     aba:	90 70       	andi	r25, 0x00	; 0
     abc:	a0 70       	andi	r26, 0x00	; 0
     abe:	b0 70       	andi	r27, 0x00	; 0
     ac0:	80 34       	cpi	r24, 0x40	; 64
     ac2:	91 05       	cpc	r25, r1
     ac4:	a1 05       	cpc	r26, r1
     ac6:	b1 05       	cpc	r27, r1
     ac8:	39 f4       	brne	.+14     	; 0xad8 <__pack_f+0xee>
     aca:	27 ff       	sbrs	r18, 7
     acc:	09 c0       	rjmp	.+18     	; 0xae0 <__pack_f+0xf6>
     ace:	20 5c       	subi	r18, 0xC0	; 192
     ad0:	3f 4f       	sbci	r19, 0xFF	; 255
     ad2:	4f 4f       	sbci	r20, 0xFF	; 255
     ad4:	5f 4f       	sbci	r21, 0xFF	; 255
     ad6:	04 c0       	rjmp	.+8      	; 0xae0 <__pack_f+0xf6>
     ad8:	21 5c       	subi	r18, 0xC1	; 193
     ada:	3f 4f       	sbci	r19, 0xFF	; 255
     adc:	4f 4f       	sbci	r20, 0xFF	; 255
     ade:	5f 4f       	sbci	r21, 0xFF	; 255
     ae0:	e0 e0       	ldi	r30, 0x00	; 0
     ae2:	f0 e0       	ldi	r31, 0x00	; 0
     ae4:	20 30       	cpi	r18, 0x00	; 0
     ae6:	a0 e0       	ldi	r26, 0x00	; 0
     ae8:	3a 07       	cpc	r19, r26
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	4a 07       	cpc	r20, r26
     aee:	a0 e4       	ldi	r26, 0x40	; 64
     af0:	5a 07       	cpc	r21, r26
     af2:	10 f0       	brcs	.+4      	; 0xaf8 <__pack_f+0x10e>
     af4:	e1 e0       	ldi	r30, 0x01	; 1
     af6:	f0 e0       	ldi	r31, 0x00	; 0
     af8:	79 01       	movw	r14, r18
     afa:	8a 01       	movw	r16, r20
     afc:	27 c0       	rjmp	.+78     	; 0xb4c <__pack_f+0x162>
     afe:	60 38       	cpi	r22, 0x80	; 128
     b00:	71 05       	cpc	r23, r1
     b02:	64 f5       	brge	.+88     	; 0xb5c <__pack_f+0x172>
     b04:	fb 01       	movw	r30, r22
     b06:	e1 58       	subi	r30, 0x81	; 129
     b08:	ff 4f       	sbci	r31, 0xFF	; 255
     b0a:	d8 01       	movw	r26, r16
     b0c:	c7 01       	movw	r24, r14
     b0e:	8f 77       	andi	r24, 0x7F	; 127
     b10:	90 70       	andi	r25, 0x00	; 0
     b12:	a0 70       	andi	r26, 0x00	; 0
     b14:	b0 70       	andi	r27, 0x00	; 0
     b16:	80 34       	cpi	r24, 0x40	; 64
     b18:	91 05       	cpc	r25, r1
     b1a:	a1 05       	cpc	r26, r1
     b1c:	b1 05       	cpc	r27, r1
     b1e:	39 f4       	brne	.+14     	; 0xb2e <__pack_f+0x144>
     b20:	e7 fe       	sbrs	r14, 7
     b22:	0d c0       	rjmp	.+26     	; 0xb3e <__pack_f+0x154>
     b24:	80 e4       	ldi	r24, 0x40	; 64
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	a0 e0       	ldi	r26, 0x00	; 0
     b2a:	b0 e0       	ldi	r27, 0x00	; 0
     b2c:	04 c0       	rjmp	.+8      	; 0xb36 <__pack_f+0x14c>
     b2e:	8f e3       	ldi	r24, 0x3F	; 63
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	a0 e0       	ldi	r26, 0x00	; 0
     b34:	b0 e0       	ldi	r27, 0x00	; 0
     b36:	e8 0e       	add	r14, r24
     b38:	f9 1e       	adc	r15, r25
     b3a:	0a 1f       	adc	r16, r26
     b3c:	1b 1f       	adc	r17, r27
     b3e:	17 ff       	sbrs	r17, 7
     b40:	05 c0       	rjmp	.+10     	; 0xb4c <__pack_f+0x162>
     b42:	16 95       	lsr	r17
     b44:	07 95       	ror	r16
     b46:	f7 94       	ror	r15
     b48:	e7 94       	ror	r14
     b4a:	31 96       	adiw	r30, 0x01	; 1
     b4c:	87 e0       	ldi	r24, 0x07	; 7
     b4e:	16 95       	lsr	r17
     b50:	07 95       	ror	r16
     b52:	f7 94       	ror	r15
     b54:	e7 94       	ror	r14
     b56:	8a 95       	dec	r24
     b58:	d1 f7       	brne	.-12     	; 0xb4e <__pack_f+0x164>
     b5a:	05 c0       	rjmp	.+10     	; 0xb66 <__pack_f+0x17c>
     b5c:	ee 24       	eor	r14, r14
     b5e:	ff 24       	eor	r15, r15
     b60:	87 01       	movw	r16, r14
     b62:	ef ef       	ldi	r30, 0xFF	; 255
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	6e 2f       	mov	r22, r30
     b68:	67 95       	ror	r22
     b6a:	66 27       	eor	r22, r22
     b6c:	67 95       	ror	r22
     b6e:	90 2f       	mov	r25, r16
     b70:	9f 77       	andi	r25, 0x7F	; 127
     b72:	d7 94       	ror	r13
     b74:	dd 24       	eor	r13, r13
     b76:	d7 94       	ror	r13
     b78:	8e 2f       	mov	r24, r30
     b7a:	86 95       	lsr	r24
     b7c:	49 2f       	mov	r20, r25
     b7e:	46 2b       	or	r20, r22
     b80:	58 2f       	mov	r21, r24
     b82:	5d 29       	or	r21, r13
     b84:	b7 01       	movw	r22, r14
     b86:	ca 01       	movw	r24, r20
     b88:	1f 91       	pop	r17
     b8a:	0f 91       	pop	r16
     b8c:	ff 90       	pop	r15
     b8e:	ef 90       	pop	r14
     b90:	df 90       	pop	r13
     b92:	08 95       	ret

00000b94 <__unpack_f>:
     b94:	fc 01       	movw	r30, r24
     b96:	db 01       	movw	r26, r22
     b98:	40 81       	ld	r20, Z
     b9a:	51 81       	ldd	r21, Z+1	; 0x01
     b9c:	22 81       	ldd	r18, Z+2	; 0x02
     b9e:	62 2f       	mov	r22, r18
     ba0:	6f 77       	andi	r22, 0x7F	; 127
     ba2:	70 e0       	ldi	r23, 0x00	; 0
     ba4:	22 1f       	adc	r18, r18
     ba6:	22 27       	eor	r18, r18
     ba8:	22 1f       	adc	r18, r18
     baa:	93 81       	ldd	r25, Z+3	; 0x03
     bac:	89 2f       	mov	r24, r25
     bae:	88 0f       	add	r24, r24
     bb0:	82 2b       	or	r24, r18
     bb2:	28 2f       	mov	r18, r24
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	99 1f       	adc	r25, r25
     bb8:	99 27       	eor	r25, r25
     bba:	99 1f       	adc	r25, r25
     bbc:	11 96       	adiw	r26, 0x01	; 1
     bbe:	9c 93       	st	X, r25
     bc0:	11 97       	sbiw	r26, 0x01	; 1
     bc2:	21 15       	cp	r18, r1
     bc4:	31 05       	cpc	r19, r1
     bc6:	a9 f5       	brne	.+106    	; 0xc32 <__unpack_f+0x9e>
     bc8:	41 15       	cp	r20, r1
     bca:	51 05       	cpc	r21, r1
     bcc:	61 05       	cpc	r22, r1
     bce:	71 05       	cpc	r23, r1
     bd0:	11 f4       	brne	.+4      	; 0xbd6 <__unpack_f+0x42>
     bd2:	82 e0       	ldi	r24, 0x02	; 2
     bd4:	37 c0       	rjmp	.+110    	; 0xc44 <__unpack_f+0xb0>
     bd6:	82 e8       	ldi	r24, 0x82	; 130
     bd8:	9f ef       	ldi	r25, 0xFF	; 255
     bda:	13 96       	adiw	r26, 0x03	; 3
     bdc:	9c 93       	st	X, r25
     bde:	8e 93       	st	-X, r24
     be0:	12 97       	sbiw	r26, 0x02	; 2
     be2:	9a 01       	movw	r18, r20
     be4:	ab 01       	movw	r20, r22
     be6:	67 e0       	ldi	r22, 0x07	; 7
     be8:	22 0f       	add	r18, r18
     bea:	33 1f       	adc	r19, r19
     bec:	44 1f       	adc	r20, r20
     bee:	55 1f       	adc	r21, r21
     bf0:	6a 95       	dec	r22
     bf2:	d1 f7       	brne	.-12     	; 0xbe8 <__unpack_f+0x54>
     bf4:	83 e0       	ldi	r24, 0x03	; 3
     bf6:	8c 93       	st	X, r24
     bf8:	0d c0       	rjmp	.+26     	; 0xc14 <__unpack_f+0x80>
     bfa:	22 0f       	add	r18, r18
     bfc:	33 1f       	adc	r19, r19
     bfe:	44 1f       	adc	r20, r20
     c00:	55 1f       	adc	r21, r21
     c02:	12 96       	adiw	r26, 0x02	; 2
     c04:	8d 91       	ld	r24, X+
     c06:	9c 91       	ld	r25, X
     c08:	13 97       	sbiw	r26, 0x03	; 3
     c0a:	01 97       	sbiw	r24, 0x01	; 1
     c0c:	13 96       	adiw	r26, 0x03	; 3
     c0e:	9c 93       	st	X, r25
     c10:	8e 93       	st	-X, r24
     c12:	12 97       	sbiw	r26, 0x02	; 2
     c14:	20 30       	cpi	r18, 0x00	; 0
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	38 07       	cpc	r19, r24
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	48 07       	cpc	r20, r24
     c1e:	80 e4       	ldi	r24, 0x40	; 64
     c20:	58 07       	cpc	r21, r24
     c22:	58 f3       	brcs	.-42     	; 0xbfa <__unpack_f+0x66>
     c24:	14 96       	adiw	r26, 0x04	; 4
     c26:	2d 93       	st	X+, r18
     c28:	3d 93       	st	X+, r19
     c2a:	4d 93       	st	X+, r20
     c2c:	5c 93       	st	X, r21
     c2e:	17 97       	sbiw	r26, 0x07	; 7
     c30:	08 95       	ret
     c32:	2f 3f       	cpi	r18, 0xFF	; 255
     c34:	31 05       	cpc	r19, r1
     c36:	79 f4       	brne	.+30     	; 0xc56 <__unpack_f+0xc2>
     c38:	41 15       	cp	r20, r1
     c3a:	51 05       	cpc	r21, r1
     c3c:	61 05       	cpc	r22, r1
     c3e:	71 05       	cpc	r23, r1
     c40:	19 f4       	brne	.+6      	; 0xc48 <__unpack_f+0xb4>
     c42:	84 e0       	ldi	r24, 0x04	; 4
     c44:	8c 93       	st	X, r24
     c46:	08 95       	ret
     c48:	64 ff       	sbrs	r22, 4
     c4a:	03 c0       	rjmp	.+6      	; 0xc52 <__unpack_f+0xbe>
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	8c 93       	st	X, r24
     c50:	12 c0       	rjmp	.+36     	; 0xc76 <__unpack_f+0xe2>
     c52:	1c 92       	st	X, r1
     c54:	10 c0       	rjmp	.+32     	; 0xc76 <__unpack_f+0xe2>
     c56:	2f 57       	subi	r18, 0x7F	; 127
     c58:	30 40       	sbci	r19, 0x00	; 0
     c5a:	13 96       	adiw	r26, 0x03	; 3
     c5c:	3c 93       	st	X, r19
     c5e:	2e 93       	st	-X, r18
     c60:	12 97       	sbiw	r26, 0x02	; 2
     c62:	83 e0       	ldi	r24, 0x03	; 3
     c64:	8c 93       	st	X, r24
     c66:	87 e0       	ldi	r24, 0x07	; 7
     c68:	44 0f       	add	r20, r20
     c6a:	55 1f       	adc	r21, r21
     c6c:	66 1f       	adc	r22, r22
     c6e:	77 1f       	adc	r23, r23
     c70:	8a 95       	dec	r24
     c72:	d1 f7       	brne	.-12     	; 0xc68 <__unpack_f+0xd4>
     c74:	70 64       	ori	r23, 0x40	; 64
     c76:	14 96       	adiw	r26, 0x04	; 4
     c78:	4d 93       	st	X+, r20
     c7a:	5d 93       	st	X+, r21
     c7c:	6d 93       	st	X+, r22
     c7e:	7c 93       	st	X, r23
     c80:	17 97       	sbiw	r26, 0x07	; 7
     c82:	08 95       	ret

00000c84 <__fpcmp_parts_f>:
     c84:	1f 93       	push	r17
     c86:	dc 01       	movw	r26, r24
     c88:	fb 01       	movw	r30, r22
     c8a:	9c 91       	ld	r25, X
     c8c:	92 30       	cpi	r25, 0x02	; 2
     c8e:	08 f4       	brcc	.+2      	; 0xc92 <__fpcmp_parts_f+0xe>
     c90:	47 c0       	rjmp	.+142    	; 0xd20 <__fpcmp_parts_f+0x9c>
     c92:	80 81       	ld	r24, Z
     c94:	82 30       	cpi	r24, 0x02	; 2
     c96:	08 f4       	brcc	.+2      	; 0xc9a <__fpcmp_parts_f+0x16>
     c98:	43 c0       	rjmp	.+134    	; 0xd20 <__fpcmp_parts_f+0x9c>
     c9a:	94 30       	cpi	r25, 0x04	; 4
     c9c:	51 f4       	brne	.+20     	; 0xcb2 <__fpcmp_parts_f+0x2e>
     c9e:	11 96       	adiw	r26, 0x01	; 1
     ca0:	1c 91       	ld	r17, X
     ca2:	84 30       	cpi	r24, 0x04	; 4
     ca4:	99 f5       	brne	.+102    	; 0xd0c <__fpcmp_parts_f+0x88>
     ca6:	81 81       	ldd	r24, Z+1	; 0x01
     ca8:	68 2f       	mov	r22, r24
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	61 1b       	sub	r22, r17
     cae:	71 09       	sbc	r23, r1
     cb0:	3f c0       	rjmp	.+126    	; 0xd30 <__fpcmp_parts_f+0xac>
     cb2:	84 30       	cpi	r24, 0x04	; 4
     cb4:	21 f0       	breq	.+8      	; 0xcbe <__fpcmp_parts_f+0x3a>
     cb6:	92 30       	cpi	r25, 0x02	; 2
     cb8:	31 f4       	brne	.+12     	; 0xcc6 <__fpcmp_parts_f+0x42>
     cba:	82 30       	cpi	r24, 0x02	; 2
     cbc:	b9 f1       	breq	.+110    	; 0xd2c <__fpcmp_parts_f+0xa8>
     cbe:	81 81       	ldd	r24, Z+1	; 0x01
     cc0:	88 23       	and	r24, r24
     cc2:	89 f1       	breq	.+98     	; 0xd26 <__fpcmp_parts_f+0xa2>
     cc4:	2d c0       	rjmp	.+90     	; 0xd20 <__fpcmp_parts_f+0x9c>
     cc6:	11 96       	adiw	r26, 0x01	; 1
     cc8:	1c 91       	ld	r17, X
     cca:	11 97       	sbiw	r26, 0x01	; 1
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	f1 f0       	breq	.+60     	; 0xd0c <__fpcmp_parts_f+0x88>
     cd0:	81 81       	ldd	r24, Z+1	; 0x01
     cd2:	18 17       	cp	r17, r24
     cd4:	d9 f4       	brne	.+54     	; 0xd0c <__fpcmp_parts_f+0x88>
     cd6:	12 96       	adiw	r26, 0x02	; 2
     cd8:	2d 91       	ld	r18, X+
     cda:	3c 91       	ld	r19, X
     cdc:	13 97       	sbiw	r26, 0x03	; 3
     cde:	82 81       	ldd	r24, Z+2	; 0x02
     ce0:	93 81       	ldd	r25, Z+3	; 0x03
     ce2:	82 17       	cp	r24, r18
     ce4:	93 07       	cpc	r25, r19
     ce6:	94 f0       	brlt	.+36     	; 0xd0c <__fpcmp_parts_f+0x88>
     ce8:	28 17       	cp	r18, r24
     cea:	39 07       	cpc	r19, r25
     cec:	bc f0       	brlt	.+46     	; 0xd1c <__fpcmp_parts_f+0x98>
     cee:	14 96       	adiw	r26, 0x04	; 4
     cf0:	8d 91       	ld	r24, X+
     cf2:	9d 91       	ld	r25, X+
     cf4:	0d 90       	ld	r0, X+
     cf6:	bc 91       	ld	r27, X
     cf8:	a0 2d       	mov	r26, r0
     cfa:	24 81       	ldd	r18, Z+4	; 0x04
     cfc:	35 81       	ldd	r19, Z+5	; 0x05
     cfe:	46 81       	ldd	r20, Z+6	; 0x06
     d00:	57 81       	ldd	r21, Z+7	; 0x07
     d02:	28 17       	cp	r18, r24
     d04:	39 07       	cpc	r19, r25
     d06:	4a 07       	cpc	r20, r26
     d08:	5b 07       	cpc	r21, r27
     d0a:	18 f4       	brcc	.+6      	; 0xd12 <__fpcmp_parts_f+0x8e>
     d0c:	11 23       	and	r17, r17
     d0e:	41 f0       	breq	.+16     	; 0xd20 <__fpcmp_parts_f+0x9c>
     d10:	0a c0       	rjmp	.+20     	; 0xd26 <__fpcmp_parts_f+0xa2>
     d12:	82 17       	cp	r24, r18
     d14:	93 07       	cpc	r25, r19
     d16:	a4 07       	cpc	r26, r20
     d18:	b5 07       	cpc	r27, r21
     d1a:	40 f4       	brcc	.+16     	; 0xd2c <__fpcmp_parts_f+0xa8>
     d1c:	11 23       	and	r17, r17
     d1e:	19 f0       	breq	.+6      	; 0xd26 <__fpcmp_parts_f+0xa2>
     d20:	61 e0       	ldi	r22, 0x01	; 1
     d22:	70 e0       	ldi	r23, 0x00	; 0
     d24:	05 c0       	rjmp	.+10     	; 0xd30 <__fpcmp_parts_f+0xac>
     d26:	6f ef       	ldi	r22, 0xFF	; 255
     d28:	7f ef       	ldi	r23, 0xFF	; 255
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <__fpcmp_parts_f+0xac>
     d2c:	60 e0       	ldi	r22, 0x00	; 0
     d2e:	70 e0       	ldi	r23, 0x00	; 0
     d30:	cb 01       	movw	r24, r22
     d32:	1f 91       	pop	r17
     d34:	08 95       	ret

00000d36 <pinMode>:
/*
 * Description :
 * Setup the dir of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void pinMode(u8 port_num, u8 pin_num, PinDir dir){
     d36:	df 93       	push	r29
     d38:	cf 93       	push	r28
     d3a:	00 d0       	rcall	.+0      	; 0xd3c <pinMode+0x6>
     d3c:	0f 92       	push	r0
     d3e:	0f 92       	push	r0
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62
     d44:	89 83       	std	Y+1, r24	; 0x01
     d46:	6a 83       	std	Y+2, r22	; 0x02
     d48:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	*/
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)){}
     d4a:	8a 81       	ldd	r24, Y+2	; 0x02
     d4c:	88 30       	cpi	r24, 0x08	; 8
     d4e:	08 f0       	brcs	.+2      	; 0xd52 <pinMode+0x1c>
     d50:	85 c2       	rjmp	.+1290   	; 0x125c <pinMode+0x526>
     d52:	89 81       	ldd	r24, Y+1	; 0x01
     d54:	8b 30       	cpi	r24, 0x0B	; 11
     d56:	08 f0       	brcs	.+2      	; 0xd5a <pinMode+0x24>
     d58:	81 c2       	rjmp	.+1282   	; 0x125c <pinMode+0x526>
	else{
		/* Setup the pin dir as required */
		switch(port_num){
     d5a:	89 81       	ldd	r24, Y+1	; 0x01
     d5c:	28 2f       	mov	r18, r24
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	3d 83       	std	Y+5, r19	; 0x05
     d62:	2c 83       	std	Y+4, r18	; 0x04
     d64:	8c 81       	ldd	r24, Y+4	; 0x04
     d66:	9d 81       	ldd	r25, Y+5	; 0x05
     d68:	85 30       	cpi	r24, 0x05	; 5
     d6a:	91 05       	cpc	r25, r1
     d6c:	09 f4       	brne	.+2      	; 0xd70 <pinMode+0x3a>
     d6e:	47 c1       	rjmp	.+654    	; 0xffe <pinMode+0x2c8>
     d70:	2c 81       	ldd	r18, Y+4	; 0x04
     d72:	3d 81       	ldd	r19, Y+5	; 0x05
     d74:	26 30       	cpi	r18, 0x06	; 6
     d76:	31 05       	cpc	r19, r1
     d78:	1c f5       	brge	.+70     	; 0xdc0 <pinMode+0x8a>
     d7a:	8c 81       	ldd	r24, Y+4	; 0x04
     d7c:	9d 81       	ldd	r25, Y+5	; 0x05
     d7e:	82 30       	cpi	r24, 0x02	; 2
     d80:	91 05       	cpc	r25, r1
     d82:	09 f4       	brne	.+2      	; 0xd86 <pinMode+0x50>
     d84:	a6 c0       	rjmp	.+332    	; 0xed2 <pinMode+0x19c>
     d86:	2c 81       	ldd	r18, Y+4	; 0x04
     d88:	3d 81       	ldd	r19, Y+5	; 0x05
     d8a:	23 30       	cpi	r18, 0x03	; 3
     d8c:	31 05       	cpc	r19, r1
     d8e:	5c f4       	brge	.+22     	; 0xda6 <pinMode+0x70>
     d90:	8c 81       	ldd	r24, Y+4	; 0x04
     d92:	9d 81       	ldd	r25, Y+5	; 0x05
     d94:	00 97       	sbiw	r24, 0x00	; 0
     d96:	c9 f1       	breq	.+114    	; 0xe0a <pinMode+0xd4>
     d98:	2c 81       	ldd	r18, Y+4	; 0x04
     d9a:	3d 81       	ldd	r19, Y+5	; 0x05
     d9c:	21 30       	cpi	r18, 0x01	; 1
     d9e:	31 05       	cpc	r19, r1
     da0:	09 f4       	brne	.+2      	; 0xda4 <pinMode+0x6e>
     da2:	65 c0       	rjmp	.+202    	; 0xe6e <pinMode+0x138>
     da4:	5b c2       	rjmp	.+1206   	; 0x125c <pinMode+0x526>
     da6:	8c 81       	ldd	r24, Y+4	; 0x04
     da8:	9d 81       	ldd	r25, Y+5	; 0x05
     daa:	83 30       	cpi	r24, 0x03	; 3
     dac:	91 05       	cpc	r25, r1
     dae:	09 f4       	brne	.+2      	; 0xdb2 <pinMode+0x7c>
     db0:	c2 c0       	rjmp	.+388    	; 0xf36 <pinMode+0x200>
     db2:	2c 81       	ldd	r18, Y+4	; 0x04
     db4:	3d 81       	ldd	r19, Y+5	; 0x05
     db6:	24 30       	cpi	r18, 0x04	; 4
     db8:	31 05       	cpc	r19, r1
     dba:	09 f4       	brne	.+2      	; 0xdbe <pinMode+0x88>
     dbc:	ee c0       	rjmp	.+476    	; 0xf9a <pinMode+0x264>
     dbe:	4e c2       	rjmp	.+1180   	; 0x125c <pinMode+0x526>
     dc0:	8c 81       	ldd	r24, Y+4	; 0x04
     dc2:	9d 81       	ldd	r25, Y+5	; 0x05
     dc4:	88 30       	cpi	r24, 0x08	; 8
     dc6:	91 05       	cpc	r25, r1
     dc8:	09 f4       	brne	.+2      	; 0xdcc <pinMode+0x96>
     dca:	b3 c1       	rjmp	.+870    	; 0x1132 <pinMode+0x3fc>
     dcc:	2c 81       	ldd	r18, Y+4	; 0x04
     dce:	3d 81       	ldd	r19, Y+5	; 0x05
     dd0:	29 30       	cpi	r18, 0x09	; 9
     dd2:	31 05       	cpc	r19, r1
     dd4:	6c f4       	brge	.+26     	; 0xdf0 <pinMode+0xba>
     dd6:	8c 81       	ldd	r24, Y+4	; 0x04
     dd8:	9d 81       	ldd	r25, Y+5	; 0x05
     dda:	86 30       	cpi	r24, 0x06	; 6
     ddc:	91 05       	cpc	r25, r1
     dde:	09 f4       	brne	.+2      	; 0xde2 <pinMode+0xac>
     de0:	40 c1       	rjmp	.+640    	; 0x1062 <pinMode+0x32c>
     de2:	2c 81       	ldd	r18, Y+4	; 0x04
     de4:	3d 81       	ldd	r19, Y+5	; 0x05
     de6:	27 30       	cpi	r18, 0x07	; 7
     de8:	31 05       	cpc	r19, r1
     dea:	09 f4       	brne	.+2      	; 0xdee <pinMode+0xb8>
     dec:	70 c1       	rjmp	.+736    	; 0x10ce <pinMode+0x398>
     dee:	36 c2       	rjmp	.+1132   	; 0x125c <pinMode+0x526>
     df0:	8c 81       	ldd	r24, Y+4	; 0x04
     df2:	9d 81       	ldd	r25, Y+5	; 0x05
     df4:	89 30       	cpi	r24, 0x09	; 9
     df6:	91 05       	cpc	r25, r1
     df8:	09 f4       	brne	.+2      	; 0xdfc <pinMode+0xc6>
     dfa:	cd c1       	rjmp	.+922    	; 0x1196 <pinMode+0x460>
     dfc:	2c 81       	ldd	r18, Y+4	; 0x04
     dfe:	3d 81       	ldd	r19, Y+5	; 0x05
     e00:	2a 30       	cpi	r18, 0x0A	; 10
     e02:	31 05       	cpc	r19, r1
     e04:	09 f4       	brne	.+2      	; 0xe08 <pinMode+0xd2>
     e06:	f9 c1       	rjmp	.+1010   	; 0x11fa <pinMode+0x4c4>
     e08:	29 c2       	rjmp	.+1106   	; 0x125c <pinMode+0x526>
			case (A | a):
				if(dir == OUTPUT || dir == 1 || dir == HIGH)
     e0a:	8b 81       	ldd	r24, Y+3	; 0x03
     e0c:	81 30       	cpi	r24, 0x01	; 1
     e0e:	31 f0       	breq	.+12     	; 0xe1c <pinMode+0xe6>
     e10:	8b 81       	ldd	r24, Y+3	; 0x03
     e12:	81 30       	cpi	r24, 0x01	; 1
     e14:	19 f0       	breq	.+6      	; 0xe1c <pinMode+0xe6>
     e16:	8b 81       	ldd	r24, Y+3	; 0x03
     e18:	81 30       	cpi	r24, 0x01	; 1
     e1a:	a1 f4       	brne	.+40     	; 0xe44 <pinMode+0x10e>
				{
					SET_BIT(DDRA,pin_num);
     e1c:	a1 e2       	ldi	r26, 0x21	; 33
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	e1 e2       	ldi	r30, 0x21	; 33
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	48 2f       	mov	r20, r24
     e28:	8a 81       	ldd	r24, Y+2	; 0x02
     e2a:	28 2f       	mov	r18, r24
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	02 2e       	mov	r0, r18
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <pinMode+0x104>
     e36:	88 0f       	add	r24, r24
     e38:	99 1f       	adc	r25, r25
     e3a:	0a 94       	dec	r0
     e3c:	e2 f7       	brpl	.-8      	; 0xe36 <pinMode+0x100>
     e3e:	84 2b       	or	r24, r20
     e40:	8c 93       	st	X, r24
     e42:	0c c2       	rjmp	.+1048   	; 0x125c <pinMode+0x526>
				}
				else
				{
					CLR_BIT(DDRA,pin_num);
     e44:	a1 e2       	ldi	r26, 0x21	; 33
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e1 e2       	ldi	r30, 0x21	; 33
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	48 2f       	mov	r20, r24
     e50:	8a 81       	ldd	r24, Y+2	; 0x02
     e52:	28 2f       	mov	r18, r24
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	02 2e       	mov	r0, r18
     e5c:	02 c0       	rjmp	.+4      	; 0xe62 <pinMode+0x12c>
     e5e:	88 0f       	add	r24, r24
     e60:	99 1f       	adc	r25, r25
     e62:	0a 94       	dec	r0
     e64:	e2 f7       	brpl	.-8      	; 0xe5e <pinMode+0x128>
     e66:	80 95       	com	r24
     e68:	84 23       	and	r24, r20
     e6a:	8c 93       	st	X, r24
     e6c:	f7 c1       	rjmp	.+1006   	; 0x125c <pinMode+0x526>
				}
				break;
			case (B | b) :
				if(dir == OUTPUT || dir == 1 || dir == HIGH)
     e6e:	8b 81       	ldd	r24, Y+3	; 0x03
     e70:	81 30       	cpi	r24, 0x01	; 1
     e72:	31 f0       	breq	.+12     	; 0xe80 <pinMode+0x14a>
     e74:	8b 81       	ldd	r24, Y+3	; 0x03
     e76:	81 30       	cpi	r24, 0x01	; 1
     e78:	19 f0       	breq	.+6      	; 0xe80 <pinMode+0x14a>
     e7a:	8b 81       	ldd	r24, Y+3	; 0x03
     e7c:	81 30       	cpi	r24, 0x01	; 1
     e7e:	a1 f4       	brne	.+40     	; 0xea8 <pinMode+0x172>
				{
					SET_BIT(DDRB,pin_num);
     e80:	a4 e2       	ldi	r26, 0x24	; 36
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	e4 e2       	ldi	r30, 0x24	; 36
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	48 2f       	mov	r20, r24
     e8c:	8a 81       	ldd	r24, Y+2	; 0x02
     e8e:	28 2f       	mov	r18, r24
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	02 2e       	mov	r0, r18
     e98:	02 c0       	rjmp	.+4      	; 0xe9e <pinMode+0x168>
     e9a:	88 0f       	add	r24, r24
     e9c:	99 1f       	adc	r25, r25
     e9e:	0a 94       	dec	r0
     ea0:	e2 f7       	brpl	.-8      	; 0xe9a <pinMode+0x164>
     ea2:	84 2b       	or	r24, r20
     ea4:	8c 93       	st	X, r24
     ea6:	da c1       	rjmp	.+948    	; 0x125c <pinMode+0x526>
				}
				else
				{
					CLR_BIT(DDRB,pin_num);
     ea8:	a4 e2       	ldi	r26, 0x24	; 36
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e4 e2       	ldi	r30, 0x24	; 36
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	48 2f       	mov	r20, r24
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	02 2e       	mov	r0, r18
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <pinMode+0x190>
     ec2:	88 0f       	add	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	0a 94       	dec	r0
     ec8:	e2 f7       	brpl	.-8      	; 0xec2 <pinMode+0x18c>
     eca:	80 95       	com	r24
     ecc:	84 23       	and	r24, r20
     ece:	8c 93       	st	X, r24
     ed0:	c5 c1       	rjmp	.+906    	; 0x125c <pinMode+0x526>
				}
				break;
			case (C | c) :
				if(dir == OUTPUT || dir == 1 || dir == HIGH)
     ed2:	8b 81       	ldd	r24, Y+3	; 0x03
     ed4:	81 30       	cpi	r24, 0x01	; 1
     ed6:	31 f0       	breq	.+12     	; 0xee4 <pinMode+0x1ae>
     ed8:	8b 81       	ldd	r24, Y+3	; 0x03
     eda:	81 30       	cpi	r24, 0x01	; 1
     edc:	19 f0       	breq	.+6      	; 0xee4 <pinMode+0x1ae>
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	81 30       	cpi	r24, 0x01	; 1
     ee2:	a1 f4       	brne	.+40     	; 0xf0c <pinMode+0x1d6>
				{
					SET_BIT(DDRC,pin_num);
     ee4:	a7 e2       	ldi	r26, 0x27	; 39
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e7 e2       	ldi	r30, 0x27	; 39
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	48 2f       	mov	r20, r24
     ef0:	8a 81       	ldd	r24, Y+2	; 0x02
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	02 2e       	mov	r0, r18
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <pinMode+0x1cc>
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	0a 94       	dec	r0
     f04:	e2 f7       	brpl	.-8      	; 0xefe <pinMode+0x1c8>
     f06:	84 2b       	or	r24, r20
     f08:	8c 93       	st	X, r24
     f0a:	a8 c1       	rjmp	.+848    	; 0x125c <pinMode+0x526>
				}
				else
				{
					CLR_BIT(DDRC,pin_num);
     f0c:	a7 e2       	ldi	r26, 0x27	; 39
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e7 e2       	ldi	r30, 0x27	; 39
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	48 2f       	mov	r20, r24
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	28 2f       	mov	r18, r24
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	02 2e       	mov	r0, r18
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <pinMode+0x1f4>
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	0a 94       	dec	r0
     f2c:	e2 f7       	brpl	.-8      	; 0xf26 <pinMode+0x1f0>
     f2e:	80 95       	com	r24
     f30:	84 23       	and	r24, r20
     f32:	8c 93       	st	X, r24
     f34:	93 c1       	rjmp	.+806    	; 0x125c <pinMode+0x526>
				}
				break;
			case (D | d) :
				if(dir == OUTPUT || dir == 1 || dir == HIGH)
     f36:	8b 81       	ldd	r24, Y+3	; 0x03
     f38:	81 30       	cpi	r24, 0x01	; 1
     f3a:	31 f0       	breq	.+12     	; 0xf48 <pinMode+0x212>
     f3c:	8b 81       	ldd	r24, Y+3	; 0x03
     f3e:	81 30       	cpi	r24, 0x01	; 1
     f40:	19 f0       	breq	.+6      	; 0xf48 <pinMode+0x212>
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	81 30       	cpi	r24, 0x01	; 1
     f46:	a1 f4       	brne	.+40     	; 0xf70 <pinMode+0x23a>
				{
					SET_BIT(DDRD,pin_num);
     f48:	aa e2       	ldi	r26, 0x2A	; 42
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	ea e2       	ldi	r30, 0x2A	; 42
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	48 2f       	mov	r20, r24
     f54:	8a 81       	ldd	r24, Y+2	; 0x02
     f56:	28 2f       	mov	r18, r24
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	02 2e       	mov	r0, r18
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <pinMode+0x230>
     f62:	88 0f       	add	r24, r24
     f64:	99 1f       	adc	r25, r25
     f66:	0a 94       	dec	r0
     f68:	e2 f7       	brpl	.-8      	; 0xf62 <pinMode+0x22c>
     f6a:	84 2b       	or	r24, r20
     f6c:	8c 93       	st	X, r24
     f6e:	76 c1       	rjmp	.+748    	; 0x125c <pinMode+0x526>
				}
				else
				{
					CLR_BIT(DDRD,pin_num);
     f70:	aa e2       	ldi	r26, 0x2A	; 42
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	ea e2       	ldi	r30, 0x2A	; 42
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	48 2f       	mov	r20, r24
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	02 2e       	mov	r0, r18
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <pinMode+0x258>
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	0a 94       	dec	r0
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <pinMode+0x254>
     f92:	80 95       	com	r24
     f94:	84 23       	and	r24, r20
     f96:	8c 93       	st	X, r24
     f98:	61 c1       	rjmp	.+706    	; 0x125c <pinMode+0x526>
				}
				break;
			case (E | e) :
				if(dir == OUTPUT || dir == 1 || dir == HIGH)
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	81 30       	cpi	r24, 0x01	; 1
     f9e:	31 f0       	breq	.+12     	; 0xfac <pinMode+0x276>
     fa0:	8b 81       	ldd	r24, Y+3	; 0x03
     fa2:	81 30       	cpi	r24, 0x01	; 1
     fa4:	19 f0       	breq	.+6      	; 0xfac <pinMode+0x276>
     fa6:	8b 81       	ldd	r24, Y+3	; 0x03
     fa8:	81 30       	cpi	r24, 0x01	; 1
     faa:	a1 f4       	brne	.+40     	; 0xfd4 <pinMode+0x29e>
				{
					SET_BIT(DDRE,pin_num);
     fac:	ad e2       	ldi	r26, 0x2D	; 45
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	ed e2       	ldi	r30, 0x2D	; 45
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	48 2f       	mov	r20, r24
     fb8:	8a 81       	ldd	r24, Y+2	; 0x02
     fba:	28 2f       	mov	r18, r24
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	02 2e       	mov	r0, r18
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <pinMode+0x294>
     fc6:	88 0f       	add	r24, r24
     fc8:	99 1f       	adc	r25, r25
     fca:	0a 94       	dec	r0
     fcc:	e2 f7       	brpl	.-8      	; 0xfc6 <pinMode+0x290>
     fce:	84 2b       	or	r24, r20
     fd0:	8c 93       	st	X, r24
     fd2:	44 c1       	rjmp	.+648    	; 0x125c <pinMode+0x526>
				}
				else
				{
					CLR_BIT(DDRE,pin_num);
     fd4:	ad e2       	ldi	r26, 0x2D	; 45
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	ed e2       	ldi	r30, 0x2D	; 45
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	48 2f       	mov	r20, r24
     fe0:	8a 81       	ldd	r24, Y+2	; 0x02
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	02 2e       	mov	r0, r18
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <pinMode+0x2bc>
     fee:	88 0f       	add	r24, r24
     ff0:	99 1f       	adc	r25, r25
     ff2:	0a 94       	dec	r0
     ff4:	e2 f7       	brpl	.-8      	; 0xfee <pinMode+0x2b8>
     ff6:	80 95       	com	r24
     ff8:	84 23       	and	r24, r20
     ffa:	8c 93       	st	X, r24
     ffc:	2f c1       	rjmp	.+606    	; 0x125c <pinMode+0x526>
				}
				break;

			case (F | f):
				if(dir == OUTPUT || dir == 1 || dir == HIGH)
     ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    1000:	81 30       	cpi	r24, 0x01	; 1
    1002:	31 f0       	breq	.+12     	; 0x1010 <pinMode+0x2da>
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	81 30       	cpi	r24, 0x01	; 1
    1008:	19 f0       	breq	.+6      	; 0x1010 <pinMode+0x2da>
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	81 30       	cpi	r24, 0x01	; 1
    100e:	a1 f4       	brne	.+40     	; 0x1038 <pinMode+0x302>
				{
					SET_BIT(DDRF,pin_num);
    1010:	a0 e3       	ldi	r26, 0x30	; 48
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	e0 e3       	ldi	r30, 0x30	; 48
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	48 2f       	mov	r20, r24
    101c:	8a 81       	ldd	r24, Y+2	; 0x02
    101e:	28 2f       	mov	r18, r24
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	02 2e       	mov	r0, r18
    1028:	02 c0       	rjmp	.+4      	; 0x102e <pinMode+0x2f8>
    102a:	88 0f       	add	r24, r24
    102c:	99 1f       	adc	r25, r25
    102e:	0a 94       	dec	r0
    1030:	e2 f7       	brpl	.-8      	; 0x102a <pinMode+0x2f4>
    1032:	84 2b       	or	r24, r20
    1034:	8c 93       	st	X, r24
    1036:	12 c1       	rjmp	.+548    	; 0x125c <pinMode+0x526>
				}
				else
				{
					CLR_BIT(DDRF,pin_num);
    1038:	a0 e3       	ldi	r26, 0x30	; 48
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e0 e3       	ldi	r30, 0x30	; 48
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	48 2f       	mov	r20, r24
    1044:	8a 81       	ldd	r24, Y+2	; 0x02
    1046:	28 2f       	mov	r18, r24
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	02 2e       	mov	r0, r18
    1050:	02 c0       	rjmp	.+4      	; 0x1056 <pinMode+0x320>
    1052:	88 0f       	add	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	0a 94       	dec	r0
    1058:	e2 f7       	brpl	.-8      	; 0x1052 <pinMode+0x31c>
    105a:	80 95       	com	r24
    105c:	84 23       	and	r24, r20
    105e:	8c 93       	st	X, r24
    1060:	fd c0       	rjmp	.+506    	; 0x125c <pinMode+0x526>
				}
				break;
			case (G | g) :
				if(pin_num>5){
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
    1064:	86 30       	cpi	r24, 0x06	; 6
    1066:	08 f0       	brcs	.+2      	; 0x106a <pinMode+0x334>
    1068:	f9 c0       	rjmp	.+498    	; 0x125c <pinMode+0x526>
					break;
				}
				if(dir == OUTPUT || dir == 1 || dir == HIGH)
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	81 30       	cpi	r24, 0x01	; 1
    106e:	31 f0       	breq	.+12     	; 0x107c <pinMode+0x346>
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	81 30       	cpi	r24, 0x01	; 1
    1074:	19 f0       	breq	.+6      	; 0x107c <pinMode+0x346>
    1076:	8b 81       	ldd	r24, Y+3	; 0x03
    1078:	81 30       	cpi	r24, 0x01	; 1
    107a:	a1 f4       	brne	.+40     	; 0x10a4 <pinMode+0x36e>
				{
					SET_BIT(DDRG,pin_num);
    107c:	a3 e3       	ldi	r26, 0x33	; 51
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	e3 e3       	ldi	r30, 0x33	; 51
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	48 2f       	mov	r20, r24
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	02 2e       	mov	r0, r18
    1094:	02 c0       	rjmp	.+4      	; 0x109a <pinMode+0x364>
    1096:	88 0f       	add	r24, r24
    1098:	99 1f       	adc	r25, r25
    109a:	0a 94       	dec	r0
    109c:	e2 f7       	brpl	.-8      	; 0x1096 <pinMode+0x360>
    109e:	84 2b       	or	r24, r20
    10a0:	8c 93       	st	X, r24
    10a2:	dc c0       	rjmp	.+440    	; 0x125c <pinMode+0x526>
				}
				else
				{
					CLR_BIT(DDRG,pin_num);
    10a4:	a3 e3       	ldi	r26, 0x33	; 51
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	e3 e3       	ldi	r30, 0x33	; 51
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	48 2f       	mov	r20, r24
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	02 2e       	mov	r0, r18
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <pinMode+0x38c>
    10be:	88 0f       	add	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	0a 94       	dec	r0
    10c4:	e2 f7       	brpl	.-8      	; 0x10be <pinMode+0x388>
    10c6:	80 95       	com	r24
    10c8:	84 23       	and	r24, r20
    10ca:	8c 93       	st	X, r24
    10cc:	c7 c0       	rjmp	.+398    	; 0x125c <pinMode+0x526>
				}
				break;
			case (H | h) :
				if(dir == OUTPUT || dir == 1 || dir == HIGH)
    10ce:	8b 81       	ldd	r24, Y+3	; 0x03
    10d0:	81 30       	cpi	r24, 0x01	; 1
    10d2:	31 f0       	breq	.+12     	; 0x10e0 <pinMode+0x3aa>
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	81 30       	cpi	r24, 0x01	; 1
    10d8:	19 f0       	breq	.+6      	; 0x10e0 <pinMode+0x3aa>
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	81 30       	cpi	r24, 0x01	; 1
    10de:	a1 f4       	brne	.+40     	; 0x1108 <pinMode+0x3d2>
				{
					SET_BIT(DDRH,pin_num);
    10e0:	a1 e0       	ldi	r26, 0x01	; 1
    10e2:	b1 e0       	ldi	r27, 0x01	; 1
    10e4:	e1 e0       	ldi	r30, 0x01	; 1
    10e6:	f1 e0       	ldi	r31, 0x01	; 1
    10e8:	80 81       	ld	r24, Z
    10ea:	48 2f       	mov	r20, r24
    10ec:	8a 81       	ldd	r24, Y+2	; 0x02
    10ee:	28 2f       	mov	r18, r24
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	02 2e       	mov	r0, r18
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <pinMode+0x3c8>
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	0a 94       	dec	r0
    1100:	e2 f7       	brpl	.-8      	; 0x10fa <pinMode+0x3c4>
    1102:	84 2b       	or	r24, r20
    1104:	8c 93       	st	X, r24
    1106:	aa c0       	rjmp	.+340    	; 0x125c <pinMode+0x526>
				}
				else
				{
					CLR_BIT(DDRH,pin_num);
    1108:	a1 e0       	ldi	r26, 0x01	; 1
    110a:	b1 e0       	ldi	r27, 0x01	; 1
    110c:	e1 e0       	ldi	r30, 0x01	; 1
    110e:	f1 e0       	ldi	r31, 0x01	; 1
    1110:	80 81       	ld	r24, Z
    1112:	48 2f       	mov	r20, r24
    1114:	8a 81       	ldd	r24, Y+2	; 0x02
    1116:	28 2f       	mov	r18, r24
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	02 2e       	mov	r0, r18
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <pinMode+0x3f0>
    1122:	88 0f       	add	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	0a 94       	dec	r0
    1128:	e2 f7       	brpl	.-8      	; 0x1122 <pinMode+0x3ec>
    112a:	80 95       	com	r24
    112c:	84 23       	and	r24, r20
    112e:	8c 93       	st	X, r24
    1130:	95 c0       	rjmp	.+298    	; 0x125c <pinMode+0x526>
				}
				break;
			case (J | j) :
				if(dir == OUTPUT || dir == 1 || dir == HIGH)
    1132:	8b 81       	ldd	r24, Y+3	; 0x03
    1134:	81 30       	cpi	r24, 0x01	; 1
    1136:	31 f0       	breq	.+12     	; 0x1144 <pinMode+0x40e>
    1138:	8b 81       	ldd	r24, Y+3	; 0x03
    113a:	81 30       	cpi	r24, 0x01	; 1
    113c:	19 f0       	breq	.+6      	; 0x1144 <pinMode+0x40e>
    113e:	8b 81       	ldd	r24, Y+3	; 0x03
    1140:	81 30       	cpi	r24, 0x01	; 1
    1142:	a1 f4       	brne	.+40     	; 0x116c <pinMode+0x436>
				{
					SET_BIT(DDRJ,pin_num);
    1144:	a4 e0       	ldi	r26, 0x04	; 4
    1146:	b1 e0       	ldi	r27, 0x01	; 1
    1148:	e4 e0       	ldi	r30, 0x04	; 4
    114a:	f1 e0       	ldi	r31, 0x01	; 1
    114c:	80 81       	ld	r24, Z
    114e:	48 2f       	mov	r20, r24
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	02 2e       	mov	r0, r18
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <pinMode+0x42c>
    115e:	88 0f       	add	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	0a 94       	dec	r0
    1164:	e2 f7       	brpl	.-8      	; 0x115e <pinMode+0x428>
    1166:	84 2b       	or	r24, r20
    1168:	8c 93       	st	X, r24
    116a:	78 c0       	rjmp	.+240    	; 0x125c <pinMode+0x526>
				}
				else
				{
					CLR_BIT(DDRJ,pin_num);
    116c:	a4 e0       	ldi	r26, 0x04	; 4
    116e:	b1 e0       	ldi	r27, 0x01	; 1
    1170:	e4 e0       	ldi	r30, 0x04	; 4
    1172:	f1 e0       	ldi	r31, 0x01	; 1
    1174:	80 81       	ld	r24, Z
    1176:	48 2f       	mov	r20, r24
    1178:	8a 81       	ldd	r24, Y+2	; 0x02
    117a:	28 2f       	mov	r18, r24
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	02 2e       	mov	r0, r18
    1184:	02 c0       	rjmp	.+4      	; 0x118a <pinMode+0x454>
    1186:	88 0f       	add	r24, r24
    1188:	99 1f       	adc	r25, r25
    118a:	0a 94       	dec	r0
    118c:	e2 f7       	brpl	.-8      	; 0x1186 <pinMode+0x450>
    118e:	80 95       	com	r24
    1190:	84 23       	and	r24, r20
    1192:	8c 93       	st	X, r24
    1194:	63 c0       	rjmp	.+198    	; 0x125c <pinMode+0x526>
				}
				break;
			case (K | k) :
				if(dir == OUTPUT || dir == 1 || dir == HIGH)
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	81 30       	cpi	r24, 0x01	; 1
    119a:	31 f0       	breq	.+12     	; 0x11a8 <pinMode+0x472>
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	81 30       	cpi	r24, 0x01	; 1
    11a0:	19 f0       	breq	.+6      	; 0x11a8 <pinMode+0x472>
    11a2:	8b 81       	ldd	r24, Y+3	; 0x03
    11a4:	81 30       	cpi	r24, 0x01	; 1
    11a6:	a1 f4       	brne	.+40     	; 0x11d0 <pinMode+0x49a>
				{
					SET_BIT(DDRK,pin_num);
    11a8:	a7 e0       	ldi	r26, 0x07	; 7
    11aa:	b1 e0       	ldi	r27, 0x01	; 1
    11ac:	e7 e0       	ldi	r30, 0x07	; 7
    11ae:	f1 e0       	ldi	r31, 0x01	; 1
    11b0:	80 81       	ld	r24, Z
    11b2:	48 2f       	mov	r20, r24
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	02 2e       	mov	r0, r18
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <pinMode+0x490>
    11c2:	88 0f       	add	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	0a 94       	dec	r0
    11c8:	e2 f7       	brpl	.-8      	; 0x11c2 <pinMode+0x48c>
    11ca:	84 2b       	or	r24, r20
    11cc:	8c 93       	st	X, r24
    11ce:	46 c0       	rjmp	.+140    	; 0x125c <pinMode+0x526>
				}
				else
				{
					CLR_BIT(DDRK,pin_num);
    11d0:	a7 e0       	ldi	r26, 0x07	; 7
    11d2:	b1 e0       	ldi	r27, 0x01	; 1
    11d4:	e7 e0       	ldi	r30, 0x07	; 7
    11d6:	f1 e0       	ldi	r31, 0x01	; 1
    11d8:	80 81       	ld	r24, Z
    11da:	48 2f       	mov	r20, r24
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	28 2f       	mov	r18, r24
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	02 2e       	mov	r0, r18
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <pinMode+0x4b8>
    11ea:	88 0f       	add	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	0a 94       	dec	r0
    11f0:	e2 f7       	brpl	.-8      	; 0x11ea <pinMode+0x4b4>
    11f2:	80 95       	com	r24
    11f4:	84 23       	and	r24, r20
    11f6:	8c 93       	st	X, r24
    11f8:	31 c0       	rjmp	.+98     	; 0x125c <pinMode+0x526>
				}
				break;
			case (L | l) :
				if(dir == OUTPUT || dir == 1 || dir == HIGH)
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	81 30       	cpi	r24, 0x01	; 1
    11fe:	31 f0       	breq	.+12     	; 0x120c <pinMode+0x4d6>
    1200:	8b 81       	ldd	r24, Y+3	; 0x03
    1202:	81 30       	cpi	r24, 0x01	; 1
    1204:	19 f0       	breq	.+6      	; 0x120c <pinMode+0x4d6>
    1206:	8b 81       	ldd	r24, Y+3	; 0x03
    1208:	81 30       	cpi	r24, 0x01	; 1
    120a:	a1 f4       	brne	.+40     	; 0x1234 <pinMode+0x4fe>
				{
					SET_BIT(DDRL,pin_num);
    120c:	aa e0       	ldi	r26, 0x0A	; 10
    120e:	b1 e0       	ldi	r27, 0x01	; 1
    1210:	ea e0       	ldi	r30, 0x0A	; 10
    1212:	f1 e0       	ldi	r31, 0x01	; 1
    1214:	80 81       	ld	r24, Z
    1216:	48 2f       	mov	r20, r24
    1218:	8a 81       	ldd	r24, Y+2	; 0x02
    121a:	28 2f       	mov	r18, r24
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	02 2e       	mov	r0, r18
    1224:	02 c0       	rjmp	.+4      	; 0x122a <pinMode+0x4f4>
    1226:	88 0f       	add	r24, r24
    1228:	99 1f       	adc	r25, r25
    122a:	0a 94       	dec	r0
    122c:	e2 f7       	brpl	.-8      	; 0x1226 <pinMode+0x4f0>
    122e:	84 2b       	or	r24, r20
    1230:	8c 93       	st	X, r24
    1232:	14 c0       	rjmp	.+40     	; 0x125c <pinMode+0x526>
				}
				else
				{
					CLR_BIT(DDRL,pin_num);
    1234:	aa e0       	ldi	r26, 0x0A	; 10
    1236:	b1 e0       	ldi	r27, 0x01	; 1
    1238:	ea e0       	ldi	r30, 0x0A	; 10
    123a:	f1 e0       	ldi	r31, 0x01	; 1
    123c:	80 81       	ld	r24, Z
    123e:	48 2f       	mov	r20, r24
    1240:	8a 81       	ldd	r24, Y+2	; 0x02
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	02 2e       	mov	r0, r18
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <pinMode+0x51c>
    124e:	88 0f       	add	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	0a 94       	dec	r0
    1254:	e2 f7       	brpl	.-8      	; 0x124e <pinMode+0x518>
    1256:	80 95       	com	r24
    1258:	84 23       	and	r24, r20
    125a:	8c 93       	st	X, r24
				}
							break;
			}
		}

}
    125c:	0f 90       	pop	r0
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	0f 90       	pop	r0
    1264:	0f 90       	pop	r0
    1266:	cf 91       	pop	r28
    1268:	df 91       	pop	r29
    126a:	08 95       	ret

0000126c <pinWrite>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void pinWrite(u8 port_num, u8 pin_num, u8 value){
    126c:	df 93       	push	r29
    126e:	cf 93       	push	r28
    1270:	00 d0       	rcall	.+0      	; 0x1272 <pinWrite+0x6>
    1272:	0f 92       	push	r0
    1274:	0f 92       	push	r0
    1276:	cd b7       	in	r28, 0x3d	; 61
    1278:	de b7       	in	r29, 0x3e	; 62
    127a:	89 83       	std	Y+1, r24	; 0x01
    127c:	6a 83       	std	Y+2, r22	; 0x02
    127e:	4b 83       	std	Y+3, r20	; 0x03
	/*
		 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
		 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
		 * In this case the input is not valid port/pin number
		 */
		if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)){}
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	88 30       	cpi	r24, 0x08	; 8
    1284:	08 f0       	brcs	.+2      	; 0x1288 <pinWrite+0x1c>
    1286:	64 c2       	rjmp	.+1224   	; 0x1750 <pinWrite+0x4e4>
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	8b 30       	cpi	r24, 0x0B	; 11
    128c:	08 f0       	brcs	.+2      	; 0x1290 <pinWrite+0x24>
    128e:	60 c2       	rjmp	.+1216   	; 0x1750 <pinWrite+0x4e4>
		else
		{
			/* Write the pin value as required */
			switch(port_num)
    1290:	89 81       	ldd	r24, Y+1	; 0x01
    1292:	28 2f       	mov	r18, r24
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	3d 83       	std	Y+5, r19	; 0x05
    1298:	2c 83       	std	Y+4, r18	; 0x04
    129a:	8c 81       	ldd	r24, Y+4	; 0x04
    129c:	9d 81       	ldd	r25, Y+5	; 0x05
    129e:	85 30       	cpi	r24, 0x05	; 5
    12a0:	91 05       	cpc	r25, r1
    12a2:	09 f4       	brne	.+2      	; 0x12a6 <pinWrite+0x3a>
    12a4:	38 c1       	rjmp	.+624    	; 0x1516 <pinWrite+0x2aa>
    12a6:	2c 81       	ldd	r18, Y+4	; 0x04
    12a8:	3d 81       	ldd	r19, Y+5	; 0x05
    12aa:	26 30       	cpi	r18, 0x06	; 6
    12ac:	31 05       	cpc	r19, r1
    12ae:	1c f5       	brge	.+70     	; 0x12f6 <pinWrite+0x8a>
    12b0:	8c 81       	ldd	r24, Y+4	; 0x04
    12b2:	9d 81       	ldd	r25, Y+5	; 0x05
    12b4:	82 30       	cpi	r24, 0x02	; 2
    12b6:	91 05       	cpc	r25, r1
    12b8:	09 f4       	brne	.+2      	; 0x12bc <pinWrite+0x50>
    12ba:	a0 c0       	rjmp	.+320    	; 0x13fc <pinWrite+0x190>
    12bc:	2c 81       	ldd	r18, Y+4	; 0x04
    12be:	3d 81       	ldd	r19, Y+5	; 0x05
    12c0:	23 30       	cpi	r18, 0x03	; 3
    12c2:	31 05       	cpc	r19, r1
    12c4:	5c f4       	brge	.+22     	; 0x12dc <pinWrite+0x70>
    12c6:	8c 81       	ldd	r24, Y+4	; 0x04
    12c8:	9d 81       	ldd	r25, Y+5	; 0x05
    12ca:	00 97       	sbiw	r24, 0x00	; 0
    12cc:	c9 f1       	breq	.+114    	; 0x1340 <pinWrite+0xd4>
    12ce:	2c 81       	ldd	r18, Y+4	; 0x04
    12d0:	3d 81       	ldd	r19, Y+5	; 0x05
    12d2:	21 30       	cpi	r18, 0x01	; 1
    12d4:	31 05       	cpc	r19, r1
    12d6:	09 f4       	brne	.+2      	; 0x12da <pinWrite+0x6e>
    12d8:	62 c0       	rjmp	.+196    	; 0x139e <pinWrite+0x132>
    12da:	3a c2       	rjmp	.+1140   	; 0x1750 <pinWrite+0x4e4>
    12dc:	8c 81       	ldd	r24, Y+4	; 0x04
    12de:	9d 81       	ldd	r25, Y+5	; 0x05
    12e0:	83 30       	cpi	r24, 0x03	; 3
    12e2:	91 05       	cpc	r25, r1
    12e4:	09 f4       	brne	.+2      	; 0x12e8 <pinWrite+0x7c>
    12e6:	b9 c0       	rjmp	.+370    	; 0x145a <pinWrite+0x1ee>
    12e8:	2c 81       	ldd	r18, Y+4	; 0x04
    12ea:	3d 81       	ldd	r19, Y+5	; 0x05
    12ec:	24 30       	cpi	r18, 0x04	; 4
    12ee:	31 05       	cpc	r19, r1
    12f0:	09 f4       	brne	.+2      	; 0x12f4 <pinWrite+0x88>
    12f2:	e2 c0       	rjmp	.+452    	; 0x14b8 <pinWrite+0x24c>
    12f4:	2d c2       	rjmp	.+1114   	; 0x1750 <pinWrite+0x4e4>
    12f6:	8c 81       	ldd	r24, Y+4	; 0x04
    12f8:	9d 81       	ldd	r25, Y+5	; 0x05
    12fa:	88 30       	cpi	r24, 0x08	; 8
    12fc:	91 05       	cpc	r25, r1
    12fe:	09 f4       	brne	.+2      	; 0x1302 <pinWrite+0x96>
    1300:	9b c1       	rjmp	.+822    	; 0x1638 <pinWrite+0x3cc>
    1302:	2c 81       	ldd	r18, Y+4	; 0x04
    1304:	3d 81       	ldd	r19, Y+5	; 0x05
    1306:	29 30       	cpi	r18, 0x09	; 9
    1308:	31 05       	cpc	r19, r1
    130a:	6c f4       	brge	.+26     	; 0x1326 <pinWrite+0xba>
    130c:	8c 81       	ldd	r24, Y+4	; 0x04
    130e:	9d 81       	ldd	r25, Y+5	; 0x05
    1310:	86 30       	cpi	r24, 0x06	; 6
    1312:	91 05       	cpc	r25, r1
    1314:	09 f4       	brne	.+2      	; 0x1318 <pinWrite+0xac>
    1316:	2e c1       	rjmp	.+604    	; 0x1574 <pinWrite+0x308>
    1318:	2c 81       	ldd	r18, Y+4	; 0x04
    131a:	3d 81       	ldd	r19, Y+5	; 0x05
    131c:	27 30       	cpi	r18, 0x07	; 7
    131e:	31 05       	cpc	r19, r1
    1320:	09 f4       	brne	.+2      	; 0x1324 <pinWrite+0xb8>
    1322:	5b c1       	rjmp	.+694    	; 0x15da <pinWrite+0x36e>
    1324:	15 c2       	rjmp	.+1066   	; 0x1750 <pinWrite+0x4e4>
    1326:	8c 81       	ldd	r24, Y+4	; 0x04
    1328:	9d 81       	ldd	r25, Y+5	; 0x05
    132a:	89 30       	cpi	r24, 0x09	; 9
    132c:	91 05       	cpc	r25, r1
    132e:	09 f4       	brne	.+2      	; 0x1332 <pinWrite+0xc6>
    1330:	b2 c1       	rjmp	.+868    	; 0x1696 <pinWrite+0x42a>
    1332:	2c 81       	ldd	r18, Y+4	; 0x04
    1334:	3d 81       	ldd	r19, Y+5	; 0x05
    1336:	2a 30       	cpi	r18, 0x0A	; 10
    1338:	31 05       	cpc	r19, r1
    133a:	09 f4       	brne	.+2      	; 0x133e <pinWrite+0xd2>
    133c:	db c1       	rjmp	.+950    	; 0x16f4 <pinWrite+0x488>
    133e:	08 c2       	rjmp	.+1040   	; 0x1750 <pinWrite+0x4e4>
			{
			case (A | a):
				if(value == HIGH || value == 1)
    1340:	8b 81       	ldd	r24, Y+3	; 0x03
    1342:	81 30       	cpi	r24, 0x01	; 1
    1344:	19 f0       	breq	.+6      	; 0x134c <pinWrite+0xe0>
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	81 30       	cpi	r24, 0x01	; 1
    134a:	a1 f4       	brne	.+40     	; 0x1374 <pinWrite+0x108>
				{
					SET_BIT(PORTA,pin_num);
    134c:	a2 e2       	ldi	r26, 0x22	; 34
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	e2 e2       	ldi	r30, 0x22	; 34
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	48 2f       	mov	r20, r24
    1358:	8a 81       	ldd	r24, Y+2	; 0x02
    135a:	28 2f       	mov	r18, r24
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	02 2e       	mov	r0, r18
    1364:	02 c0       	rjmp	.+4      	; 0x136a <pinWrite+0xfe>
    1366:	88 0f       	add	r24, r24
    1368:	99 1f       	adc	r25, r25
    136a:	0a 94       	dec	r0
    136c:	e2 f7       	brpl	.-8      	; 0x1366 <pinWrite+0xfa>
    136e:	84 2b       	or	r24, r20
    1370:	8c 93       	st	X, r24
    1372:	ee c1       	rjmp	.+988    	; 0x1750 <pinWrite+0x4e4>
				}
				else
				{
					CLR_BIT(PORTA,pin_num);
    1374:	a2 e2       	ldi	r26, 0x22	; 34
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	e2 e2       	ldi	r30, 0x22	; 34
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	48 2f       	mov	r20, r24
    1380:	8a 81       	ldd	r24, Y+2	; 0x02
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	02 2e       	mov	r0, r18
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <pinWrite+0x126>
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	0a 94       	dec	r0
    1394:	e2 f7       	brpl	.-8      	; 0x138e <pinWrite+0x122>
    1396:	80 95       	com	r24
    1398:	84 23       	and	r24, r20
    139a:	8c 93       	st	X, r24
    139c:	d9 c1       	rjmp	.+946    	; 0x1750 <pinWrite+0x4e4>
				}
				break;
			case (B | b):
				if(value == HIGH || value == 1)
    139e:	8b 81       	ldd	r24, Y+3	; 0x03
    13a0:	81 30       	cpi	r24, 0x01	; 1
    13a2:	19 f0       	breq	.+6      	; 0x13aa <pinWrite+0x13e>
    13a4:	8b 81       	ldd	r24, Y+3	; 0x03
    13a6:	81 30       	cpi	r24, 0x01	; 1
    13a8:	a1 f4       	brne	.+40     	; 0x13d2 <pinWrite+0x166>
				{
					SET_BIT(PORTB,pin_num);
    13aa:	a5 e2       	ldi	r26, 0x25	; 37
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	e5 e2       	ldi	r30, 0x25	; 37
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	48 2f       	mov	r20, r24
    13b6:	8a 81       	ldd	r24, Y+2	; 0x02
    13b8:	28 2f       	mov	r18, r24
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	02 2e       	mov	r0, r18
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <pinWrite+0x15c>
    13c4:	88 0f       	add	r24, r24
    13c6:	99 1f       	adc	r25, r25
    13c8:	0a 94       	dec	r0
    13ca:	e2 f7       	brpl	.-8      	; 0x13c4 <pinWrite+0x158>
    13cc:	84 2b       	or	r24, r20
    13ce:	8c 93       	st	X, r24
    13d0:	bf c1       	rjmp	.+894    	; 0x1750 <pinWrite+0x4e4>
				}
				else
				{
					CLR_BIT(PORTB,pin_num);
    13d2:	a5 e2       	ldi	r26, 0x25	; 37
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	e5 e2       	ldi	r30, 0x25	; 37
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	48 2f       	mov	r20, r24
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	02 2e       	mov	r0, r18
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <pinWrite+0x184>
    13ec:	88 0f       	add	r24, r24
    13ee:	99 1f       	adc	r25, r25
    13f0:	0a 94       	dec	r0
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <pinWrite+0x180>
    13f4:	80 95       	com	r24
    13f6:	84 23       	and	r24, r20
    13f8:	8c 93       	st	X, r24
    13fa:	aa c1       	rjmp	.+852    	; 0x1750 <pinWrite+0x4e4>
				}
				break;
			case (C | c):
				if(value == HIGH || value == 1)
    13fc:	8b 81       	ldd	r24, Y+3	; 0x03
    13fe:	81 30       	cpi	r24, 0x01	; 1
    1400:	19 f0       	breq	.+6      	; 0x1408 <pinWrite+0x19c>
    1402:	8b 81       	ldd	r24, Y+3	; 0x03
    1404:	81 30       	cpi	r24, 0x01	; 1
    1406:	a1 f4       	brne	.+40     	; 0x1430 <pinWrite+0x1c4>
				{
					SET_BIT(PORTC,pin_num);
    1408:	a8 e2       	ldi	r26, 0x28	; 40
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e8 e2       	ldi	r30, 0x28	; 40
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	48 2f       	mov	r20, r24
    1414:	8a 81       	ldd	r24, Y+2	; 0x02
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	02 2e       	mov	r0, r18
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <pinWrite+0x1ba>
    1422:	88 0f       	add	r24, r24
    1424:	99 1f       	adc	r25, r25
    1426:	0a 94       	dec	r0
    1428:	e2 f7       	brpl	.-8      	; 0x1422 <pinWrite+0x1b6>
    142a:	84 2b       	or	r24, r20
    142c:	8c 93       	st	X, r24
    142e:	90 c1       	rjmp	.+800    	; 0x1750 <pinWrite+0x4e4>
				}
				else
				{
					CLR_BIT(PORTC,pin_num);
    1430:	a8 e2       	ldi	r26, 0x28	; 40
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	e8 e2       	ldi	r30, 0x28	; 40
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	48 2f       	mov	r20, r24
    143c:	8a 81       	ldd	r24, Y+2	; 0x02
    143e:	28 2f       	mov	r18, r24
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	02 2e       	mov	r0, r18
    1448:	02 c0       	rjmp	.+4      	; 0x144e <pinWrite+0x1e2>
    144a:	88 0f       	add	r24, r24
    144c:	99 1f       	adc	r25, r25
    144e:	0a 94       	dec	r0
    1450:	e2 f7       	brpl	.-8      	; 0x144a <pinWrite+0x1de>
    1452:	80 95       	com	r24
    1454:	84 23       	and	r24, r20
    1456:	8c 93       	st	X, r24
    1458:	7b c1       	rjmp	.+758    	; 0x1750 <pinWrite+0x4e4>
				}
				break;
			case (D | d):
				if(value == HIGH || value == 1)
    145a:	8b 81       	ldd	r24, Y+3	; 0x03
    145c:	81 30       	cpi	r24, 0x01	; 1
    145e:	19 f0       	breq	.+6      	; 0x1466 <pinWrite+0x1fa>
    1460:	8b 81       	ldd	r24, Y+3	; 0x03
    1462:	81 30       	cpi	r24, 0x01	; 1
    1464:	a1 f4       	brne	.+40     	; 0x148e <pinWrite+0x222>
				{
					SET_BIT(PORTD,pin_num);
    1466:	ab e2       	ldi	r26, 0x2B	; 43
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	eb e2       	ldi	r30, 0x2B	; 43
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	48 2f       	mov	r20, r24
    1472:	8a 81       	ldd	r24, Y+2	; 0x02
    1474:	28 2f       	mov	r18, r24
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	02 2e       	mov	r0, r18
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <pinWrite+0x218>
    1480:	88 0f       	add	r24, r24
    1482:	99 1f       	adc	r25, r25
    1484:	0a 94       	dec	r0
    1486:	e2 f7       	brpl	.-8      	; 0x1480 <pinWrite+0x214>
    1488:	84 2b       	or	r24, r20
    148a:	8c 93       	st	X, r24
    148c:	61 c1       	rjmp	.+706    	; 0x1750 <pinWrite+0x4e4>
				}
				else
				{
					CLR_BIT(PORTD,pin_num);
    148e:	ab e2       	ldi	r26, 0x2B	; 43
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	eb e2       	ldi	r30, 0x2B	; 43
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	48 2f       	mov	r20, r24
    149a:	8a 81       	ldd	r24, Y+2	; 0x02
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	02 2e       	mov	r0, r18
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <pinWrite+0x240>
    14a8:	88 0f       	add	r24, r24
    14aa:	99 1f       	adc	r25, r25
    14ac:	0a 94       	dec	r0
    14ae:	e2 f7       	brpl	.-8      	; 0x14a8 <pinWrite+0x23c>
    14b0:	80 95       	com	r24
    14b2:	84 23       	and	r24, r20
    14b4:	8c 93       	st	X, r24
    14b6:	4c c1       	rjmp	.+664    	; 0x1750 <pinWrite+0x4e4>
				}
				break;
			case (E | e):
				if(value == HIGH || value == 1)
    14b8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ba:	81 30       	cpi	r24, 0x01	; 1
    14bc:	19 f0       	breq	.+6      	; 0x14c4 <pinWrite+0x258>
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	81 30       	cpi	r24, 0x01	; 1
    14c2:	a1 f4       	brne	.+40     	; 0x14ec <pinWrite+0x280>
				{
					SET_BIT(PORTE,pin_num);
    14c4:	ae e2       	ldi	r26, 0x2E	; 46
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	ee e2       	ldi	r30, 0x2E	; 46
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	48 2f       	mov	r20, r24
    14d0:	8a 81       	ldd	r24, Y+2	; 0x02
    14d2:	28 2f       	mov	r18, r24
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	02 2e       	mov	r0, r18
    14dc:	02 c0       	rjmp	.+4      	; 0x14e2 <pinWrite+0x276>
    14de:	88 0f       	add	r24, r24
    14e0:	99 1f       	adc	r25, r25
    14e2:	0a 94       	dec	r0
    14e4:	e2 f7       	brpl	.-8      	; 0x14de <pinWrite+0x272>
    14e6:	84 2b       	or	r24, r20
    14e8:	8c 93       	st	X, r24
    14ea:	32 c1       	rjmp	.+612    	; 0x1750 <pinWrite+0x4e4>
				}
				else
				{
					CLR_BIT(PORTE,pin_num);
    14ec:	ae e2       	ldi	r26, 0x2E	; 46
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	ee e2       	ldi	r30, 0x2E	; 46
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	48 2f       	mov	r20, r24
    14f8:	8a 81       	ldd	r24, Y+2	; 0x02
    14fa:	28 2f       	mov	r18, r24
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	02 2e       	mov	r0, r18
    1504:	02 c0       	rjmp	.+4      	; 0x150a <pinWrite+0x29e>
    1506:	88 0f       	add	r24, r24
    1508:	99 1f       	adc	r25, r25
    150a:	0a 94       	dec	r0
    150c:	e2 f7       	brpl	.-8      	; 0x1506 <pinWrite+0x29a>
    150e:	80 95       	com	r24
    1510:	84 23       	and	r24, r20
    1512:	8c 93       	st	X, r24
    1514:	1d c1       	rjmp	.+570    	; 0x1750 <pinWrite+0x4e4>
				}
				break;
			case (F | f):
				if(value == HIGH || value == 1)
    1516:	8b 81       	ldd	r24, Y+3	; 0x03
    1518:	81 30       	cpi	r24, 0x01	; 1
    151a:	19 f0       	breq	.+6      	; 0x1522 <pinWrite+0x2b6>
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
    151e:	81 30       	cpi	r24, 0x01	; 1
    1520:	a1 f4       	brne	.+40     	; 0x154a <pinWrite+0x2de>
				{
					SET_BIT(PORTF,pin_num);
    1522:	a1 e3       	ldi	r26, 0x31	; 49
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	e1 e3       	ldi	r30, 0x31	; 49
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	48 2f       	mov	r20, r24
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	02 2e       	mov	r0, r18
    153a:	02 c0       	rjmp	.+4      	; 0x1540 <pinWrite+0x2d4>
    153c:	88 0f       	add	r24, r24
    153e:	99 1f       	adc	r25, r25
    1540:	0a 94       	dec	r0
    1542:	e2 f7       	brpl	.-8      	; 0x153c <pinWrite+0x2d0>
    1544:	84 2b       	or	r24, r20
    1546:	8c 93       	st	X, r24
    1548:	03 c1       	rjmp	.+518    	; 0x1750 <pinWrite+0x4e4>
				}
				else
				{
					CLR_BIT(PORTF,pin_num);
    154a:	a1 e3       	ldi	r26, 0x31	; 49
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	e1 e3       	ldi	r30, 0x31	; 49
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	48 2f       	mov	r20, r24
    1556:	8a 81       	ldd	r24, Y+2	; 0x02
    1558:	28 2f       	mov	r18, r24
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	02 2e       	mov	r0, r18
    1562:	02 c0       	rjmp	.+4      	; 0x1568 <pinWrite+0x2fc>
    1564:	88 0f       	add	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	0a 94       	dec	r0
    156a:	e2 f7       	brpl	.-8      	; 0x1564 <pinWrite+0x2f8>
    156c:	80 95       	com	r24
    156e:	84 23       	and	r24, r20
    1570:	8c 93       	st	X, r24
    1572:	ee c0       	rjmp	.+476    	; 0x1750 <pinWrite+0x4e4>
				}
				break;
			case (G | g):
				if(pin_num>5){break;}
    1574:	8a 81       	ldd	r24, Y+2	; 0x02
    1576:	86 30       	cpi	r24, 0x06	; 6
    1578:	08 f0       	brcs	.+2      	; 0x157c <pinWrite+0x310>
    157a:	ea c0       	rjmp	.+468    	; 0x1750 <pinWrite+0x4e4>
				if(value == HIGH || value == 1)
    157c:	8b 81       	ldd	r24, Y+3	; 0x03
    157e:	81 30       	cpi	r24, 0x01	; 1
    1580:	19 f0       	breq	.+6      	; 0x1588 <pinWrite+0x31c>
    1582:	8b 81       	ldd	r24, Y+3	; 0x03
    1584:	81 30       	cpi	r24, 0x01	; 1
    1586:	a1 f4       	brne	.+40     	; 0x15b0 <pinWrite+0x344>
				{
					SET_BIT(PORTG,pin_num);
    1588:	a4 e3       	ldi	r26, 0x34	; 52
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	e4 e3       	ldi	r30, 0x34	; 52
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	48 2f       	mov	r20, r24
    1594:	8a 81       	ldd	r24, Y+2	; 0x02
    1596:	28 2f       	mov	r18, r24
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	02 2e       	mov	r0, r18
    15a0:	02 c0       	rjmp	.+4      	; 0x15a6 <pinWrite+0x33a>
    15a2:	88 0f       	add	r24, r24
    15a4:	99 1f       	adc	r25, r25
    15a6:	0a 94       	dec	r0
    15a8:	e2 f7       	brpl	.-8      	; 0x15a2 <pinWrite+0x336>
    15aa:	84 2b       	or	r24, r20
    15ac:	8c 93       	st	X, r24
    15ae:	d0 c0       	rjmp	.+416    	; 0x1750 <pinWrite+0x4e4>
				}
				else
				{
					CLR_BIT(PORTG,pin_num);
    15b0:	a4 e3       	ldi	r26, 0x34	; 52
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	e4 e3       	ldi	r30, 0x34	; 52
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	48 2f       	mov	r20, r24
    15bc:	8a 81       	ldd	r24, Y+2	; 0x02
    15be:	28 2f       	mov	r18, r24
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	02 2e       	mov	r0, r18
    15c8:	02 c0       	rjmp	.+4      	; 0x15ce <pinWrite+0x362>
    15ca:	88 0f       	add	r24, r24
    15cc:	99 1f       	adc	r25, r25
    15ce:	0a 94       	dec	r0
    15d0:	e2 f7       	brpl	.-8      	; 0x15ca <pinWrite+0x35e>
    15d2:	80 95       	com	r24
    15d4:	84 23       	and	r24, r20
    15d6:	8c 93       	st	X, r24
    15d8:	bb c0       	rjmp	.+374    	; 0x1750 <pinWrite+0x4e4>
				}
				break;
			case (H | h):
				if(value == HIGH || value == 1)
    15da:	8b 81       	ldd	r24, Y+3	; 0x03
    15dc:	81 30       	cpi	r24, 0x01	; 1
    15de:	19 f0       	breq	.+6      	; 0x15e6 <pinWrite+0x37a>
    15e0:	8b 81       	ldd	r24, Y+3	; 0x03
    15e2:	81 30       	cpi	r24, 0x01	; 1
    15e4:	a1 f4       	brne	.+40     	; 0x160e <pinWrite+0x3a2>
				{
					SET_BIT(PORTH,pin_num);
    15e6:	a2 e0       	ldi	r26, 0x02	; 2
    15e8:	b1 e0       	ldi	r27, 0x01	; 1
    15ea:	e2 e0       	ldi	r30, 0x02	; 2
    15ec:	f1 e0       	ldi	r31, 0x01	; 1
    15ee:	80 81       	ld	r24, Z
    15f0:	48 2f       	mov	r20, r24
    15f2:	8a 81       	ldd	r24, Y+2	; 0x02
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	02 2e       	mov	r0, r18
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <pinWrite+0x398>
    1600:	88 0f       	add	r24, r24
    1602:	99 1f       	adc	r25, r25
    1604:	0a 94       	dec	r0
    1606:	e2 f7       	brpl	.-8      	; 0x1600 <pinWrite+0x394>
    1608:	84 2b       	or	r24, r20
    160a:	8c 93       	st	X, r24
    160c:	a1 c0       	rjmp	.+322    	; 0x1750 <pinWrite+0x4e4>
				}
				else
				{
					CLR_BIT(PORTH,pin_num);
    160e:	a2 e0       	ldi	r26, 0x02	; 2
    1610:	b1 e0       	ldi	r27, 0x01	; 1
    1612:	e2 e0       	ldi	r30, 0x02	; 2
    1614:	f1 e0       	ldi	r31, 0x01	; 1
    1616:	80 81       	ld	r24, Z
    1618:	48 2f       	mov	r20, r24
    161a:	8a 81       	ldd	r24, Y+2	; 0x02
    161c:	28 2f       	mov	r18, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	02 2e       	mov	r0, r18
    1626:	02 c0       	rjmp	.+4      	; 0x162c <pinWrite+0x3c0>
    1628:	88 0f       	add	r24, r24
    162a:	99 1f       	adc	r25, r25
    162c:	0a 94       	dec	r0
    162e:	e2 f7       	brpl	.-8      	; 0x1628 <pinWrite+0x3bc>
    1630:	80 95       	com	r24
    1632:	84 23       	and	r24, r20
    1634:	8c 93       	st	X, r24
    1636:	8c c0       	rjmp	.+280    	; 0x1750 <pinWrite+0x4e4>
				}
				break;
			case (J | j):
				if(value == HIGH || value == 1)
    1638:	8b 81       	ldd	r24, Y+3	; 0x03
    163a:	81 30       	cpi	r24, 0x01	; 1
    163c:	19 f0       	breq	.+6      	; 0x1644 <pinWrite+0x3d8>
    163e:	8b 81       	ldd	r24, Y+3	; 0x03
    1640:	81 30       	cpi	r24, 0x01	; 1
    1642:	a1 f4       	brne	.+40     	; 0x166c <pinWrite+0x400>
				{
					SET_BIT(PORTJ,pin_num);
    1644:	a5 e0       	ldi	r26, 0x05	; 5
    1646:	b1 e0       	ldi	r27, 0x01	; 1
    1648:	e5 e0       	ldi	r30, 0x05	; 5
    164a:	f1 e0       	ldi	r31, 0x01	; 1
    164c:	80 81       	ld	r24, Z
    164e:	48 2f       	mov	r20, r24
    1650:	8a 81       	ldd	r24, Y+2	; 0x02
    1652:	28 2f       	mov	r18, r24
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	02 2e       	mov	r0, r18
    165c:	02 c0       	rjmp	.+4      	; 0x1662 <pinWrite+0x3f6>
    165e:	88 0f       	add	r24, r24
    1660:	99 1f       	adc	r25, r25
    1662:	0a 94       	dec	r0
    1664:	e2 f7       	brpl	.-8      	; 0x165e <pinWrite+0x3f2>
    1666:	84 2b       	or	r24, r20
    1668:	8c 93       	st	X, r24
    166a:	72 c0       	rjmp	.+228    	; 0x1750 <pinWrite+0x4e4>
				}
				else
				{
					CLR_BIT(PORTJ,pin_num);
    166c:	a5 e0       	ldi	r26, 0x05	; 5
    166e:	b1 e0       	ldi	r27, 0x01	; 1
    1670:	e5 e0       	ldi	r30, 0x05	; 5
    1672:	f1 e0       	ldi	r31, 0x01	; 1
    1674:	80 81       	ld	r24, Z
    1676:	48 2f       	mov	r20, r24
    1678:	8a 81       	ldd	r24, Y+2	; 0x02
    167a:	28 2f       	mov	r18, r24
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	02 2e       	mov	r0, r18
    1684:	02 c0       	rjmp	.+4      	; 0x168a <pinWrite+0x41e>
    1686:	88 0f       	add	r24, r24
    1688:	99 1f       	adc	r25, r25
    168a:	0a 94       	dec	r0
    168c:	e2 f7       	brpl	.-8      	; 0x1686 <pinWrite+0x41a>
    168e:	80 95       	com	r24
    1690:	84 23       	and	r24, r20
    1692:	8c 93       	st	X, r24
    1694:	5d c0       	rjmp	.+186    	; 0x1750 <pinWrite+0x4e4>
				}
				break;
			case (K | k):
				if(value == HIGH || value == 1)
    1696:	8b 81       	ldd	r24, Y+3	; 0x03
    1698:	81 30       	cpi	r24, 0x01	; 1
    169a:	19 f0       	breq	.+6      	; 0x16a2 <pinWrite+0x436>
    169c:	8b 81       	ldd	r24, Y+3	; 0x03
    169e:	81 30       	cpi	r24, 0x01	; 1
    16a0:	a1 f4       	brne	.+40     	; 0x16ca <pinWrite+0x45e>
				{
					SET_BIT(PORTK,pin_num);
    16a2:	a8 e0       	ldi	r26, 0x08	; 8
    16a4:	b1 e0       	ldi	r27, 0x01	; 1
    16a6:	e8 e0       	ldi	r30, 0x08	; 8
    16a8:	f1 e0       	ldi	r31, 0x01	; 1
    16aa:	80 81       	ld	r24, Z
    16ac:	48 2f       	mov	r20, r24
    16ae:	8a 81       	ldd	r24, Y+2	; 0x02
    16b0:	28 2f       	mov	r18, r24
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	02 2e       	mov	r0, r18
    16ba:	02 c0       	rjmp	.+4      	; 0x16c0 <pinWrite+0x454>
    16bc:	88 0f       	add	r24, r24
    16be:	99 1f       	adc	r25, r25
    16c0:	0a 94       	dec	r0
    16c2:	e2 f7       	brpl	.-8      	; 0x16bc <pinWrite+0x450>
    16c4:	84 2b       	or	r24, r20
    16c6:	8c 93       	st	X, r24
    16c8:	43 c0       	rjmp	.+134    	; 0x1750 <pinWrite+0x4e4>
				}
				else
				{
					CLR_BIT(PORTK,pin_num);
    16ca:	a8 e0       	ldi	r26, 0x08	; 8
    16cc:	b1 e0       	ldi	r27, 0x01	; 1
    16ce:	e8 e0       	ldi	r30, 0x08	; 8
    16d0:	f1 e0       	ldi	r31, 0x01	; 1
    16d2:	80 81       	ld	r24, Z
    16d4:	48 2f       	mov	r20, r24
    16d6:	8a 81       	ldd	r24, Y+2	; 0x02
    16d8:	28 2f       	mov	r18, r24
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	02 2e       	mov	r0, r18
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <pinWrite+0x47c>
    16e4:	88 0f       	add	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	0a 94       	dec	r0
    16ea:	e2 f7       	brpl	.-8      	; 0x16e4 <pinWrite+0x478>
    16ec:	80 95       	com	r24
    16ee:	84 23       	and	r24, r20
    16f0:	8c 93       	st	X, r24
    16f2:	2e c0       	rjmp	.+92     	; 0x1750 <pinWrite+0x4e4>
				}
				break;
			case (L | l):
				if(value == HIGH || value == 1)
    16f4:	8b 81       	ldd	r24, Y+3	; 0x03
    16f6:	81 30       	cpi	r24, 0x01	; 1
    16f8:	19 f0       	breq	.+6      	; 0x1700 <pinWrite+0x494>
    16fa:	8b 81       	ldd	r24, Y+3	; 0x03
    16fc:	81 30       	cpi	r24, 0x01	; 1
    16fe:	a1 f4       	brne	.+40     	; 0x1728 <pinWrite+0x4bc>
				{
					SET_BIT(PORTL,pin_num);
    1700:	ab e0       	ldi	r26, 0x0B	; 11
    1702:	b1 e0       	ldi	r27, 0x01	; 1
    1704:	eb e0       	ldi	r30, 0x0B	; 11
    1706:	f1 e0       	ldi	r31, 0x01	; 1
    1708:	80 81       	ld	r24, Z
    170a:	48 2f       	mov	r20, r24
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	02 2e       	mov	r0, r18
    1718:	02 c0       	rjmp	.+4      	; 0x171e <pinWrite+0x4b2>
    171a:	88 0f       	add	r24, r24
    171c:	99 1f       	adc	r25, r25
    171e:	0a 94       	dec	r0
    1720:	e2 f7       	brpl	.-8      	; 0x171a <pinWrite+0x4ae>
    1722:	84 2b       	or	r24, r20
    1724:	8c 93       	st	X, r24
    1726:	14 c0       	rjmp	.+40     	; 0x1750 <pinWrite+0x4e4>
				}
				else
				{
					CLR_BIT(PORTL,pin_num);
    1728:	ab e0       	ldi	r26, 0x0B	; 11
    172a:	b1 e0       	ldi	r27, 0x01	; 1
    172c:	eb e0       	ldi	r30, 0x0B	; 11
    172e:	f1 e0       	ldi	r31, 0x01	; 1
    1730:	80 81       	ld	r24, Z
    1732:	48 2f       	mov	r20, r24
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	28 2f       	mov	r18, r24
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	02 2e       	mov	r0, r18
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <pinWrite+0x4da>
    1742:	88 0f       	add	r24, r24
    1744:	99 1f       	adc	r25, r25
    1746:	0a 94       	dec	r0
    1748:	e2 f7       	brpl	.-8      	; 0x1742 <pinWrite+0x4d6>
    174a:	80 95       	com	r24
    174c:	84 23       	and	r24, r20
    174e:	8c 93       	st	X, r24
				}
				break;
			}
		}
}
    1750:	0f 90       	pop	r0
    1752:	0f 90       	pop	r0
    1754:	0f 90       	pop	r0
    1756:	0f 90       	pop	r0
    1758:	0f 90       	pop	r0
    175a:	cf 91       	pop	r28
    175c:	df 91       	pop	r29
    175e:	08 95       	ret

00001760 <pinRead>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
u8 pinRead(u8 port_num, u8 pin_num){
    1760:	df 93       	push	r29
    1762:	cf 93       	push	r28
    1764:	00 d0       	rcall	.+0      	; 0x1766 <pinRead+0x6>
    1766:	0f 92       	push	r0
    1768:	0f 92       	push	r0
    176a:	cd b7       	in	r28, 0x3d	; 61
    176c:	de b7       	in	r29, 0x3e	; 62
    176e:	8a 83       	std	Y+2, r24	; 0x02
    1770:	6b 83       	std	Y+3, r22	; 0x03
		u8 pin_value = LOW;
    1772:	19 82       	std	Y+1, r1	; 0x01
		/*
		 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
		 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
		 * In this case the input is not valid port/pin number
		 */
		if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)){}
    1774:	8b 81       	ldd	r24, Y+3	; 0x03
    1776:	88 30       	cpi	r24, 0x08	; 8
    1778:	08 f0       	brcs	.+2      	; 0x177c <pinRead+0x1c>
    177a:	63 c1       	rjmp	.+710    	; 0x1a42 <pinRead+0x2e2>
    177c:	8a 81       	ldd	r24, Y+2	; 0x02
    177e:	8b 30       	cpi	r24, 0x0B	; 11
    1780:	08 f0       	brcs	.+2      	; 0x1784 <pinRead+0x24>
    1782:	5f c1       	rjmp	.+702    	; 0x1a42 <pinRead+0x2e2>
		else
		{
			/* Read the pin value as required */
			switch(port_num)
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	28 2f       	mov	r18, r24
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	3d 83       	std	Y+5, r19	; 0x05
    178c:	2c 83       	std	Y+4, r18	; 0x04
    178e:	4c 81       	ldd	r20, Y+4	; 0x04
    1790:	5d 81       	ldd	r21, Y+5	; 0x05
    1792:	45 30       	cpi	r20, 0x05	; 5
    1794:	51 05       	cpc	r21, r1
    1796:	09 f4       	brne	.+2      	; 0x179a <pinRead+0x3a>
    1798:	c5 c0       	rjmp	.+394    	; 0x1924 <pinRead+0x1c4>
    179a:	8c 81       	ldd	r24, Y+4	; 0x04
    179c:	9d 81       	ldd	r25, Y+5	; 0x05
    179e:	86 30       	cpi	r24, 0x06	; 6
    17a0:	91 05       	cpc	r25, r1
    17a2:	1c f5       	brge	.+70     	; 0x17ea <pinRead+0x8a>
    17a4:	2c 81       	ldd	r18, Y+4	; 0x04
    17a6:	3d 81       	ldd	r19, Y+5	; 0x05
    17a8:	22 30       	cpi	r18, 0x02	; 2
    17aa:	31 05       	cpc	r19, r1
    17ac:	09 f4       	brne	.+2      	; 0x17b0 <pinRead+0x50>
    17ae:	72 c0       	rjmp	.+228    	; 0x1894 <pinRead+0x134>
    17b0:	4c 81       	ldd	r20, Y+4	; 0x04
    17b2:	5d 81       	ldd	r21, Y+5	; 0x05
    17b4:	43 30       	cpi	r20, 0x03	; 3
    17b6:	51 05       	cpc	r21, r1
    17b8:	5c f4       	brge	.+22     	; 0x17d0 <pinRead+0x70>
    17ba:	8c 81       	ldd	r24, Y+4	; 0x04
    17bc:	9d 81       	ldd	r25, Y+5	; 0x05
    17be:	00 97       	sbiw	r24, 0x00	; 0
    17c0:	c9 f1       	breq	.+114    	; 0x1834 <pinRead+0xd4>
    17c2:	2c 81       	ldd	r18, Y+4	; 0x04
    17c4:	3d 81       	ldd	r19, Y+5	; 0x05
    17c6:	21 30       	cpi	r18, 0x01	; 1
    17c8:	31 05       	cpc	r19, r1
    17ca:	09 f4       	brne	.+2      	; 0x17ce <pinRead+0x6e>
    17cc:	4b c0       	rjmp	.+150    	; 0x1864 <pinRead+0x104>
    17ce:	39 c1       	rjmp	.+626    	; 0x1a42 <pinRead+0x2e2>
    17d0:	4c 81       	ldd	r20, Y+4	; 0x04
    17d2:	5d 81       	ldd	r21, Y+5	; 0x05
    17d4:	43 30       	cpi	r20, 0x03	; 3
    17d6:	51 05       	cpc	r21, r1
    17d8:	09 f4       	brne	.+2      	; 0x17dc <pinRead+0x7c>
    17da:	74 c0       	rjmp	.+232    	; 0x18c4 <pinRead+0x164>
    17dc:	8c 81       	ldd	r24, Y+4	; 0x04
    17de:	9d 81       	ldd	r25, Y+5	; 0x05
    17e0:	84 30       	cpi	r24, 0x04	; 4
    17e2:	91 05       	cpc	r25, r1
    17e4:	09 f4       	brne	.+2      	; 0x17e8 <pinRead+0x88>
    17e6:	86 c0       	rjmp	.+268    	; 0x18f4 <pinRead+0x194>
    17e8:	2c c1       	rjmp	.+600    	; 0x1a42 <pinRead+0x2e2>
    17ea:	2c 81       	ldd	r18, Y+4	; 0x04
    17ec:	3d 81       	ldd	r19, Y+5	; 0x05
    17ee:	28 30       	cpi	r18, 0x08	; 8
    17f0:	31 05       	cpc	r19, r1
    17f2:	09 f4       	brne	.+2      	; 0x17f6 <pinRead+0x96>
    17f4:	df c0       	rjmp	.+446    	; 0x19b4 <pinRead+0x254>
    17f6:	4c 81       	ldd	r20, Y+4	; 0x04
    17f8:	5d 81       	ldd	r21, Y+5	; 0x05
    17fa:	49 30       	cpi	r20, 0x09	; 9
    17fc:	51 05       	cpc	r21, r1
    17fe:	6c f4       	brge	.+26     	; 0x181a <pinRead+0xba>
    1800:	8c 81       	ldd	r24, Y+4	; 0x04
    1802:	9d 81       	ldd	r25, Y+5	; 0x05
    1804:	86 30       	cpi	r24, 0x06	; 6
    1806:	91 05       	cpc	r25, r1
    1808:	09 f4       	brne	.+2      	; 0x180c <pinRead+0xac>
    180a:	a4 c0       	rjmp	.+328    	; 0x1954 <pinRead+0x1f4>
    180c:	2c 81       	ldd	r18, Y+4	; 0x04
    180e:	3d 81       	ldd	r19, Y+5	; 0x05
    1810:	27 30       	cpi	r18, 0x07	; 7
    1812:	31 05       	cpc	r19, r1
    1814:	09 f4       	brne	.+2      	; 0x1818 <pinRead+0xb8>
    1816:	b6 c0       	rjmp	.+364    	; 0x1984 <pinRead+0x224>
    1818:	14 c1       	rjmp	.+552    	; 0x1a42 <pinRead+0x2e2>
    181a:	4c 81       	ldd	r20, Y+4	; 0x04
    181c:	5d 81       	ldd	r21, Y+5	; 0x05
    181e:	49 30       	cpi	r20, 0x09	; 9
    1820:	51 05       	cpc	r21, r1
    1822:	09 f4       	brne	.+2      	; 0x1826 <pinRead+0xc6>
    1824:	df c0       	rjmp	.+446    	; 0x19e4 <pinRead+0x284>
    1826:	8c 81       	ldd	r24, Y+4	; 0x04
    1828:	9d 81       	ldd	r25, Y+5	; 0x05
    182a:	8a 30       	cpi	r24, 0x0A	; 10
    182c:	91 05       	cpc	r25, r1
    182e:	09 f4       	brne	.+2      	; 0x1832 <pinRead+0xd2>
    1830:	f1 c0       	rjmp	.+482    	; 0x1a14 <pinRead+0x2b4>
    1832:	07 c1       	rjmp	.+526    	; 0x1a42 <pinRead+0x2e2>
			{
			case (A | a):
				if(BIT_IS_SET(PINA,pin_num))
    1834:	e0 e2       	ldi	r30, 0x20	; 32
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	28 2f       	mov	r18, r24
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	8b 81       	ldd	r24, Y+3	; 0x03
    1840:	88 2f       	mov	r24, r24
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	a9 01       	movw	r20, r18
    1846:	02 c0       	rjmp	.+4      	; 0x184c <pinRead+0xec>
    1848:	55 95       	asr	r21
    184a:	47 95       	ror	r20
    184c:	8a 95       	dec	r24
    184e:	e2 f7       	brpl	.-8      	; 0x1848 <pinRead+0xe8>
    1850:	ca 01       	movw	r24, r20
    1852:	81 70       	andi	r24, 0x01	; 1
    1854:	90 70       	andi	r25, 0x00	; 0
    1856:	88 23       	and	r24, r24
    1858:	19 f0       	breq	.+6      	; 0x1860 <pinRead+0x100>
				{
					pin_value = HIGH;
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	89 83       	std	Y+1, r24	; 0x01
    185e:	f1 c0       	rjmp	.+482    	; 0x1a42 <pinRead+0x2e2>
				}
				else
				{
					pin_value = LOW;
    1860:	19 82       	std	Y+1, r1	; 0x01
    1862:	ef c0       	rjmp	.+478    	; 0x1a42 <pinRead+0x2e2>
				}
				break;
			case (B | b):
				if(BIT_IS_SET(PINB,pin_num))
    1864:	e3 e2       	ldi	r30, 0x23	; 35
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	80 81       	ld	r24, Z
    186a:	28 2f       	mov	r18, r24
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	8b 81       	ldd	r24, Y+3	; 0x03
    1870:	88 2f       	mov	r24, r24
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	a9 01       	movw	r20, r18
    1876:	02 c0       	rjmp	.+4      	; 0x187c <pinRead+0x11c>
    1878:	55 95       	asr	r21
    187a:	47 95       	ror	r20
    187c:	8a 95       	dec	r24
    187e:	e2 f7       	brpl	.-8      	; 0x1878 <pinRead+0x118>
    1880:	ca 01       	movw	r24, r20
    1882:	81 70       	andi	r24, 0x01	; 1
    1884:	90 70       	andi	r25, 0x00	; 0
    1886:	88 23       	and	r24, r24
    1888:	19 f0       	breq	.+6      	; 0x1890 <pinRead+0x130>
				{
					pin_value = HIGH;
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	89 83       	std	Y+1, r24	; 0x01
    188e:	d9 c0       	rjmp	.+434    	; 0x1a42 <pinRead+0x2e2>
				}
				else
				{
					pin_value = LOW;
    1890:	19 82       	std	Y+1, r1	; 0x01
    1892:	d7 c0       	rjmp	.+430    	; 0x1a42 <pinRead+0x2e2>
				}
				break;
			case (C | c):
				if(BIT_IS_SET(PINC,pin_num))
    1894:	e6 e2       	ldi	r30, 0x26	; 38
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	28 2f       	mov	r18, r24
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	8b 81       	ldd	r24, Y+3	; 0x03
    18a0:	88 2f       	mov	r24, r24
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	a9 01       	movw	r20, r18
    18a6:	02 c0       	rjmp	.+4      	; 0x18ac <pinRead+0x14c>
    18a8:	55 95       	asr	r21
    18aa:	47 95       	ror	r20
    18ac:	8a 95       	dec	r24
    18ae:	e2 f7       	brpl	.-8      	; 0x18a8 <pinRead+0x148>
    18b0:	ca 01       	movw	r24, r20
    18b2:	81 70       	andi	r24, 0x01	; 1
    18b4:	90 70       	andi	r25, 0x00	; 0
    18b6:	88 23       	and	r24, r24
    18b8:	19 f0       	breq	.+6      	; 0x18c0 <pinRead+0x160>
				{
					pin_value = HIGH;
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	89 83       	std	Y+1, r24	; 0x01
    18be:	c1 c0       	rjmp	.+386    	; 0x1a42 <pinRead+0x2e2>
				}
				else
				{
					pin_value = LOW;
    18c0:	19 82       	std	Y+1, r1	; 0x01
    18c2:	bf c0       	rjmp	.+382    	; 0x1a42 <pinRead+0x2e2>
				}
				break;
			case (D | d):
				if(BIT_IS_SET(PIND,pin_num))
    18c4:	e9 e2       	ldi	r30, 0x29	; 41
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	28 2f       	mov	r18, r24
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	8b 81       	ldd	r24, Y+3	; 0x03
    18d0:	88 2f       	mov	r24, r24
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	a9 01       	movw	r20, r18
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <pinRead+0x17c>
    18d8:	55 95       	asr	r21
    18da:	47 95       	ror	r20
    18dc:	8a 95       	dec	r24
    18de:	e2 f7       	brpl	.-8      	; 0x18d8 <pinRead+0x178>
    18e0:	ca 01       	movw	r24, r20
    18e2:	81 70       	andi	r24, 0x01	; 1
    18e4:	90 70       	andi	r25, 0x00	; 0
    18e6:	88 23       	and	r24, r24
    18e8:	19 f0       	breq	.+6      	; 0x18f0 <pinRead+0x190>
				{
					pin_value = HIGH;
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	89 83       	std	Y+1, r24	; 0x01
    18ee:	a9 c0       	rjmp	.+338    	; 0x1a42 <pinRead+0x2e2>
				}
				else
				{
					pin_value = LOW;
    18f0:	19 82       	std	Y+1, r1	; 0x01
    18f2:	a7 c0       	rjmp	.+334    	; 0x1a42 <pinRead+0x2e2>
				}
				break;
			case (E | e):
				if(BIT_IS_SET(PINE,pin_num))
    18f4:	ec e2       	ldi	r30, 0x2C	; 44
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	28 2f       	mov	r18, r24
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1900:	88 2f       	mov	r24, r24
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	a9 01       	movw	r20, r18
    1906:	02 c0       	rjmp	.+4      	; 0x190c <pinRead+0x1ac>
    1908:	55 95       	asr	r21
    190a:	47 95       	ror	r20
    190c:	8a 95       	dec	r24
    190e:	e2 f7       	brpl	.-8      	; 0x1908 <pinRead+0x1a8>
    1910:	ca 01       	movw	r24, r20
    1912:	81 70       	andi	r24, 0x01	; 1
    1914:	90 70       	andi	r25, 0x00	; 0
    1916:	88 23       	and	r24, r24
    1918:	19 f0       	breq	.+6      	; 0x1920 <pinRead+0x1c0>
				{
					pin_value = HIGH;
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	89 83       	std	Y+1, r24	; 0x01
    191e:	91 c0       	rjmp	.+290    	; 0x1a42 <pinRead+0x2e2>
				}
				else
				{
					pin_value = LOW;
    1920:	19 82       	std	Y+1, r1	; 0x01
    1922:	8f c0       	rjmp	.+286    	; 0x1a42 <pinRead+0x2e2>
				}
				break;
			case (F | f):
				if(BIT_IS_SET(PINF,pin_num))
    1924:	ef e2       	ldi	r30, 0x2F	; 47
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	28 2f       	mov	r18, r24
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	88 2f       	mov	r24, r24
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	a9 01       	movw	r20, r18
    1936:	02 c0       	rjmp	.+4      	; 0x193c <pinRead+0x1dc>
    1938:	55 95       	asr	r21
    193a:	47 95       	ror	r20
    193c:	8a 95       	dec	r24
    193e:	e2 f7       	brpl	.-8      	; 0x1938 <pinRead+0x1d8>
    1940:	ca 01       	movw	r24, r20
    1942:	81 70       	andi	r24, 0x01	; 1
    1944:	90 70       	andi	r25, 0x00	; 0
    1946:	88 23       	and	r24, r24
    1948:	19 f0       	breq	.+6      	; 0x1950 <pinRead+0x1f0>
				{
					pin_value = HIGH;
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	89 83       	std	Y+1, r24	; 0x01
    194e:	79 c0       	rjmp	.+242    	; 0x1a42 <pinRead+0x2e2>
				}
				else
				{
					pin_value = LOW;
    1950:	19 82       	std	Y+1, r1	; 0x01
    1952:	77 c0       	rjmp	.+238    	; 0x1a42 <pinRead+0x2e2>
				}
				break;
			case (G | g):
				if(BIT_IS_SET(PING,pin_num))
    1954:	e2 e3       	ldi	r30, 0x32	; 50
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	28 2f       	mov	r18, r24
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	8b 81       	ldd	r24, Y+3	; 0x03
    1960:	88 2f       	mov	r24, r24
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	a9 01       	movw	r20, r18
    1966:	02 c0       	rjmp	.+4      	; 0x196c <pinRead+0x20c>
    1968:	55 95       	asr	r21
    196a:	47 95       	ror	r20
    196c:	8a 95       	dec	r24
    196e:	e2 f7       	brpl	.-8      	; 0x1968 <pinRead+0x208>
    1970:	ca 01       	movw	r24, r20
    1972:	81 70       	andi	r24, 0x01	; 1
    1974:	90 70       	andi	r25, 0x00	; 0
    1976:	88 23       	and	r24, r24
    1978:	19 f0       	breq	.+6      	; 0x1980 <pinRead+0x220>
				{
					pin_value = HIGH;
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	89 83       	std	Y+1, r24	; 0x01
    197e:	61 c0       	rjmp	.+194    	; 0x1a42 <pinRead+0x2e2>
				}
				else
				{
					pin_value = LOW;
    1980:	19 82       	std	Y+1, r1	; 0x01
    1982:	5f c0       	rjmp	.+190    	; 0x1a42 <pinRead+0x2e2>
				}
				break;
			case (H | h):
				if(BIT_IS_SET(PINH,pin_num))
    1984:	e0 e0       	ldi	r30, 0x00	; 0
    1986:	f1 e0       	ldi	r31, 0x01	; 1
    1988:	80 81       	ld	r24, Z
    198a:	28 2f       	mov	r18, r24
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	8b 81       	ldd	r24, Y+3	; 0x03
    1990:	88 2f       	mov	r24, r24
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	a9 01       	movw	r20, r18
    1996:	02 c0       	rjmp	.+4      	; 0x199c <pinRead+0x23c>
    1998:	55 95       	asr	r21
    199a:	47 95       	ror	r20
    199c:	8a 95       	dec	r24
    199e:	e2 f7       	brpl	.-8      	; 0x1998 <pinRead+0x238>
    19a0:	ca 01       	movw	r24, r20
    19a2:	81 70       	andi	r24, 0x01	; 1
    19a4:	90 70       	andi	r25, 0x00	; 0
    19a6:	88 23       	and	r24, r24
    19a8:	19 f0       	breq	.+6      	; 0x19b0 <pinRead+0x250>
				{
					pin_value = HIGH;
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	89 83       	std	Y+1, r24	; 0x01
    19ae:	49 c0       	rjmp	.+146    	; 0x1a42 <pinRead+0x2e2>
				}
				else
				{
					pin_value = LOW;
    19b0:	19 82       	std	Y+1, r1	; 0x01
    19b2:	47 c0       	rjmp	.+142    	; 0x1a42 <pinRead+0x2e2>
				}
				break;
			case (J | j):
				if(BIT_IS_SET(PINJ,pin_num))
    19b4:	e3 e0       	ldi	r30, 0x03	; 3
    19b6:	f1 e0       	ldi	r31, 0x01	; 1
    19b8:	80 81       	ld	r24, Z
    19ba:	28 2f       	mov	r18, r24
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	8b 81       	ldd	r24, Y+3	; 0x03
    19c0:	88 2f       	mov	r24, r24
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	a9 01       	movw	r20, r18
    19c6:	02 c0       	rjmp	.+4      	; 0x19cc <pinRead+0x26c>
    19c8:	55 95       	asr	r21
    19ca:	47 95       	ror	r20
    19cc:	8a 95       	dec	r24
    19ce:	e2 f7       	brpl	.-8      	; 0x19c8 <pinRead+0x268>
    19d0:	ca 01       	movw	r24, r20
    19d2:	81 70       	andi	r24, 0x01	; 1
    19d4:	90 70       	andi	r25, 0x00	; 0
    19d6:	88 23       	and	r24, r24
    19d8:	19 f0       	breq	.+6      	; 0x19e0 <pinRead+0x280>
				{
					pin_value = HIGH;
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	89 83       	std	Y+1, r24	; 0x01
    19de:	31 c0       	rjmp	.+98     	; 0x1a42 <pinRead+0x2e2>
				}
				else
				{
					pin_value = LOW;
    19e0:	19 82       	std	Y+1, r1	; 0x01
    19e2:	2f c0       	rjmp	.+94     	; 0x1a42 <pinRead+0x2e2>
				}
				break;
			case (K | k):
				if(BIT_IS_SET(PINK,pin_num))
    19e4:	e6 e0       	ldi	r30, 0x06	; 6
    19e6:	f1 e0       	ldi	r31, 0x01	; 1
    19e8:	80 81       	ld	r24, Z
    19ea:	28 2f       	mov	r18, r24
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	8b 81       	ldd	r24, Y+3	; 0x03
    19f0:	88 2f       	mov	r24, r24
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	a9 01       	movw	r20, r18
    19f6:	02 c0       	rjmp	.+4      	; 0x19fc <pinRead+0x29c>
    19f8:	55 95       	asr	r21
    19fa:	47 95       	ror	r20
    19fc:	8a 95       	dec	r24
    19fe:	e2 f7       	brpl	.-8      	; 0x19f8 <pinRead+0x298>
    1a00:	ca 01       	movw	r24, r20
    1a02:	81 70       	andi	r24, 0x01	; 1
    1a04:	90 70       	andi	r25, 0x00	; 0
    1a06:	88 23       	and	r24, r24
    1a08:	19 f0       	breq	.+6      	; 0x1a10 <pinRead+0x2b0>
				{
					pin_value = HIGH;
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	89 83       	std	Y+1, r24	; 0x01
    1a0e:	19 c0       	rjmp	.+50     	; 0x1a42 <pinRead+0x2e2>
				}
				else
				{
					pin_value = LOW;
    1a10:	19 82       	std	Y+1, r1	; 0x01
    1a12:	17 c0       	rjmp	.+46     	; 0x1a42 <pinRead+0x2e2>
				}
				break;
			case (L | l ):
				if(BIT_IS_SET(PINL,pin_num))
    1a14:	e9 e0       	ldi	r30, 0x09	; 9
    1a16:	f1 e0       	ldi	r31, 0x01	; 1
    1a18:	80 81       	ld	r24, Z
    1a1a:	28 2f       	mov	r18, r24
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a20:	88 2f       	mov	r24, r24
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	a9 01       	movw	r20, r18
    1a26:	02 c0       	rjmp	.+4      	; 0x1a2c <pinRead+0x2cc>
    1a28:	55 95       	asr	r21
    1a2a:	47 95       	ror	r20
    1a2c:	8a 95       	dec	r24
    1a2e:	e2 f7       	brpl	.-8      	; 0x1a28 <pinRead+0x2c8>
    1a30:	ca 01       	movw	r24, r20
    1a32:	81 70       	andi	r24, 0x01	; 1
    1a34:	90 70       	andi	r25, 0x00	; 0
    1a36:	88 23       	and	r24, r24
    1a38:	19 f0       	breq	.+6      	; 0x1a40 <pinRead+0x2e0>
				{
					pin_value = HIGH;
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	89 83       	std	Y+1, r24	; 0x01
    1a3e:	01 c0       	rjmp	.+2      	; 0x1a42 <pinRead+0x2e2>
				}
				else
				{
					pin_value = LOW;
    1a40:	19 82       	std	Y+1, r1	; 0x01
				}
				break;
			}
		}

		return pin_value;
    1a42:	89 81       	ldd	r24, Y+1	; 0x01

}
    1a44:	0f 90       	pop	r0
    1a46:	0f 90       	pop	r0
    1a48:	0f 90       	pop	r0
    1a4a:	0f 90       	pop	r0
    1a4c:	0f 90       	pop	r0
    1a4e:	cf 91       	pop	r28
    1a50:	df 91       	pop	r29
    1a52:	08 95       	ret

00001a54 <portMode>:
 * Setup the dir of the required port all pins input/output.
 * If the dir value is PORT_INPUT all pins in this port should be input pins.
 * If the dir value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void portMode(u8 port_num, u8 dir){
    1a54:	df 93       	push	r29
    1a56:	cf 93       	push	r28
    1a58:	00 d0       	rcall	.+0      	; 0x1a5a <portMode+0x6>
    1a5a:	0f 92       	push	r0
    1a5c:	cd b7       	in	r28, 0x3d	; 61
    1a5e:	de b7       	in	r29, 0x3e	; 62
    1a60:	89 83       	std	Y+1, r24	; 0x01
    1a62:	6a 83       	std	Y+2, r22	; 0x02
	/*
		 * Check if the input number is greater than NUM_OF_PORTS value.
		 * In this case the input is not valid port number
		 */
		if(port_num >= NUM_OF_PORTS){}
    1a64:	89 81       	ldd	r24, Y+1	; 0x01
    1a66:	8b 30       	cpi	r24, 0x0B	; 11
    1a68:	08 f0       	brcs	.+2      	; 0x1a6c <portMode+0x18>
    1a6a:	87 c0       	rjmp	.+270    	; 0x1b7a <portMode+0x126>
		else
		{
			/* Setup the port dir as required */
			switch(port_num)
    1a6c:	89 81       	ldd	r24, Y+1	; 0x01
    1a6e:	28 2f       	mov	r18, r24
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	3c 83       	std	Y+4, r19	; 0x04
    1a74:	2b 83       	std	Y+3, r18	; 0x03
    1a76:	8b 81       	ldd	r24, Y+3	; 0x03
    1a78:	9c 81       	ldd	r25, Y+4	; 0x04
    1a7a:	85 30       	cpi	r24, 0x05	; 5
    1a7c:	91 05       	cpc	r25, r1
    1a7e:	09 f4       	brne	.+2      	; 0x1a82 <portMode+0x2e>
    1a80:	5f c0       	rjmp	.+190    	; 0x1b40 <portMode+0xec>
    1a82:	2b 81       	ldd	r18, Y+3	; 0x03
    1a84:	3c 81       	ldd	r19, Y+4	; 0x04
    1a86:	26 30       	cpi	r18, 0x06	; 6
    1a88:	31 05       	cpc	r19, r1
    1a8a:	04 f5       	brge	.+64     	; 0x1acc <portMode+0x78>
    1a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a90:	82 30       	cpi	r24, 0x02	; 2
    1a92:	91 05       	cpc	r25, r1
    1a94:	09 f4       	brne	.+2      	; 0x1a98 <portMode+0x44>
    1a96:	45 c0       	rjmp	.+138    	; 0x1b22 <portMode+0xce>
    1a98:	2b 81       	ldd	r18, Y+3	; 0x03
    1a9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a9c:	23 30       	cpi	r18, 0x03	; 3
    1a9e:	31 05       	cpc	r19, r1
    1aa0:	54 f4       	brge	.+20     	; 0x1ab6 <portMode+0x62>
    1aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa4:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa6:	00 97       	sbiw	r24, 0x00	; 0
    1aa8:	91 f1       	breq	.+100    	; 0x1b0e <portMode+0xba>
    1aaa:	2b 81       	ldd	r18, Y+3	; 0x03
    1aac:	3c 81       	ldd	r19, Y+4	; 0x04
    1aae:	21 30       	cpi	r18, 0x01	; 1
    1ab0:	31 05       	cpc	r19, r1
    1ab2:	91 f1       	breq	.+100    	; 0x1b18 <portMode+0xc4>
    1ab4:	62 c0       	rjmp	.+196    	; 0x1b7a <portMode+0x126>
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aba:	83 30       	cpi	r24, 0x03	; 3
    1abc:	91 05       	cpc	r25, r1
    1abe:	b1 f1       	breq	.+108    	; 0x1b2c <portMode+0xd8>
    1ac0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ac2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ac4:	24 30       	cpi	r18, 0x04	; 4
    1ac6:	31 05       	cpc	r19, r1
    1ac8:	b1 f1       	breq	.+108    	; 0x1b36 <portMode+0xe2>
    1aca:	57 c0       	rjmp	.+174    	; 0x1b7a <portMode+0x126>
    1acc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ace:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad0:	88 30       	cpi	r24, 0x08	; 8
    1ad2:	91 05       	cpc	r25, r1
    1ad4:	09 f4       	brne	.+2      	; 0x1ad8 <portMode+0x84>
    1ad6:	43 c0       	rjmp	.+134    	; 0x1b5e <portMode+0x10a>
    1ad8:	2b 81       	ldd	r18, Y+3	; 0x03
    1ada:	3c 81       	ldd	r19, Y+4	; 0x04
    1adc:	29 30       	cpi	r18, 0x09	; 9
    1ade:	31 05       	cpc	r19, r1
    1ae0:	5c f4       	brge	.+22     	; 0x1af8 <portMode+0xa4>
    1ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae6:	86 30       	cpi	r24, 0x06	; 6
    1ae8:	91 05       	cpc	r25, r1
    1aea:	79 f1       	breq	.+94     	; 0x1b4a <portMode+0xf6>
    1aec:	2b 81       	ldd	r18, Y+3	; 0x03
    1aee:	3c 81       	ldd	r19, Y+4	; 0x04
    1af0:	27 30       	cpi	r18, 0x07	; 7
    1af2:	31 05       	cpc	r19, r1
    1af4:	79 f1       	breq	.+94     	; 0x1b54 <portMode+0x100>
    1af6:	41 c0       	rjmp	.+130    	; 0x1b7a <portMode+0x126>
    1af8:	8b 81       	ldd	r24, Y+3	; 0x03
    1afa:	9c 81       	ldd	r25, Y+4	; 0x04
    1afc:	89 30       	cpi	r24, 0x09	; 9
    1afe:	91 05       	cpc	r25, r1
    1b00:	99 f1       	breq	.+102    	; 0x1b68 <portMode+0x114>
    1b02:	2b 81       	ldd	r18, Y+3	; 0x03
    1b04:	3c 81       	ldd	r19, Y+4	; 0x04
    1b06:	2a 30       	cpi	r18, 0x0A	; 10
    1b08:	31 05       	cpc	r19, r1
    1b0a:	99 f1       	breq	.+102    	; 0x1b72 <portMode+0x11e>
    1b0c:	36 c0       	rjmp	.+108    	; 0x1b7a <portMode+0x126>
			{
			case (A | a):
				DDRA = dir;
    1b0e:	e1 e2       	ldi	r30, 0x21	; 33
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	8a 81       	ldd	r24, Y+2	; 0x02
    1b14:	80 83       	st	Z, r24
    1b16:	31 c0       	rjmp	.+98     	; 0x1b7a <portMode+0x126>
				break;
			case (B | b):
				DDRB = dir;
    1b18:	e4 e2       	ldi	r30, 0x24	; 36
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1e:	80 83       	st	Z, r24
    1b20:	2c c0       	rjmp	.+88     	; 0x1b7a <portMode+0x126>
				break;
			case (C | c):
				DDRC = dir;
    1b22:	e7 e2       	ldi	r30, 0x27	; 39
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	8a 81       	ldd	r24, Y+2	; 0x02
    1b28:	80 83       	st	Z, r24
    1b2a:	27 c0       	rjmp	.+78     	; 0x1b7a <portMode+0x126>
				break;
			case (D | d):
				DDRD = dir;
    1b2c:	ea e2       	ldi	r30, 0x2A	; 42
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	8a 81       	ldd	r24, Y+2	; 0x02
    1b32:	80 83       	st	Z, r24
    1b34:	22 c0       	rjmp	.+68     	; 0x1b7a <portMode+0x126>
				break;
			case (E | e):
				DDRE = dir;
    1b36:	ed e2       	ldi	r30, 0x2D	; 45
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3c:	80 83       	st	Z, r24
    1b3e:	1d c0       	rjmp	.+58     	; 0x1b7a <portMode+0x126>
				break;
			case (F | f):
				DDRF = dir;
    1b40:	e0 e3       	ldi	r30, 0x30	; 48
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	8a 81       	ldd	r24, Y+2	; 0x02
    1b46:	80 83       	st	Z, r24
    1b48:	18 c0       	rjmp	.+48     	; 0x1b7a <portMode+0x126>
				break;
			case (G | g):
				DDRG = dir;
    1b4a:	e3 e3       	ldi	r30, 0x33	; 51
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b50:	80 83       	st	Z, r24
    1b52:	13 c0       	rjmp	.+38     	; 0x1b7a <portMode+0x126>
				break;
			case (H | h):
				DDRH = dir;
    1b54:	e1 e0       	ldi	r30, 0x01	; 1
    1b56:	f1 e0       	ldi	r31, 0x01	; 1
    1b58:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5a:	80 83       	st	Z, r24
    1b5c:	0e c0       	rjmp	.+28     	; 0x1b7a <portMode+0x126>
				break;
			case (J | j):
				DDRJ = dir;
    1b5e:	e4 e0       	ldi	r30, 0x04	; 4
    1b60:	f1 e0       	ldi	r31, 0x01	; 1
    1b62:	8a 81       	ldd	r24, Y+2	; 0x02
    1b64:	80 83       	st	Z, r24
    1b66:	09 c0       	rjmp	.+18     	; 0x1b7a <portMode+0x126>
				break;
			case (K | k):
				DDRK = dir;
    1b68:	e7 e0       	ldi	r30, 0x07	; 7
    1b6a:	f1 e0       	ldi	r31, 0x01	; 1
    1b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6e:	80 83       	st	Z, r24
    1b70:	04 c0       	rjmp	.+8      	; 0x1b7a <portMode+0x126>
				break;
			case (L | l):
				DDRL = dir;
    1b72:	ea e0       	ldi	r30, 0x0A	; 10
    1b74:	f1 e0       	ldi	r31, 0x01	; 1
    1b76:	8a 81       	ldd	r24, Y+2	; 0x02
    1b78:	80 83       	st	Z, r24
				break;
			}
		}

}
    1b7a:	0f 90       	pop	r0
    1b7c:	0f 90       	pop	r0
    1b7e:	0f 90       	pop	r0
    1b80:	0f 90       	pop	r0
    1b82:	cf 91       	pop	r28
    1b84:	df 91       	pop	r29
    1b86:	08 95       	ret

00001b88 <portWrite>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void portWrite(u8 port_num, u8 value){
    1b88:	df 93       	push	r29
    1b8a:	cf 93       	push	r28
    1b8c:	00 d0       	rcall	.+0      	; 0x1b8e <portWrite+0x6>
    1b8e:	0f 92       	push	r0
    1b90:	cd b7       	in	r28, 0x3d	; 61
    1b92:	de b7       	in	r29, 0x3e	; 62
    1b94:	89 83       	std	Y+1, r24	; 0x01
    1b96:	6a 83       	std	Y+2, r22	; 0x02
	/*
		 * Check if the input number is greater than NUM_OF_PORTS value.
		 * In this case the input is not valid port number
		 */
		if(port_num >= NUM_OF_PORTS){}
    1b98:	89 81       	ldd	r24, Y+1	; 0x01
    1b9a:	8b 30       	cpi	r24, 0x0B	; 11
    1b9c:	08 f0       	brcs	.+2      	; 0x1ba0 <portWrite+0x18>
    1b9e:	87 c0       	rjmp	.+270    	; 0x1cae <portWrite+0x126>
		else
		{
			/* Write the port value as required */
			switch(port_num)
    1ba0:	89 81       	ldd	r24, Y+1	; 0x01
    1ba2:	28 2f       	mov	r18, r24
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	3c 83       	std	Y+4, r19	; 0x04
    1ba8:	2b 83       	std	Y+3, r18	; 0x03
    1baa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bac:	9c 81       	ldd	r25, Y+4	; 0x04
    1bae:	85 30       	cpi	r24, 0x05	; 5
    1bb0:	91 05       	cpc	r25, r1
    1bb2:	09 f4       	brne	.+2      	; 0x1bb6 <portWrite+0x2e>
    1bb4:	5f c0       	rjmp	.+190    	; 0x1c74 <portWrite+0xec>
    1bb6:	2b 81       	ldd	r18, Y+3	; 0x03
    1bb8:	3c 81       	ldd	r19, Y+4	; 0x04
    1bba:	26 30       	cpi	r18, 0x06	; 6
    1bbc:	31 05       	cpc	r19, r1
    1bbe:	04 f5       	brge	.+64     	; 0x1c00 <portWrite+0x78>
    1bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc4:	82 30       	cpi	r24, 0x02	; 2
    1bc6:	91 05       	cpc	r25, r1
    1bc8:	09 f4       	brne	.+2      	; 0x1bcc <portWrite+0x44>
    1bca:	45 c0       	rjmp	.+138    	; 0x1c56 <portWrite+0xce>
    1bcc:	2b 81       	ldd	r18, Y+3	; 0x03
    1bce:	3c 81       	ldd	r19, Y+4	; 0x04
    1bd0:	23 30       	cpi	r18, 0x03	; 3
    1bd2:	31 05       	cpc	r19, r1
    1bd4:	54 f4       	brge	.+20     	; 0x1bea <portWrite+0x62>
    1bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bda:	00 97       	sbiw	r24, 0x00	; 0
    1bdc:	91 f1       	breq	.+100    	; 0x1c42 <portWrite+0xba>
    1bde:	2b 81       	ldd	r18, Y+3	; 0x03
    1be0:	3c 81       	ldd	r19, Y+4	; 0x04
    1be2:	21 30       	cpi	r18, 0x01	; 1
    1be4:	31 05       	cpc	r19, r1
    1be6:	91 f1       	breq	.+100    	; 0x1c4c <portWrite+0xc4>
    1be8:	62 c0       	rjmp	.+196    	; 0x1cae <portWrite+0x126>
    1bea:	8b 81       	ldd	r24, Y+3	; 0x03
    1bec:	9c 81       	ldd	r25, Y+4	; 0x04
    1bee:	83 30       	cpi	r24, 0x03	; 3
    1bf0:	91 05       	cpc	r25, r1
    1bf2:	b1 f1       	breq	.+108    	; 0x1c60 <portWrite+0xd8>
    1bf4:	2b 81       	ldd	r18, Y+3	; 0x03
    1bf6:	3c 81       	ldd	r19, Y+4	; 0x04
    1bf8:	24 30       	cpi	r18, 0x04	; 4
    1bfa:	31 05       	cpc	r19, r1
    1bfc:	b1 f1       	breq	.+108    	; 0x1c6a <portWrite+0xe2>
    1bfe:	57 c0       	rjmp	.+174    	; 0x1cae <portWrite+0x126>
    1c00:	8b 81       	ldd	r24, Y+3	; 0x03
    1c02:	9c 81       	ldd	r25, Y+4	; 0x04
    1c04:	88 30       	cpi	r24, 0x08	; 8
    1c06:	91 05       	cpc	r25, r1
    1c08:	09 f4       	brne	.+2      	; 0x1c0c <portWrite+0x84>
    1c0a:	43 c0       	rjmp	.+134    	; 0x1c92 <portWrite+0x10a>
    1c0c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c0e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c10:	29 30       	cpi	r18, 0x09	; 9
    1c12:	31 05       	cpc	r19, r1
    1c14:	5c f4       	brge	.+22     	; 0x1c2c <portWrite+0xa4>
    1c16:	8b 81       	ldd	r24, Y+3	; 0x03
    1c18:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1a:	86 30       	cpi	r24, 0x06	; 6
    1c1c:	91 05       	cpc	r25, r1
    1c1e:	79 f1       	breq	.+94     	; 0x1c7e <portWrite+0xf6>
    1c20:	2b 81       	ldd	r18, Y+3	; 0x03
    1c22:	3c 81       	ldd	r19, Y+4	; 0x04
    1c24:	27 30       	cpi	r18, 0x07	; 7
    1c26:	31 05       	cpc	r19, r1
    1c28:	79 f1       	breq	.+94     	; 0x1c88 <portWrite+0x100>
    1c2a:	41 c0       	rjmp	.+130    	; 0x1cae <portWrite+0x126>
    1c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c30:	89 30       	cpi	r24, 0x09	; 9
    1c32:	91 05       	cpc	r25, r1
    1c34:	99 f1       	breq	.+102    	; 0x1c9c <portWrite+0x114>
    1c36:	2b 81       	ldd	r18, Y+3	; 0x03
    1c38:	3c 81       	ldd	r19, Y+4	; 0x04
    1c3a:	2a 30       	cpi	r18, 0x0A	; 10
    1c3c:	31 05       	cpc	r19, r1
    1c3e:	99 f1       	breq	.+102    	; 0x1ca6 <portWrite+0x11e>
    1c40:	36 c0       	rjmp	.+108    	; 0x1cae <portWrite+0x126>
			{
			case (A | a):
				PORTA = value;
    1c42:	e2 e2       	ldi	r30, 0x22	; 34
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	8a 81       	ldd	r24, Y+2	; 0x02
    1c48:	80 83       	st	Z, r24
    1c4a:	31 c0       	rjmp	.+98     	; 0x1cae <portWrite+0x126>
				break;
			case (B | b):
				PORTB = value;
    1c4c:	e5 e2       	ldi	r30, 0x25	; 37
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	8a 81       	ldd	r24, Y+2	; 0x02
    1c52:	80 83       	st	Z, r24
    1c54:	2c c0       	rjmp	.+88     	; 0x1cae <portWrite+0x126>
				break;
			case (C | c):
				PORTC = value;
    1c56:	e8 e2       	ldi	r30, 0x28	; 40
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5c:	80 83       	st	Z, r24
    1c5e:	27 c0       	rjmp	.+78     	; 0x1cae <portWrite+0x126>
				break;
			case (D | d):
				PORTD = value;
    1c60:	eb e2       	ldi	r30, 0x2B	; 43
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	8a 81       	ldd	r24, Y+2	; 0x02
    1c66:	80 83       	st	Z, r24
    1c68:	22 c0       	rjmp	.+68     	; 0x1cae <portWrite+0x126>
				break;
			case (E | e):
				PORTE = value;
    1c6a:	ee e2       	ldi	r30, 0x2E	; 46
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c70:	80 83       	st	Z, r24
    1c72:	1d c0       	rjmp	.+58     	; 0x1cae <portWrite+0x126>
				break;
			case (F | f):
				PORTF = value;
    1c74:	e1 e3       	ldi	r30, 0x31	; 49
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7a:	80 83       	st	Z, r24
    1c7c:	18 c0       	rjmp	.+48     	; 0x1cae <portWrite+0x126>
				break;
			case (G | g):
				PORTG = value;
    1c7e:	e4 e3       	ldi	r30, 0x34	; 52
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	8a 81       	ldd	r24, Y+2	; 0x02
    1c84:	80 83       	st	Z, r24
    1c86:	13 c0       	rjmp	.+38     	; 0x1cae <portWrite+0x126>
				break;
			case (H | h):
				PORTH = value;
    1c88:	e2 e0       	ldi	r30, 0x02	; 2
    1c8a:	f1 e0       	ldi	r31, 0x01	; 1
    1c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8e:	80 83       	st	Z, r24
    1c90:	0e c0       	rjmp	.+28     	; 0x1cae <portWrite+0x126>
				break;
			case (J | j):
				PORTJ = value;
    1c92:	e5 e0       	ldi	r30, 0x05	; 5
    1c94:	f1 e0       	ldi	r31, 0x01	; 1
    1c96:	8a 81       	ldd	r24, Y+2	; 0x02
    1c98:	80 83       	st	Z, r24
    1c9a:	09 c0       	rjmp	.+18     	; 0x1cae <portWrite+0x126>
				break;
			case (K | k):
				PORTK = value;
    1c9c:	e8 e0       	ldi	r30, 0x08	; 8
    1c9e:	f1 e0       	ldi	r31, 0x01	; 1
    1ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca2:	80 83       	st	Z, r24
    1ca4:	04 c0       	rjmp	.+8      	; 0x1cae <portWrite+0x126>
				break;
			case (L | l):
				PORTL = value;
    1ca6:	eb e0       	ldi	r30, 0x0B	; 11
    1ca8:	f1 e0       	ldi	r31, 0x01	; 1
    1caa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cac:	80 83       	st	Z, r24
				break;

			}
		}
}
    1cae:	0f 90       	pop	r0
    1cb0:	0f 90       	pop	r0
    1cb2:	0f 90       	pop	r0
    1cb4:	0f 90       	pop	r0
    1cb6:	cf 91       	pop	r28
    1cb8:	df 91       	pop	r29
    1cba:	08 95       	ret

00001cbc <portRead>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
u8 portRead(u8 port_num){
    1cbc:	df 93       	push	r29
    1cbe:	cf 93       	push	r28
    1cc0:	00 d0       	rcall	.+0      	; 0x1cc2 <portRead+0x6>
    1cc2:	0f 92       	push	r0
    1cc4:	cd b7       	in	r28, 0x3d	; 61
    1cc6:	de b7       	in	r29, 0x3e	; 62
    1cc8:	8a 83       	std	Y+2, r24	; 0x02
	u8 value = LOW;
    1cca:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS){}
    1ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cce:	8b 30       	cpi	r24, 0x0B	; 11
    1cd0:	08 f0       	brcs	.+2      	; 0x1cd4 <portRead+0x18>
    1cd2:	87 c0       	rjmp	.+270    	; 0x1de2 <portRead+0x126>
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd6:	28 2f       	mov	r18, r24
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	3c 83       	std	Y+4, r19	; 0x04
    1cdc:	2b 83       	std	Y+3, r18	; 0x03
    1cde:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce2:	85 30       	cpi	r24, 0x05	; 5
    1ce4:	91 05       	cpc	r25, r1
    1ce6:	09 f4       	brne	.+2      	; 0x1cea <portRead+0x2e>
    1ce8:	5f c0       	rjmp	.+190    	; 0x1da8 <portRead+0xec>
    1cea:	2b 81       	ldd	r18, Y+3	; 0x03
    1cec:	3c 81       	ldd	r19, Y+4	; 0x04
    1cee:	26 30       	cpi	r18, 0x06	; 6
    1cf0:	31 05       	cpc	r19, r1
    1cf2:	04 f5       	brge	.+64     	; 0x1d34 <portRead+0x78>
    1cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf8:	82 30       	cpi	r24, 0x02	; 2
    1cfa:	91 05       	cpc	r25, r1
    1cfc:	09 f4       	brne	.+2      	; 0x1d00 <portRead+0x44>
    1cfe:	45 c0       	rjmp	.+138    	; 0x1d8a <portRead+0xce>
    1d00:	2b 81       	ldd	r18, Y+3	; 0x03
    1d02:	3c 81       	ldd	r19, Y+4	; 0x04
    1d04:	23 30       	cpi	r18, 0x03	; 3
    1d06:	31 05       	cpc	r19, r1
    1d08:	54 f4       	brge	.+20     	; 0x1d1e <portRead+0x62>
    1d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0e:	00 97       	sbiw	r24, 0x00	; 0
    1d10:	91 f1       	breq	.+100    	; 0x1d76 <portRead+0xba>
    1d12:	2b 81       	ldd	r18, Y+3	; 0x03
    1d14:	3c 81       	ldd	r19, Y+4	; 0x04
    1d16:	21 30       	cpi	r18, 0x01	; 1
    1d18:	31 05       	cpc	r19, r1
    1d1a:	91 f1       	breq	.+100    	; 0x1d80 <portRead+0xc4>
    1d1c:	62 c0       	rjmp	.+196    	; 0x1de2 <portRead+0x126>
    1d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d20:	9c 81       	ldd	r25, Y+4	; 0x04
    1d22:	83 30       	cpi	r24, 0x03	; 3
    1d24:	91 05       	cpc	r25, r1
    1d26:	b1 f1       	breq	.+108    	; 0x1d94 <portRead+0xd8>
    1d28:	2b 81       	ldd	r18, Y+3	; 0x03
    1d2a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d2c:	24 30       	cpi	r18, 0x04	; 4
    1d2e:	31 05       	cpc	r19, r1
    1d30:	b1 f1       	breq	.+108    	; 0x1d9e <portRead+0xe2>
    1d32:	57 c0       	rjmp	.+174    	; 0x1de2 <portRead+0x126>
    1d34:	8b 81       	ldd	r24, Y+3	; 0x03
    1d36:	9c 81       	ldd	r25, Y+4	; 0x04
    1d38:	88 30       	cpi	r24, 0x08	; 8
    1d3a:	91 05       	cpc	r25, r1
    1d3c:	09 f4       	brne	.+2      	; 0x1d40 <portRead+0x84>
    1d3e:	43 c0       	rjmp	.+134    	; 0x1dc6 <portRead+0x10a>
    1d40:	2b 81       	ldd	r18, Y+3	; 0x03
    1d42:	3c 81       	ldd	r19, Y+4	; 0x04
    1d44:	29 30       	cpi	r18, 0x09	; 9
    1d46:	31 05       	cpc	r19, r1
    1d48:	5c f4       	brge	.+22     	; 0x1d60 <portRead+0xa4>
    1d4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4e:	86 30       	cpi	r24, 0x06	; 6
    1d50:	91 05       	cpc	r25, r1
    1d52:	79 f1       	breq	.+94     	; 0x1db2 <portRead+0xf6>
    1d54:	2b 81       	ldd	r18, Y+3	; 0x03
    1d56:	3c 81       	ldd	r19, Y+4	; 0x04
    1d58:	27 30       	cpi	r18, 0x07	; 7
    1d5a:	31 05       	cpc	r19, r1
    1d5c:	79 f1       	breq	.+94     	; 0x1dbc <portRead+0x100>
    1d5e:	41 c0       	rjmp	.+130    	; 0x1de2 <portRead+0x126>
    1d60:	8b 81       	ldd	r24, Y+3	; 0x03
    1d62:	9c 81       	ldd	r25, Y+4	; 0x04
    1d64:	89 30       	cpi	r24, 0x09	; 9
    1d66:	91 05       	cpc	r25, r1
    1d68:	99 f1       	breq	.+102    	; 0x1dd0 <portRead+0x114>
    1d6a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d6c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d6e:	2a 30       	cpi	r18, 0x0A	; 10
    1d70:	31 05       	cpc	r19, r1
    1d72:	99 f1       	breq	.+102    	; 0x1dda <portRead+0x11e>
    1d74:	36 c0       	rjmp	.+108    	; 0x1de2 <portRead+0x126>
		{
		case (A | a):
			value = PINA;
    1d76:	e0 e2       	ldi	r30, 0x20	; 32
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 81       	ld	r24, Z
    1d7c:	89 83       	std	Y+1, r24	; 0x01
    1d7e:	31 c0       	rjmp	.+98     	; 0x1de2 <portRead+0x126>
			break;
		case (B | b):
			value = PINB;
    1d80:	e3 e2       	ldi	r30, 0x23	; 35
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	89 83       	std	Y+1, r24	; 0x01
    1d88:	2c c0       	rjmp	.+88     	; 0x1de2 <portRead+0x126>
			break;
		case (C | c):
			value = PINC;
    1d8a:	e6 e2       	ldi	r30, 0x26	; 38
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	80 81       	ld	r24, Z
    1d90:	89 83       	std	Y+1, r24	; 0x01
    1d92:	27 c0       	rjmp	.+78     	; 0x1de2 <portRead+0x126>
			break;
		case (D | d):
			value = PIND;
    1d94:	e9 e2       	ldi	r30, 0x29	; 41
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	89 83       	std	Y+1, r24	; 0x01
    1d9c:	22 c0       	rjmp	.+68     	; 0x1de2 <portRead+0x126>
			break;
		case (E | e):
			value = PINE;
    1d9e:	ec e2       	ldi	r30, 0x2C	; 44
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	89 83       	std	Y+1, r24	; 0x01
    1da6:	1d c0       	rjmp	.+58     	; 0x1de2 <portRead+0x126>
			break;
		case (F | f):
			value = PINF;
    1da8:	ef e2       	ldi	r30, 0x2F	; 47
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	89 83       	std	Y+1, r24	; 0x01
    1db0:	18 c0       	rjmp	.+48     	; 0x1de2 <portRead+0x126>
			break;
		case (G | g):
			value = PING;
    1db2:	e2 e3       	ldi	r30, 0x32	; 50
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	80 81       	ld	r24, Z
    1db8:	89 83       	std	Y+1, r24	; 0x01
    1dba:	13 c0       	rjmp	.+38     	; 0x1de2 <portRead+0x126>
			break;
		case (H | h):
			value = PINH;
    1dbc:	e0 e0       	ldi	r30, 0x00	; 0
    1dbe:	f1 e0       	ldi	r31, 0x01	; 1
    1dc0:	80 81       	ld	r24, Z
    1dc2:	89 83       	std	Y+1, r24	; 0x01
    1dc4:	0e c0       	rjmp	.+28     	; 0x1de2 <portRead+0x126>
			break;
		case (J | j):
			value = PINJ;
    1dc6:	e3 e0       	ldi	r30, 0x03	; 3
    1dc8:	f1 e0       	ldi	r31, 0x01	; 1
    1dca:	80 81       	ld	r24, Z
    1dcc:	89 83       	std	Y+1, r24	; 0x01
    1dce:	09 c0       	rjmp	.+18     	; 0x1de2 <portRead+0x126>
			break;
		case (K | k):
			value = PINK;
    1dd0:	e6 e0       	ldi	r30, 0x06	; 6
    1dd2:	f1 e0       	ldi	r31, 0x01	; 1
    1dd4:	80 81       	ld	r24, Z
    1dd6:	89 83       	std	Y+1, r24	; 0x01
    1dd8:	04 c0       	rjmp	.+8      	; 0x1de2 <portRead+0x126>
			break;
		case (L | l):
			value = PINL;
    1dda:	e9 e0       	ldi	r30, 0x09	; 9
    1ddc:	f1 e0       	ldi	r31, 0x01	; 1
    1dde:	80 81       	ld	r24, Z
    1de0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1de2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1de4:	0f 90       	pop	r0
    1de6:	0f 90       	pop	r0
    1de8:	0f 90       	pop	r0
    1dea:	0f 90       	pop	r0
    1dec:	cf 91       	pop	r28
    1dee:	df 91       	pop	r29
    1df0:	08 95       	ret

00001df2 <__vector_16>:
#include "ICU.h"
#include "avr/io.h"
#include "GPIO.h"
static volatile void(*fun_ptr)(void)= NULL_PTR;

ISR(TIMER1_CAPT_vect){
    1df2:	1f 92       	push	r1
    1df4:	0f 92       	push	r0
    1df6:	0f b6       	in	r0, 0x3f	; 63
    1df8:	0f 92       	push	r0
    1dfa:	00 90 5b 00 	lds	r0, 0x005B
    1dfe:	0f 92       	push	r0
    1e00:	11 24       	eor	r1, r1
    1e02:	2f 93       	push	r18
    1e04:	3f 93       	push	r19
    1e06:	4f 93       	push	r20
    1e08:	5f 93       	push	r21
    1e0a:	6f 93       	push	r22
    1e0c:	7f 93       	push	r23
    1e0e:	8f 93       	push	r24
    1e10:	9f 93       	push	r25
    1e12:	af 93       	push	r26
    1e14:	bf 93       	push	r27
    1e16:	ef 93       	push	r30
    1e18:	ff 93       	push	r31
    1e1a:	df 93       	push	r29
    1e1c:	cf 93       	push	r28
    1e1e:	cd b7       	in	r28, 0x3d	; 61
    1e20:	de b7       	in	r29, 0x3e	; 62
	if(fun_ptr!=NULL_PTR)
    1e22:	80 91 0a 02 	lds	r24, 0x020A
    1e26:	90 91 0b 02 	lds	r25, 0x020B
    1e2a:	00 97       	sbiw	r24, 0x00	; 0
    1e2c:	29 f0       	breq	.+10     	; 0x1e38 <__vector_16+0x46>
	{
		fun_ptr();
    1e2e:	e0 91 0a 02 	lds	r30, 0x020A
    1e32:	f0 91 0b 02 	lds	r31, 0x020B
    1e36:	19 95       	eicall
	}
}
    1e38:	cf 91       	pop	r28
    1e3a:	df 91       	pop	r29
    1e3c:	ff 91       	pop	r31
    1e3e:	ef 91       	pop	r30
    1e40:	bf 91       	pop	r27
    1e42:	af 91       	pop	r26
    1e44:	9f 91       	pop	r25
    1e46:	8f 91       	pop	r24
    1e48:	7f 91       	pop	r23
    1e4a:	6f 91       	pop	r22
    1e4c:	5f 91       	pop	r21
    1e4e:	4f 91       	pop	r20
    1e50:	3f 91       	pop	r19
    1e52:	2f 91       	pop	r18
    1e54:	0f 90       	pop	r0
    1e56:	00 92 5b 00 	sts	0x005B, r0
    1e5a:	0f 90       	pop	r0
    1e5c:	0f be       	out	0x3f, r0	; 63
    1e5e:	0f 90       	pop	r0
    1e60:	1f 90       	pop	r1
    1e62:	18 95       	reti

00001e64 <ICU_init>:

void ICU_init(ICU_config *config){
    1e64:	df 93       	push	r29
    1e66:	cf 93       	push	r28
    1e68:	0f 92       	push	r0
    1e6a:	0f 92       	push	r0
    1e6c:	cd b7       	in	r28, 0x3d	; 61
    1e6e:	de b7       	in	r29, 0x3e	; 62
    1e70:	9a 83       	std	Y+2, r25	; 0x02
    1e72:	89 83       	std	Y+1, r24	; 0x01
	//TCCR1A=(1<<FOC1A)|(1<<FOC1B);
	TCCR1C=(1<<FOC1A)|(1<<FOC1B)|(1<<FOC1C);
    1e74:	e2 e8       	ldi	r30, 0x82	; 130
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	80 ee       	ldi	r24, 0xE0	; 224
    1e7a:	80 83       	st	Z, r24
	TCCR1B = (TCCR1B & 0xF8) | (config->clock_select);
    1e7c:	a1 e8       	ldi	r26, 0x81	; 129
    1e7e:	b0 e0       	ldi	r27, 0x00	; 0
    1e80:	e1 e8       	ldi	r30, 0x81	; 129
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	80 81       	ld	r24, Z
    1e86:	98 2f       	mov	r25, r24
    1e88:	98 7f       	andi	r25, 0xF8	; 248
    1e8a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e8c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e8e:	81 81       	ldd	r24, Z+1	; 0x01
    1e90:	89 2b       	or	r24, r25
    1e92:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B & 0xBF) | ((config->input_edge)<<6);
    1e94:	a1 e8       	ldi	r26, 0x81	; 129
    1e96:	b0 e0       	ldi	r27, 0x00	; 0
    1e98:	e1 e8       	ldi	r30, 0x81	; 129
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	80 81       	ld	r24, Z
    1e9e:	28 2f       	mov	r18, r24
    1ea0:	2f 7b       	andi	r18, 0xBF	; 191
    1ea2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ea4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ea6:	80 81       	ld	r24, Z
    1ea8:	88 2f       	mov	r24, r24
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	00 24       	eor	r0, r0
    1eae:	96 95       	lsr	r25
    1eb0:	87 95       	ror	r24
    1eb2:	07 94       	ror	r0
    1eb4:	96 95       	lsr	r25
    1eb6:	87 95       	ror	r24
    1eb8:	07 94       	ror	r0
    1eba:	98 2f       	mov	r25, r24
    1ebc:	80 2d       	mov	r24, r0
    1ebe:	82 2b       	or	r24, r18
    1ec0:	8c 93       	st	X, r24
	pinMode(D, PIN4, INPUT);//icu pin
    1ec2:	83 e0       	ldi	r24, 0x03	; 3
    1ec4:	64 e0       	ldi	r22, 0x04	; 4
    1ec6:	40 e0       	ldi	r20, 0x00	; 0
    1ec8:	0e 94 9b 06 	call	0xd36	; 0xd36 <pinMode>
	TCNT1 = 0;
    1ecc:	e4 e8       	ldi	r30, 0x84	; 132
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	11 82       	std	Z+1, r1	; 0x01
    1ed2:	10 82       	st	Z, r1
	ICR1 = 0;
    1ed4:	e6 e8       	ldi	r30, 0x86	; 134
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	11 82       	std	Z+1, r1	; 0x01
    1eda:	10 82       	st	Z, r1
	TIMSK1=(1<<ICIE1);
    1edc:	ef e6       	ldi	r30, 0x6F	; 111
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	80 e2       	ldi	r24, 0x20	; 32
    1ee2:	80 83       	st	Z, r24
}
    1ee4:	0f 90       	pop	r0
    1ee6:	0f 90       	pop	r0
    1ee8:	cf 91       	pop	r28
    1eea:	df 91       	pop	r29
    1eec:	08 95       	ret

00001eee <ICU_setCallBack>:

void ICU_setCallBack(void(*a_ptr)(void))
{fun_ptr=a_ptr;	}
    1eee:	df 93       	push	r29
    1ef0:	cf 93       	push	r28
    1ef2:	0f 92       	push	r0
    1ef4:	0f 92       	push	r0
    1ef6:	cd b7       	in	r28, 0x3d	; 61
    1ef8:	de b7       	in	r29, 0x3e	; 62
    1efa:	9a 83       	std	Y+2, r25	; 0x02
    1efc:	89 83       	std	Y+1, r24	; 0x01
    1efe:	89 81       	ldd	r24, Y+1	; 0x01
    1f00:	9a 81       	ldd	r25, Y+2	; 0x02
    1f02:	90 93 0b 02 	sts	0x020B, r25
    1f06:	80 93 0a 02 	sts	0x020A, r24
    1f0a:	0f 90       	pop	r0
    1f0c:	0f 90       	pop	r0
    1f0e:	cf 91       	pop	r28
    1f10:	df 91       	pop	r29
    1f12:	08 95       	ret

00001f14 <ICU_setEdgeDetectionType>:

void ICU_setEdgeDetectionType(const input_edge edgeType){
    1f14:	df 93       	push	r29
    1f16:	cf 93       	push	r28
    1f18:	0f 92       	push	r0
    1f1a:	cd b7       	in	r28, 0x3d	; 61
    1f1c:	de b7       	in	r29, 0x3e	; 62
    1f1e:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = (TCCR1B & 0xBF) | ((edgeType)<<6);
    1f20:	a1 e8       	ldi	r26, 0x81	; 129
    1f22:	b0 e0       	ldi	r27, 0x00	; 0
    1f24:	e1 e8       	ldi	r30, 0x81	; 129
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	80 81       	ld	r24, Z
    1f2a:	28 2f       	mov	r18, r24
    1f2c:	2f 7b       	andi	r18, 0xBF	; 191
    1f2e:	89 81       	ldd	r24, Y+1	; 0x01
    1f30:	88 2f       	mov	r24, r24
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	00 24       	eor	r0, r0
    1f36:	96 95       	lsr	r25
    1f38:	87 95       	ror	r24
    1f3a:	07 94       	ror	r0
    1f3c:	96 95       	lsr	r25
    1f3e:	87 95       	ror	r24
    1f40:	07 94       	ror	r0
    1f42:	98 2f       	mov	r25, r24
    1f44:	80 2d       	mov	r24, r0
    1f46:	82 2b       	or	r24, r18
    1f48:	8c 93       	st	X, r24
}
    1f4a:	0f 90       	pop	r0
    1f4c:	cf 91       	pop	r28
    1f4e:	df 91       	pop	r29
    1f50:	08 95       	ret

00001f52 <ICU_getInputCaptureValue>:

u16 ICU_getInputCaptureValue(void)
{
    1f52:	df 93       	push	r29
    1f54:	cf 93       	push	r28
    1f56:	cd b7       	in	r28, 0x3d	; 61
    1f58:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1f5a:	e6 e8       	ldi	r30, 0x86	; 134
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	80 81       	ld	r24, Z
    1f60:	91 81       	ldd	r25, Z+1	; 0x01
}
    1f62:	cf 91       	pop	r28
    1f64:	df 91       	pop	r29
    1f66:	08 95       	ret

00001f68 <ICU_clearTimerValue>:

void ICU_clearTimerValue(void)
{
    1f68:	df 93       	push	r29
    1f6a:	cf 93       	push	r28
    1f6c:	cd b7       	in	r28, 0x3d	; 61
    1f6e:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    1f70:	e4 e8       	ldi	r30, 0x84	; 132
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	11 82       	std	Z+1, r1	; 0x01
    1f76:	10 82       	st	Z, r1
}
    1f78:	cf 91       	pop	r28
    1f7a:	df 91       	pop	r29
    1f7c:	08 95       	ret

00001f7e <ICU_DeInit>:

void ICU_DeInit(void)
{
    1f7e:	df 93       	push	r29
    1f80:	cf 93       	push	r28
    1f82:	cd b7       	in	r28, 0x3d	; 61
    1f84:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    1f86:	e0 e8       	ldi	r30, 0x80	; 128
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	10 82       	st	Z, r1
	TCCR1B = 0;
    1f8c:	e1 e8       	ldi	r30, 0x81	; 129
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	10 82       	st	Z, r1
	TCNT1 = 0;
    1f92:	e4 e8       	ldi	r30, 0x84	; 132
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	11 82       	std	Z+1, r1	; 0x01
    1f98:	10 82       	st	Z, r1
	ICR1 = 0;
    1f9a:	e6 e8       	ldi	r30, 0x86	; 134
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	11 82       	std	Z+1, r1	; 0x01
    1fa0:	10 82       	st	Z, r1
	TCCR1C=0;
    1fa2:	e2 e8       	ldi	r30, 0x82	; 130
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	10 82       	st	Z, r1
	/* Disable the Input Capture interrupt */
	TIMSK1 &= ~(1<<ICIE1);
    1fa8:	af e6       	ldi	r26, 0x6F	; 111
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	ef e6       	ldi	r30, 0x6F	; 111
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	8f 7d       	andi	r24, 0xDF	; 223
    1fb4:	8c 93       	st	X, r24
}
    1fb6:	cf 91       	pop	r28
    1fb8:	df 91       	pop	r29
    1fba:	08 95       	ret

00001fbc <Ultrasonic_init>:

ICU_config config ={rising,F_CPU_8};
u8 icu_counter=0;
u16 icu_timer_value=0;

void Ultrasonic_init(){
    1fbc:	df 93       	push	r29
    1fbe:	cf 93       	push	r28
    1fc0:	cd b7       	in	r28, 0x3d	; 61
    1fc2:	de b7       	in	r29, 0x3e	; 62
	ICU_init(&config);
    1fc4:	88 e0       	ldi	r24, 0x08	; 8
    1fc6:	92 e0       	ldi	r25, 0x02	; 2
    1fc8:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <ICU_init>
	ICU_setCallBack(Ultrasonic_edgeProcessing);
    1fcc:	82 ef       	ldi	r24, 0xF2	; 242
    1fce:	90 e1       	ldi	r25, 0x10	; 16
    1fd0:	0e 94 77 0f 	call	0x1eee	; 0x1eee <ICU_setCallBack>
	pinMode(Trigger_port_id, Trigger_pin_id, OUTPUT);
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	65 e0       	ldi	r22, 0x05	; 5
    1fd8:	41 e0       	ldi	r20, 0x01	; 1
    1fda:	0e 94 9b 06 	call	0xd36	; 0xd36 <pinMode>

}
    1fde:	cf 91       	pop	r28
    1fe0:	df 91       	pop	r29
    1fe2:	08 95       	ret

00001fe4 <Ultrasonic_Trigger>:
void Ultrasonic_Trigger(){
    1fe4:	df 93       	push	r29
    1fe6:	cf 93       	push	r28
    1fe8:	cd b7       	in	r28, 0x3d	; 61
    1fea:	de b7       	in	r29, 0x3e	; 62
    1fec:	68 97       	sbiw	r28, 0x18	; 24
    1fee:	0f b6       	in	r0, 0x3f	; 63
    1ff0:	f8 94       	cli
    1ff2:	de bf       	out	0x3e, r29	; 62
    1ff4:	0f be       	out	0x3f, r0	; 63
    1ff6:	cd bf       	out	0x3d, r28	; 61
	pinWrite(Trigger_port_id, Trigger_pin_id, HIGH);
    1ff8:	81 e0       	ldi	r24, 0x01	; 1
    1ffa:	65 e0       	ldi	r22, 0x05	; 5
    1ffc:	41 e0       	ldi	r20, 0x01	; 1
    1ffe:	0e 94 36 09 	call	0x126c	; 0x126c <pinWrite>
    2002:	80 e0       	ldi	r24, 0x00	; 0
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	a0 e3       	ldi	r26, 0x30	; 48
    2008:	b1 e4       	ldi	r27, 0x41	; 65
    200a:	8d 8b       	std	Y+21, r24	; 0x15
    200c:	9e 8b       	std	Y+22, r25	; 0x16
    200e:	af 8b       	std	Y+23, r26	; 0x17
    2010:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2012:	6d 89       	ldd	r22, Y+21	; 0x15
    2014:	7e 89       	ldd	r23, Y+22	; 0x16
    2016:	8f 89       	ldd	r24, Y+23	; 0x17
    2018:	98 8d       	ldd	r25, Y+24	; 0x18
    201a:	2b ea       	ldi	r18, 0xAB	; 171
    201c:	3a ea       	ldi	r19, 0xAA	; 170
    201e:	4a ea       	ldi	r20, 0xAA	; 170
    2020:	50 e4       	ldi	r21, 0x40	; 64
    2022:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <__mulsf3>
    2026:	dc 01       	movw	r26, r24
    2028:	cb 01       	movw	r24, r22
    202a:	89 8b       	std	Y+17, r24	; 0x11
    202c:	9a 8b       	std	Y+18, r25	; 0x12
    202e:	ab 8b       	std	Y+19, r26	; 0x13
    2030:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2032:	69 89       	ldd	r22, Y+17	; 0x11
    2034:	7a 89       	ldd	r23, Y+18	; 0x12
    2036:	8b 89       	ldd	r24, Y+19	; 0x13
    2038:	9c 89       	ldd	r25, Y+20	; 0x14
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	40 e8       	ldi	r20, 0x80	; 128
    2040:	5f e3       	ldi	r21, 0x3F	; 63
    2042:	0e 94 71 04 	call	0x8e2	; 0x8e2 <__ltsf2>
    2046:	88 23       	and	r24, r24
    2048:	1c f4       	brge	.+6      	; 0x2050 <Ultrasonic_Trigger+0x6c>
		__ticks = 1;
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	88 8b       	std	Y+16, r24	; 0x10
    204e:	91 c0       	rjmp	.+290    	; 0x2172 <Ultrasonic_Trigger+0x18e>
	else if (__tmp > 255)
    2050:	69 89       	ldd	r22, Y+17	; 0x11
    2052:	7a 89       	ldd	r23, Y+18	; 0x12
    2054:	8b 89       	ldd	r24, Y+19	; 0x13
    2056:	9c 89       	ldd	r25, Y+20	; 0x14
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	4f e7       	ldi	r20, 0x7F	; 127
    205e:	53 e4       	ldi	r21, 0x43	; 67
    2060:	0e 94 11 04 	call	0x822	; 0x822 <__gtsf2>
    2064:	18 16       	cp	r1, r24
    2066:	0c f0       	brlt	.+2      	; 0x206a <Ultrasonic_Trigger+0x86>
    2068:	7b c0       	rjmp	.+246    	; 0x2160 <Ultrasonic_Trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    206a:	6d 89       	ldd	r22, Y+21	; 0x15
    206c:	7e 89       	ldd	r23, Y+22	; 0x16
    206e:	8f 89       	ldd	r24, Y+23	; 0x17
    2070:	98 8d       	ldd	r25, Y+24	; 0x18
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	4a e7       	ldi	r20, 0x7A	; 122
    2078:	54 e4       	ldi	r21, 0x44	; 68
    207a:	0e 94 65 03 	call	0x6ca	; 0x6ca <__divsf3>
    207e:	dc 01       	movw	r26, r24
    2080:	cb 01       	movw	r24, r22
    2082:	8c 87       	std	Y+12, r24	; 0x0c
    2084:	9d 87       	std	Y+13, r25	; 0x0d
    2086:	ae 87       	std	Y+14, r26	; 0x0e
    2088:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    208a:	6c 85       	ldd	r22, Y+12	; 0x0c
    208c:	7d 85       	ldd	r23, Y+13	; 0x0d
    208e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2090:	9f 85       	ldd	r25, Y+15	; 0x0f
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	4a e7       	ldi	r20, 0x7A	; 122
    2098:	55 e4       	ldi	r21, 0x45	; 69
    209a:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <__mulsf3>
    209e:	dc 01       	movw	r26, r24
    20a0:	cb 01       	movw	r24, r22
    20a2:	88 87       	std	Y+8, r24	; 0x08
    20a4:	99 87       	std	Y+9, r25	; 0x09
    20a6:	aa 87       	std	Y+10, r26	; 0x0a
    20a8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    20aa:	68 85       	ldd	r22, Y+8	; 0x08
    20ac:	79 85       	ldd	r23, Y+9	; 0x09
    20ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    20b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	40 e8       	ldi	r20, 0x80	; 128
    20b8:	5f e3       	ldi	r21, 0x3F	; 63
    20ba:	0e 94 71 04 	call	0x8e2	; 0x8e2 <__ltsf2>
    20be:	88 23       	and	r24, r24
    20c0:	2c f4       	brge	.+10     	; 0x20cc <Ultrasonic_Trigger+0xe8>
		__ticks = 1;
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	9f 83       	std	Y+7, r25	; 0x07
    20c8:	8e 83       	std	Y+6, r24	; 0x06
    20ca:	3f c0       	rjmp	.+126    	; 0x214a <Ultrasonic_Trigger+0x166>
	else if (__tmp > 65535)
    20cc:	68 85       	ldd	r22, Y+8	; 0x08
    20ce:	79 85       	ldd	r23, Y+9	; 0x09
    20d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    20d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	3f ef       	ldi	r19, 0xFF	; 255
    20d8:	4f e7       	ldi	r20, 0x7F	; 127
    20da:	57 e4       	ldi	r21, 0x47	; 71
    20dc:	0e 94 11 04 	call	0x822	; 0x822 <__gtsf2>
    20e0:	18 16       	cp	r1, r24
    20e2:	4c f5       	brge	.+82     	; 0x2136 <Ultrasonic_Trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20e4:	6c 85       	ldd	r22, Y+12	; 0x0c
    20e6:	7d 85       	ldd	r23, Y+13	; 0x0d
    20e8:	8e 85       	ldd	r24, Y+14	; 0x0e
    20ea:	9f 85       	ldd	r25, Y+15	; 0x0f
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	40 e2       	ldi	r20, 0x20	; 32
    20f2:	51 e4       	ldi	r21, 0x41	; 65
    20f4:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <__mulsf3>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	bc 01       	movw	r22, r24
    20fe:	cd 01       	movw	r24, r26
    2100:	0e 94 95 00 	call	0x12a	; 0x12a <__fixunssfsi>
    2104:	dc 01       	movw	r26, r24
    2106:	cb 01       	movw	r24, r22
    2108:	9f 83       	std	Y+7, r25	; 0x07
    210a:	8e 83       	std	Y+6, r24	; 0x06
    210c:	0f c0       	rjmp	.+30     	; 0x212c <Ultrasonic_Trigger+0x148>
    210e:	80 e9       	ldi	r24, 0x90	; 144
    2110:	91 e0       	ldi	r25, 0x01	; 1
    2112:	9d 83       	std	Y+5, r25	; 0x05
    2114:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2116:	8c 81       	ldd	r24, Y+4	; 0x04
    2118:	9d 81       	ldd	r25, Y+5	; 0x05
    211a:	01 97       	sbiw	r24, 0x01	; 1
    211c:	f1 f7       	brne	.-4      	; 0x211a <Ultrasonic_Trigger+0x136>
    211e:	9d 83       	std	Y+5, r25	; 0x05
    2120:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2122:	8e 81       	ldd	r24, Y+6	; 0x06
    2124:	9f 81       	ldd	r25, Y+7	; 0x07
    2126:	01 97       	sbiw	r24, 0x01	; 1
    2128:	9f 83       	std	Y+7, r25	; 0x07
    212a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    212c:	8e 81       	ldd	r24, Y+6	; 0x06
    212e:	9f 81       	ldd	r25, Y+7	; 0x07
    2130:	00 97       	sbiw	r24, 0x00	; 0
    2132:	69 f7       	brne	.-38     	; 0x210e <Ultrasonic_Trigger+0x12a>
    2134:	24 c0       	rjmp	.+72     	; 0x217e <Ultrasonic_Trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2136:	68 85       	ldd	r22, Y+8	; 0x08
    2138:	79 85       	ldd	r23, Y+9	; 0x09
    213a:	8a 85       	ldd	r24, Y+10	; 0x0a
    213c:	9b 85       	ldd	r25, Y+11	; 0x0b
    213e:	0e 94 95 00 	call	0x12a	; 0x12a <__fixunssfsi>
    2142:	dc 01       	movw	r26, r24
    2144:	cb 01       	movw	r24, r22
    2146:	9f 83       	std	Y+7, r25	; 0x07
    2148:	8e 83       	std	Y+6, r24	; 0x06
    214a:	8e 81       	ldd	r24, Y+6	; 0x06
    214c:	9f 81       	ldd	r25, Y+7	; 0x07
    214e:	9b 83       	std	Y+3, r25	; 0x03
    2150:	8a 83       	std	Y+2, r24	; 0x02
    2152:	8a 81       	ldd	r24, Y+2	; 0x02
    2154:	9b 81       	ldd	r25, Y+3	; 0x03
    2156:	01 97       	sbiw	r24, 0x01	; 1
    2158:	f1 f7       	brne	.-4      	; 0x2156 <Ultrasonic_Trigger+0x172>
    215a:	9b 83       	std	Y+3, r25	; 0x03
    215c:	8a 83       	std	Y+2, r24	; 0x02
    215e:	0f c0       	rjmp	.+30     	; 0x217e <Ultrasonic_Trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2160:	69 89       	ldd	r22, Y+17	; 0x11
    2162:	7a 89       	ldd	r23, Y+18	; 0x12
    2164:	8b 89       	ldd	r24, Y+19	; 0x13
    2166:	9c 89       	ldd	r25, Y+20	; 0x14
    2168:	0e 94 95 00 	call	0x12a	; 0x12a <__fixunssfsi>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	88 8b       	std	Y+16, r24	; 0x10
    2172:	88 89       	ldd	r24, Y+16	; 0x10
    2174:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2176:	89 81       	ldd	r24, Y+1	; 0x01
    2178:	8a 95       	dec	r24
    217a:	f1 f7       	brne	.-4      	; 0x2178 <Ultrasonic_Trigger+0x194>
    217c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(11);
	pinWrite(Trigger_port_id, Trigger_pin_id, LOW);
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	65 e0       	ldi	r22, 0x05	; 5
    2182:	40 e0       	ldi	r20, 0x00	; 0
    2184:	0e 94 36 09 	call	0x126c	; 0x126c <pinWrite>
}
    2188:	68 96       	adiw	r28, 0x18	; 24
    218a:	0f b6       	in	r0, 0x3f	; 63
    218c:	f8 94       	cli
    218e:	de bf       	out	0x3e, r29	; 62
    2190:	0f be       	out	0x3f, r0	; 63
    2192:	cd bf       	out	0x3d, r28	; 61
    2194:	cf 91       	pop	r28
    2196:	df 91       	pop	r29
    2198:	08 95       	ret

0000219a <Ultrasonic_readDistance>:
u16 Ultrasonic_readDistance(){
    219a:	df 93       	push	r29
    219c:	cf 93       	push	r28
    219e:	0f 92       	push	r0
    21a0:	0f 92       	push	r0
    21a2:	cd b7       	in	r28, 0x3d	; 61
    21a4:	de b7       	in	r29, 0x3e	; 62
	Ultrasonic_Trigger();
    21a6:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <Ultrasonic_Trigger>
	icu_counter=0;
    21aa:	10 92 0c 02 	sts	0x020C, r1
	icu_timer_value=0;
    21ae:	10 92 0e 02 	sts	0x020E, r1
    21b2:	10 92 0d 02 	sts	0x020D, r1
	while(icu_counter!=2){}
    21b6:	80 91 0c 02 	lds	r24, 0x020C
    21ba:	82 30       	cpi	r24, 0x02	; 2
    21bc:	e1 f7       	brne	.-8      	; 0x21b6 <Ultrasonic_readDistance+0x1c>

	u16 distance = icu_timer_value/117;//
    21be:	80 91 0d 02 	lds	r24, 0x020D
    21c2:	90 91 0e 02 	lds	r25, 0x020E
    21c6:	25 e7       	ldi	r18, 0x75	; 117
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	b9 01       	movw	r22, r18
    21cc:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__udivmodhi4>
    21d0:	cb 01       	movw	r24, r22
    21d2:	9a 83       	std	Y+2, r25	; 0x02
    21d4:	89 83       	std	Y+1, r24	; 0x01
Now, here we have selected an internal 16MHz oscillator frequency for ATmega32, with Prescaler F_CPU/8 for timer frequency.

= 17000 x (TIMER value) x 5 x 10^-7 cm
= 0.0085 x (TIMER value) cm
distance (cm)= (TIMER value) / 117 cm*/
	return distance;
    21d6:	89 81       	ldd	r24, Y+1	; 0x01
    21d8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    21da:	0f 90       	pop	r0
    21dc:	0f 90       	pop	r0
    21de:	cf 91       	pop	r28
    21e0:	df 91       	pop	r29
    21e2:	08 95       	ret

000021e4 <Ultrasonic_edgeProcessing>:
void Ultrasonic_edgeProcessing(){
    21e4:	df 93       	push	r29
    21e6:	cf 93       	push	r28
    21e8:	cd b7       	in	r28, 0x3d	; 61
    21ea:	de b7       	in	r29, 0x3e	; 62
	icu_counter++;
    21ec:	80 91 0c 02 	lds	r24, 0x020C
    21f0:	8f 5f       	subi	r24, 0xFF	; 255
    21f2:	80 93 0c 02 	sts	0x020C, r24
	if(icu_counter==1){
    21f6:	80 91 0c 02 	lds	r24, 0x020C
    21fa:	81 30       	cpi	r24, 0x01	; 1
    21fc:	31 f4       	brne	.+12     	; 0x220a <__stack+0xb>
		ICU_clearTimerValue();
    21fe:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <ICU_clearTimerValue>
		ICU_setEdgeDetectionType(falling);
    2202:	80 e0       	ldi	r24, 0x00	; 0
    2204:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <ICU_setEdgeDetectionType>
    2208:	0f c0       	rjmp	.+30     	; 0x2228 <__stack+0x29>
	}
	else if(icu_counter==2){
    220a:	80 91 0c 02 	lds	r24, 0x020C
    220e:	82 30       	cpi	r24, 0x02	; 2
    2210:	59 f4       	brne	.+22     	; 0x2228 <__stack+0x29>
		icu_timer_value=ICU_getInputCaptureValue();
    2212:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <ICU_getInputCaptureValue>
    2216:	90 93 0e 02 	sts	0x020E, r25
    221a:	80 93 0d 02 	sts	0x020D, r24
		ICU_clearTimerValue();
    221e:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <ICU_clearTimerValue>
		ICU_setEdgeDetectionType(rising);
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <ICU_setEdgeDetectionType>

	}
}
    2228:	cf 91       	pop	r28
    222a:	df 91       	pop	r29
    222c:	08 95       	ret

0000222e <ADC_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void ADC_init(void)
{
    222e:	df 93       	push	r29
    2230:	cf 93       	push	r28
    2232:	cd b7       	in	r28, 0x3d	; 61
    2234:	de b7       	in	r29, 0x3e	; 62
	/* ADMUX Register Bits Description:
	 * REFS1:0 = 01 to choose AVCC = 5v as reference voltage
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	SET_BIT(ADMUX,REFS0);
    2236:	ac e7       	ldi	r26, 0x7C	; 124
    2238:	b0 e0       	ldi	r27, 0x00	; 0
    223a:	ec e7       	ldi	r30, 0x7C	; 124
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	80 81       	ld	r24, Z
    2240:	80 64       	ori	r24, 0x40	; 64
    2242:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,REFS1);
    2244:	ac e7       	ldi	r26, 0x7C	; 124
    2246:	b0 e0       	ldi	r27, 0x00	; 0
    2248:	ec e7       	ldi	r30, 0x7C	; 124
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	80 81       	ld	r24, Z
    224e:	8f 77       	andi	r24, 0x7F	; 127
    2250:	8c 93       	st	X, r24
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 0 Disable ADC Interrupt
	 * ADATE   = 0 Disable Auto Trigger
	 * ADPS2:0 = 111 to choose ADC_Clock = F_CPU/128 = 16Mhz/128 = 125Khz --> ADC must operate in range 50khz-200Khz
	 */
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) ;
    2252:	ea e7       	ldi	r30, 0x7A	; 122
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	86 e8       	ldi	r24, 0x86	; 134
    2258:	80 83       	st	Z, r24
}
    225a:	cf 91       	pop	r28
    225c:	df 91       	pop	r29
    225e:	08 95       	ret

00002260 <ADC_readChannel>:

u16 ADC_readChannel(u8 channel_num)
{
    2260:	df 93       	push	r29
    2262:	cf 93       	push	r28
    2264:	0f 92       	push	r0
    2266:	cd b7       	in	r28, 0x3d	; 61
    2268:	de b7       	in	r29, 0x3e	; 62
    226a:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; /* Clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
    226c:	ac e7       	ldi	r26, 0x7C	; 124
    226e:	b0 e0       	ldi	r27, 0x00	; 0
    2270:	ec e7       	ldi	r30, 0x7C	; 124
    2272:	f0 e0       	ldi	r31, 0x00	; 0
    2274:	80 81       	ld	r24, Z
    2276:	80 7e       	andi	r24, 0xE0	; 224
    2278:	8c 93       	st	X, r24
	ADMUX = ADMUX | channel_num; /* Choose the correct channel by setting the channel number in MUX4:0 bits */
    227a:	ac e7       	ldi	r26, 0x7C	; 124
    227c:	b0 e0       	ldi	r27, 0x00	; 0
    227e:	ec e7       	ldi	r30, 0x7C	; 124
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	90 81       	ld	r25, Z
    2284:	89 81       	ldd	r24, Y+1	; 0x01
    2286:	89 2b       	or	r24, r25
    2288:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC); /* Start conversion write '1' to ADSC */
    228a:	aa e7       	ldi	r26, 0x7A	; 122
    228c:	b0 e0       	ldi	r27, 0x00	; 0
    228e:	ea e7       	ldi	r30, 0x7A	; 122
    2290:	f0 e0       	ldi	r31, 0x00	; 0
    2292:	80 81       	ld	r24, Z
    2294:	80 64       	ori	r24, 0x40	; 64
    2296:	8c 93       	st	X, r24
	while(BIT_IS_CLR(ADCSRA,ADIF)); /* Wait for conversion to complete, ADIF becomes '1' */
    2298:	ea e7       	ldi	r30, 0x7A	; 122
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	80 81       	ld	r24, Z
    229e:	88 2f       	mov	r24, r24
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	80 71       	andi	r24, 0x10	; 16
    22a4:	90 70       	andi	r25, 0x00	; 0
    22a6:	00 97       	sbiw	r24, 0x00	; 0
    22a8:	b9 f3       	breq	.-18     	; 0x2298 <ADC_readChannel+0x38>
	SET_BIT(ADCSRA,ADIF); /* Clear ADIF by write '1' to it :) */
    22aa:	aa e7       	ldi	r26, 0x7A	; 122
    22ac:	b0 e0       	ldi	r27, 0x00	; 0
    22ae:	ea e7       	ldi	r30, 0x7A	; 122
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	80 81       	ld	r24, Z
    22b4:	80 61       	ori	r24, 0x10	; 16
    22b6:	8c 93       	st	X, r24
	return ADC; /* Read the digital value from the data register */
    22b8:	e8 e7       	ldi	r30, 0x78	; 120
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	80 81       	ld	r24, Z
    22be:	91 81       	ldd	r25, Z+1	; 0x01
}
    22c0:	0f 90       	pop	r0
    22c2:	cf 91       	pop	r28
    22c4:	df 91       	pop	r29
    22c6:	08 95       	ret

000022c8 <main>:
#include<avr/io.h>
#include "Ultrasonic_sensor _HC-SR04.h"
#include "macros.h"
#include <util/delay.h>
#include "uart.h"
int main(){
    22c8:	df 93       	push	r29
    22ca:	cf 93       	push	r28
    22cc:	cd b7       	in	r28, 0x3d	; 61
    22ce:	de b7       	in	r29, 0x3e	; 62
		}
		else if(x=='B'){
			PORTC=0;
		}
	}*/
	DDRC=0XFF;
    22d0:	e7 e2       	ldi	r30, 0x27	; 39
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	8f ef       	ldi	r24, 0xFF	; 255
    22d6:	80 83       	st	Z, r24
	PORTC=0XFF;
    22d8:	e8 e2       	ldi	r30, 0x28	; 40
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	8f ef       	ldi	r24, 0xFF	; 255
    22de:	80 83       	st	Z, r24
    22e0:	ff cf       	rjmp	.-2      	; 0x22e0 <main+0x18>

000022e2 <BT_Init>:
#include "macros.h"
#include "bluetooth.h"
#include "uart.h"


void BT_Init(){
    22e2:	df 93       	push	r29
    22e4:	cf 93       	push	r28
    22e6:	cd b7       	in	r28, 0x3d	; 61
    22e8:	de b7       	in	r29, 0x3e	; 62
	UART_init(9600,uart0);
    22ea:	60 e8       	ldi	r22, 0x80	; 128
    22ec:	75 e2       	ldi	r23, 0x25	; 37
    22ee:	80 e0       	ldi	r24, 0x00	; 0
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	40 e0       	ldi	r20, 0x00	; 0
    22f4:	0e 94 a9 11 	call	0x2352	; 0x2352 <UART_init>
}
    22f8:	cf 91       	pop	r28
    22fa:	df 91       	pop	r29
    22fc:	08 95       	ret

000022fe <BT_RX>:
u8  BT_RX(){
    22fe:	df 93       	push	r29
    2300:	cf 93       	push	r28
    2302:	cd b7       	in	r28, 0x3d	; 61
    2304:	de b7       	in	r29, 0x3e	; 62
	return UART_recieveByte(uart0);
    2306:	80 e0       	ldi	r24, 0x00	; 0
    2308:	0e 94 25 13 	call	0x264a	; 0x264a <UART_recieveByte>
}
    230c:	cf 91       	pop	r28
    230e:	df 91       	pop	r29
    2310:	08 95       	ret

00002312 <BT_TX>:
void BT_TX(u8 data){
    2312:	df 93       	push	r29
    2314:	cf 93       	push	r28
    2316:	0f 92       	push	r0
    2318:	cd b7       	in	r28, 0x3d	; 61
    231a:	de b7       	in	r29, 0x3e	; 62
    231c:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(data,uart0);
    231e:	89 81       	ldd	r24, Y+1	; 0x01
    2320:	60 e0       	ldi	r22, 0x00	; 0
    2322:	0e 94 c0 12 	call	0x2580	; 0x2580 <UART_sendByte>
}
    2326:	0f 90       	pop	r0
    2328:	cf 91       	pop	r28
    232a:	df 91       	pop	r29
    232c:	08 95       	ret

0000232e <BT_TX_string>:
void BT_TX_string (u8 data[]){
    232e:	df 93       	push	r29
    2330:	cf 93       	push	r28
    2332:	0f 92       	push	r0
    2334:	0f 92       	push	r0
    2336:	cd b7       	in	r28, 0x3d	; 61
    2338:	de b7       	in	r29, 0x3e	; 62
    233a:	9a 83       	std	Y+2, r25	; 0x02
    233c:	89 83       	std	Y+1, r24	; 0x01
	UART_sendString(data,uart0);
    233e:	89 81       	ldd	r24, Y+1	; 0x01
    2340:	9a 81       	ldd	r25, Y+2	; 0x02
    2342:	60 e0       	ldi	r22, 0x00	; 0
    2344:	0e 94 7f 13 	call	0x26fe	; 0x26fe <UART_sendString>
}
    2348:	0f 90       	pop	r0
    234a:	0f 90       	pop	r0
    234c:	cf 91       	pop	r28
    234e:	df 91       	pop	r29
    2350:	08 95       	ret

00002352 <UART_init>:
8bit mode
u2x double speed
asynchronous
 */
void UART_init(u32 baud_rate, u8 uart_no )
{
    2352:	df 93       	push	r29
    2354:	cf 93       	push	r28
    2356:	cd b7       	in	r28, 0x3d	; 61
    2358:	de b7       	in	r29, 0x3e	; 62
    235a:	29 97       	sbiw	r28, 0x09	; 9
    235c:	0f b6       	in	r0, 0x3f	; 63
    235e:	f8 94       	cli
    2360:	de bf       	out	0x3e, r29	; 62
    2362:	0f be       	out	0x3f, r0	; 63
    2364:	cd bf       	out	0x3d, r28	; 61
    2366:	6b 83       	std	Y+3, r22	; 0x03
    2368:	7c 83       	std	Y+4, r23	; 0x04
    236a:	8d 83       	std	Y+5, r24	; 0x05
    236c:	9e 83       	std	Y+6, r25	; 0x06
    236e:	4f 83       	std	Y+7, r20	; 0x07
	u16 ubrr_value = 0;
    2370:	1a 82       	std	Y+2, r1	; 0x02
    2372:	19 82       	std	Y+1, r1	; 0x01
	switch(uart_no){
    2374:	8f 81       	ldd	r24, Y+7	; 0x07
    2376:	28 2f       	mov	r18, r24
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	39 87       	std	Y+9, r19	; 0x09
    237c:	28 87       	std	Y+8, r18	; 0x08
    237e:	88 85       	ldd	r24, Y+8	; 0x08
    2380:	99 85       	ldd	r25, Y+9	; 0x09
    2382:	81 30       	cpi	r24, 0x01	; 1
    2384:	91 05       	cpc	r25, r1
    2386:	09 f4       	brne	.+2      	; 0x238a <UART_init+0x38>
    2388:	4e c0       	rjmp	.+156    	; 0x2426 <UART_init+0xd4>
    238a:	28 85       	ldd	r18, Y+8	; 0x08
    238c:	39 85       	ldd	r19, Y+9	; 0x09
    238e:	22 30       	cpi	r18, 0x02	; 2
    2390:	31 05       	cpc	r19, r1
    2392:	2c f4       	brge	.+10     	; 0x239e <UART_init+0x4c>
    2394:	88 85       	ldd	r24, Y+8	; 0x08
    2396:	99 85       	ldd	r25, Y+9	; 0x09
    2398:	00 97       	sbiw	r24, 0x00	; 0
    239a:	71 f0       	breq	.+28     	; 0x23b8 <UART_init+0x66>
    239c:	e8 c0       	rjmp	.+464    	; 0x256e <UART_init+0x21c>
    239e:	28 85       	ldd	r18, Y+8	; 0x08
    23a0:	39 85       	ldd	r19, Y+9	; 0x09
    23a2:	22 30       	cpi	r18, 0x02	; 2
    23a4:	31 05       	cpc	r19, r1
    23a6:	09 f4       	brne	.+2      	; 0x23aa <UART_init+0x58>
    23a8:	75 c0       	rjmp	.+234    	; 0x2494 <UART_init+0x142>
    23aa:	88 85       	ldd	r24, Y+8	; 0x08
    23ac:	99 85       	ldd	r25, Y+9	; 0x09
    23ae:	83 30       	cpi	r24, 0x03	; 3
    23b0:	91 05       	cpc	r25, r1
    23b2:	09 f4       	brne	.+2      	; 0x23b6 <UART_init+0x64>
    23b4:	a6 c0       	rjmp	.+332    	; 0x2502 <UART_init+0x1b0>
    23b6:	db c0       	rjmp	.+438    	; 0x256e <UART_init+0x21c>

	case uart0:
		UCSR0A = (1<<U2X0);
    23b8:	e0 ec       	ldi	r30, 0xC0	; 192
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	82 e0       	ldi	r24, 0x02	; 2
    23be:	80 83       	st	Z, r24
		UCSR0B = (1<<RXEN0) | (1<<TXEN0);
    23c0:	e1 ec       	ldi	r30, 0xC1	; 193
    23c2:	f0 e0       	ldi	r31, 0x00	; 0
    23c4:	88 e1       	ldi	r24, 0x18	; 24
    23c6:	80 83       	st	Z, r24
		UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);
    23c8:	e2 ec       	ldi	r30, 0xC2	; 194
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	86 e0       	ldi	r24, 0x06	; 6
    23ce:	80 83       	st	Z, r24

		ubrr_value = (u16)(((F_CPU / (baud_rate * 8UL))) - 1);
    23d0:	8b 81       	ldd	r24, Y+3	; 0x03
    23d2:	9c 81       	ldd	r25, Y+4	; 0x04
    23d4:	ad 81       	ldd	r26, Y+5	; 0x05
    23d6:	be 81       	ldd	r27, Y+6	; 0x06
    23d8:	88 0f       	add	r24, r24
    23da:	99 1f       	adc	r25, r25
    23dc:	aa 1f       	adc	r26, r26
    23de:	bb 1f       	adc	r27, r27
    23e0:	88 0f       	add	r24, r24
    23e2:	99 1f       	adc	r25, r25
    23e4:	aa 1f       	adc	r26, r26
    23e6:	bb 1f       	adc	r27, r27
    23e8:	88 0f       	add	r24, r24
    23ea:	99 1f       	adc	r25, r25
    23ec:	aa 1f       	adc	r26, r26
    23ee:	bb 1f       	adc	r27, r27
    23f0:	9c 01       	movw	r18, r24
    23f2:	ad 01       	movw	r20, r26
    23f4:	80 e0       	ldi	r24, 0x00	; 0
    23f6:	94 e2       	ldi	r25, 0x24	; 36
    23f8:	a4 ef       	ldi	r26, 0xF4	; 244
    23fa:	b0 e0       	ldi	r27, 0x00	; 0
    23fc:	bc 01       	movw	r22, r24
    23fe:	cd 01       	movw	r24, r26
    2400:	0e 94 06 14 	call	0x280c	; 0x280c <__udivmodsi4>
    2404:	da 01       	movw	r26, r20
    2406:	c9 01       	movw	r24, r18
    2408:	01 97       	sbiw	r24, 0x01	; 1
    240a:	9a 83       	std	Y+2, r25	; 0x02
    240c:	89 83       	std	Y+1, r24	; 0x01
		/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
		UBRR0H = ubrr_value>>8;
    240e:	e5 ec       	ldi	r30, 0xC5	; 197
    2410:	f0 e0       	ldi	r31, 0x00	; 0
    2412:	89 81       	ldd	r24, Y+1	; 0x01
    2414:	9a 81       	ldd	r25, Y+2	; 0x02
    2416:	89 2f       	mov	r24, r25
    2418:	99 27       	eor	r25, r25
    241a:	80 83       	st	Z, r24
		UBRR0L = ubrr_value;
    241c:	e4 ec       	ldi	r30, 0xC4	; 196
    241e:	f0 e0       	ldi	r31, 0x00	; 0
    2420:	89 81       	ldd	r24, Y+1	; 0x01
    2422:	80 83       	st	Z, r24
    2424:	a4 c0       	rjmp	.+328    	; 0x256e <UART_init+0x21c>
		break;
	case uart1:
		UCSR1A = (1<<U2X1);
    2426:	e8 ec       	ldi	r30, 0xC8	; 200
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	82 e0       	ldi	r24, 0x02	; 2
    242c:	80 83       	st	Z, r24
		UCSR1B = (1<<RXEN1) | (1<<TXEN1);
    242e:	e9 ec       	ldi	r30, 0xC9	; 201
    2430:	f0 e0       	ldi	r31, 0x00	; 0
    2432:	88 e1       	ldi	r24, 0x18	; 24
    2434:	80 83       	st	Z, r24
		UCSR1C = (1<<UCSZ11) | (1<<UCSZ10);
    2436:	ea ec       	ldi	r30, 0xCA	; 202
    2438:	f0 e0       	ldi	r31, 0x00	; 0
    243a:	86 e0       	ldi	r24, 0x06	; 6
    243c:	80 83       	st	Z, r24

		ubrr_value = (u16)(((F_CPU / (baud_rate * 8UL))) - 1);
    243e:	8b 81       	ldd	r24, Y+3	; 0x03
    2440:	9c 81       	ldd	r25, Y+4	; 0x04
    2442:	ad 81       	ldd	r26, Y+5	; 0x05
    2444:	be 81       	ldd	r27, Y+6	; 0x06
    2446:	88 0f       	add	r24, r24
    2448:	99 1f       	adc	r25, r25
    244a:	aa 1f       	adc	r26, r26
    244c:	bb 1f       	adc	r27, r27
    244e:	88 0f       	add	r24, r24
    2450:	99 1f       	adc	r25, r25
    2452:	aa 1f       	adc	r26, r26
    2454:	bb 1f       	adc	r27, r27
    2456:	88 0f       	add	r24, r24
    2458:	99 1f       	adc	r25, r25
    245a:	aa 1f       	adc	r26, r26
    245c:	bb 1f       	adc	r27, r27
    245e:	9c 01       	movw	r18, r24
    2460:	ad 01       	movw	r20, r26
    2462:	80 e0       	ldi	r24, 0x00	; 0
    2464:	94 e2       	ldi	r25, 0x24	; 36
    2466:	a4 ef       	ldi	r26, 0xF4	; 244
    2468:	b0 e0       	ldi	r27, 0x00	; 0
    246a:	bc 01       	movw	r22, r24
    246c:	cd 01       	movw	r24, r26
    246e:	0e 94 06 14 	call	0x280c	; 0x280c <__udivmodsi4>
    2472:	da 01       	movw	r26, r20
    2474:	c9 01       	movw	r24, r18
    2476:	01 97       	sbiw	r24, 0x01	; 1
    2478:	9a 83       	std	Y+2, r25	; 0x02
    247a:	89 83       	std	Y+1, r24	; 0x01
		/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
		UBRR1H = ubrr_value>>8;
    247c:	ed ec       	ldi	r30, 0xCD	; 205
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	89 81       	ldd	r24, Y+1	; 0x01
    2482:	9a 81       	ldd	r25, Y+2	; 0x02
    2484:	89 2f       	mov	r24, r25
    2486:	99 27       	eor	r25, r25
    2488:	80 83       	st	Z, r24
		UBRR1L = ubrr_value;
    248a:	ec ec       	ldi	r30, 0xCC	; 204
    248c:	f0 e0       	ldi	r31, 0x00	; 0
    248e:	89 81       	ldd	r24, Y+1	; 0x01
    2490:	80 83       	st	Z, r24
    2492:	6d c0       	rjmp	.+218    	; 0x256e <UART_init+0x21c>
		break;
	case uart2:
		UCSR2A = (1<<U2X2);
    2494:	e0 ed       	ldi	r30, 0xD0	; 208
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	82 e0       	ldi	r24, 0x02	; 2
    249a:	80 83       	st	Z, r24
		UCSR2B = (1<<RXEN2) | (1<<TXEN2);
    249c:	e1 ed       	ldi	r30, 0xD1	; 209
    249e:	f0 e0       	ldi	r31, 0x00	; 0
    24a0:	88 e1       	ldi	r24, 0x18	; 24
    24a2:	80 83       	st	Z, r24
		UCSR2C = (1<<UCSZ21) | (1<<UCSZ20);
    24a4:	e2 ed       	ldi	r30, 0xD2	; 210
    24a6:	f0 e0       	ldi	r31, 0x00	; 0
    24a8:	86 e0       	ldi	r24, 0x06	; 6
    24aa:	80 83       	st	Z, r24

		ubrr_value = (u16)(((F_CPU / (baud_rate * 8UL))) - 1);
    24ac:	8b 81       	ldd	r24, Y+3	; 0x03
    24ae:	9c 81       	ldd	r25, Y+4	; 0x04
    24b0:	ad 81       	ldd	r26, Y+5	; 0x05
    24b2:	be 81       	ldd	r27, Y+6	; 0x06
    24b4:	88 0f       	add	r24, r24
    24b6:	99 1f       	adc	r25, r25
    24b8:	aa 1f       	adc	r26, r26
    24ba:	bb 1f       	adc	r27, r27
    24bc:	88 0f       	add	r24, r24
    24be:	99 1f       	adc	r25, r25
    24c0:	aa 1f       	adc	r26, r26
    24c2:	bb 1f       	adc	r27, r27
    24c4:	88 0f       	add	r24, r24
    24c6:	99 1f       	adc	r25, r25
    24c8:	aa 1f       	adc	r26, r26
    24ca:	bb 1f       	adc	r27, r27
    24cc:	9c 01       	movw	r18, r24
    24ce:	ad 01       	movw	r20, r26
    24d0:	80 e0       	ldi	r24, 0x00	; 0
    24d2:	94 e2       	ldi	r25, 0x24	; 36
    24d4:	a4 ef       	ldi	r26, 0xF4	; 244
    24d6:	b0 e0       	ldi	r27, 0x00	; 0
    24d8:	bc 01       	movw	r22, r24
    24da:	cd 01       	movw	r24, r26
    24dc:	0e 94 06 14 	call	0x280c	; 0x280c <__udivmodsi4>
    24e0:	da 01       	movw	r26, r20
    24e2:	c9 01       	movw	r24, r18
    24e4:	01 97       	sbiw	r24, 0x01	; 1
    24e6:	9a 83       	std	Y+2, r25	; 0x02
    24e8:	89 83       	std	Y+1, r24	; 0x01
		/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
		UBRR2H = ubrr_value>>8;
    24ea:	e5 ed       	ldi	r30, 0xD5	; 213
    24ec:	f0 e0       	ldi	r31, 0x00	; 0
    24ee:	89 81       	ldd	r24, Y+1	; 0x01
    24f0:	9a 81       	ldd	r25, Y+2	; 0x02
    24f2:	89 2f       	mov	r24, r25
    24f4:	99 27       	eor	r25, r25
    24f6:	80 83       	st	Z, r24
		UBRR2L = ubrr_value;
    24f8:	e4 ed       	ldi	r30, 0xD4	; 212
    24fa:	f0 e0       	ldi	r31, 0x00	; 0
    24fc:	89 81       	ldd	r24, Y+1	; 0x01
    24fe:	80 83       	st	Z, r24
    2500:	36 c0       	rjmp	.+108    	; 0x256e <UART_init+0x21c>
		break;
	case uart3:
		UCSR3A = (1<<U2X3);
    2502:	e0 e3       	ldi	r30, 0x30	; 48
    2504:	f1 e0       	ldi	r31, 0x01	; 1
    2506:	82 e0       	ldi	r24, 0x02	; 2
    2508:	80 83       	st	Z, r24
		UCSR3B = (1<<RXEN3) | (1<<TXEN3);
    250a:	e1 e3       	ldi	r30, 0x31	; 49
    250c:	f1 e0       	ldi	r31, 0x01	; 1
    250e:	88 e1       	ldi	r24, 0x18	; 24
    2510:	80 83       	st	Z, r24
		UCSR3C = (1<<UCSZ31) | (1<<UCSZ30);
    2512:	e2 e3       	ldi	r30, 0x32	; 50
    2514:	f1 e0       	ldi	r31, 0x01	; 1
    2516:	86 e0       	ldi	r24, 0x06	; 6
    2518:	80 83       	st	Z, r24

		ubrr_value = (u16)(((F_CPU / (baud_rate * 8UL))) - 1);
    251a:	8b 81       	ldd	r24, Y+3	; 0x03
    251c:	9c 81       	ldd	r25, Y+4	; 0x04
    251e:	ad 81       	ldd	r26, Y+5	; 0x05
    2520:	be 81       	ldd	r27, Y+6	; 0x06
    2522:	88 0f       	add	r24, r24
    2524:	99 1f       	adc	r25, r25
    2526:	aa 1f       	adc	r26, r26
    2528:	bb 1f       	adc	r27, r27
    252a:	88 0f       	add	r24, r24
    252c:	99 1f       	adc	r25, r25
    252e:	aa 1f       	adc	r26, r26
    2530:	bb 1f       	adc	r27, r27
    2532:	88 0f       	add	r24, r24
    2534:	99 1f       	adc	r25, r25
    2536:	aa 1f       	adc	r26, r26
    2538:	bb 1f       	adc	r27, r27
    253a:	9c 01       	movw	r18, r24
    253c:	ad 01       	movw	r20, r26
    253e:	80 e0       	ldi	r24, 0x00	; 0
    2540:	94 e2       	ldi	r25, 0x24	; 36
    2542:	a4 ef       	ldi	r26, 0xF4	; 244
    2544:	b0 e0       	ldi	r27, 0x00	; 0
    2546:	bc 01       	movw	r22, r24
    2548:	cd 01       	movw	r24, r26
    254a:	0e 94 06 14 	call	0x280c	; 0x280c <__udivmodsi4>
    254e:	da 01       	movw	r26, r20
    2550:	c9 01       	movw	r24, r18
    2552:	01 97       	sbiw	r24, 0x01	; 1
    2554:	9a 83       	std	Y+2, r25	; 0x02
    2556:	89 83       	std	Y+1, r24	; 0x01
		/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
		UBRR3H = ubrr_value>>8;
    2558:	e5 e3       	ldi	r30, 0x35	; 53
    255a:	f1 e0       	ldi	r31, 0x01	; 1
    255c:	89 81       	ldd	r24, Y+1	; 0x01
    255e:	9a 81       	ldd	r25, Y+2	; 0x02
    2560:	89 2f       	mov	r24, r25
    2562:	99 27       	eor	r25, r25
    2564:	80 83       	st	Z, r24
		UBRR3L = ubrr_value;
    2566:	e4 e3       	ldi	r30, 0x34	; 52
    2568:	f1 e0       	ldi	r31, 0x01	; 1
    256a:	89 81       	ldd	r24, Y+1	; 0x01
    256c:	80 83       	st	Z, r24
		break;
	}
}
    256e:	29 96       	adiw	r28, 0x09	; 9
    2570:	0f b6       	in	r0, 0x3f	; 63
    2572:	f8 94       	cli
    2574:	de bf       	out	0x3e, r29	; 62
    2576:	0f be       	out	0x3f, r0	; 63
    2578:	cd bf       	out	0x3d, r28	; 61
    257a:	cf 91       	pop	r28
    257c:	df 91       	pop	r29
    257e:	08 95       	ret

00002580 <UART_sendByte>:



void UART_sendByte(const u8 data, u8 uart_no)
{
    2580:	df 93       	push	r29
    2582:	cf 93       	push	r28
    2584:	00 d0       	rcall	.+0      	; 0x2586 <UART_sendByte+0x6>
    2586:	0f 92       	push	r0
    2588:	cd b7       	in	r28, 0x3d	; 61
    258a:	de b7       	in	r29, 0x3e	; 62
    258c:	89 83       	std	Y+1, r24	; 0x01
    258e:	6a 83       	std	Y+2, r22	; 0x02
	switch(uart_no){
    2590:	8a 81       	ldd	r24, Y+2	; 0x02
    2592:	28 2f       	mov	r18, r24
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	3c 83       	std	Y+4, r19	; 0x04
    2598:	2b 83       	std	Y+3, r18	; 0x03
    259a:	8b 81       	ldd	r24, Y+3	; 0x03
    259c:	9c 81       	ldd	r25, Y+4	; 0x04
    259e:	81 30       	cpi	r24, 0x01	; 1
    25a0:	91 05       	cpc	r25, r1
    25a2:	19 f1       	breq	.+70     	; 0x25ea <UART_sendByte+0x6a>
    25a4:	2b 81       	ldd	r18, Y+3	; 0x03
    25a6:	3c 81       	ldd	r19, Y+4	; 0x04
    25a8:	22 30       	cpi	r18, 0x02	; 2
    25aa:	31 05       	cpc	r19, r1
    25ac:	2c f4       	brge	.+10     	; 0x25b8 <UART_sendByte+0x38>
    25ae:	8b 81       	ldd	r24, Y+3	; 0x03
    25b0:	9c 81       	ldd	r25, Y+4	; 0x04
    25b2:	00 97       	sbiw	r24, 0x00	; 0
    25b4:	61 f0       	breq	.+24     	; 0x25ce <UART_sendByte+0x4e>
    25b6:	42 c0       	rjmp	.+132    	; 0x263c <UART_sendByte+0xbc>
    25b8:	2b 81       	ldd	r18, Y+3	; 0x03
    25ba:	3c 81       	ldd	r19, Y+4	; 0x04
    25bc:	22 30       	cpi	r18, 0x02	; 2
    25be:	31 05       	cpc	r19, r1
    25c0:	11 f1       	breq	.+68     	; 0x2606 <UART_sendByte+0x86>
    25c2:	8b 81       	ldd	r24, Y+3	; 0x03
    25c4:	9c 81       	ldd	r25, Y+4	; 0x04
    25c6:	83 30       	cpi	r24, 0x03	; 3
    25c8:	91 05       	cpc	r25, r1
    25ca:	59 f1       	breq	.+86     	; 0x2622 <UART_sendByte+0xa2>
    25cc:	37 c0       	rjmp	.+110    	; 0x263c <UART_sendByte+0xbc>
	case uart0:
		while(BIT_IS_CLR(UCSR0A,UDRE0)){} // waiting for Data Register Empty to be empty
    25ce:	e0 ec       	ldi	r30, 0xC0	; 192
    25d0:	f0 e0       	ldi	r31, 0x00	; 0
    25d2:	80 81       	ld	r24, Z
    25d4:	88 2f       	mov	r24, r24
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	80 72       	andi	r24, 0x20	; 32
    25da:	90 70       	andi	r25, 0x00	; 0
    25dc:	00 97       	sbiw	r24, 0x00	; 0
    25de:	b9 f3       	breq	.-18     	; 0x25ce <UART_sendByte+0x4e>
		UDR0 = data;
    25e0:	e6 ec       	ldi	r30, 0xC6	; 198
    25e2:	f0 e0       	ldi	r31, 0x00	; 0
    25e4:	89 81       	ldd	r24, Y+1	; 0x01
    25e6:	80 83       	st	Z, r24
    25e8:	29 c0       	rjmp	.+82     	; 0x263c <UART_sendByte+0xbc>
		break;
	case uart1:
		while(BIT_IS_CLR(UCSR1A,UDRE1)){} // waiting for Data Register Empty to be empty
    25ea:	e8 ec       	ldi	r30, 0xC8	; 200
    25ec:	f0 e0       	ldi	r31, 0x00	; 0
    25ee:	80 81       	ld	r24, Z
    25f0:	88 2f       	mov	r24, r24
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	80 72       	andi	r24, 0x20	; 32
    25f6:	90 70       	andi	r25, 0x00	; 0
    25f8:	00 97       	sbiw	r24, 0x00	; 0
    25fa:	b9 f3       	breq	.-18     	; 0x25ea <UART_sendByte+0x6a>
		UDR1 = data;
    25fc:	ee ec       	ldi	r30, 0xCE	; 206
    25fe:	f0 e0       	ldi	r31, 0x00	; 0
    2600:	89 81       	ldd	r24, Y+1	; 0x01
    2602:	80 83       	st	Z, r24
    2604:	1b c0       	rjmp	.+54     	; 0x263c <UART_sendByte+0xbc>
		break;
	case uart2:
		while(BIT_IS_CLR(UCSR2A,UDRE2)){} // waiting for Data Register Empty to be empty
    2606:	e0 ed       	ldi	r30, 0xD0	; 208
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	80 81       	ld	r24, Z
    260c:	88 2f       	mov	r24, r24
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	80 72       	andi	r24, 0x20	; 32
    2612:	90 70       	andi	r25, 0x00	; 0
    2614:	00 97       	sbiw	r24, 0x00	; 0
    2616:	b9 f3       	breq	.-18     	; 0x2606 <UART_sendByte+0x86>
		UDR2 = data;
    2618:	e6 ed       	ldi	r30, 0xD6	; 214
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	89 81       	ldd	r24, Y+1	; 0x01
    261e:	80 83       	st	Z, r24
    2620:	0d c0       	rjmp	.+26     	; 0x263c <UART_sendByte+0xbc>
		break;
	case uart3:
		while(BIT_IS_CLR(UCSR3A,UDRE3)){} // waiting for Data Register Empty to be empty
    2622:	e0 e3       	ldi	r30, 0x30	; 48
    2624:	f1 e0       	ldi	r31, 0x01	; 1
    2626:	80 81       	ld	r24, Z
    2628:	88 2f       	mov	r24, r24
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	80 72       	andi	r24, 0x20	; 32
    262e:	90 70       	andi	r25, 0x00	; 0
    2630:	00 97       	sbiw	r24, 0x00	; 0
    2632:	b9 f3       	breq	.-18     	; 0x2622 <UART_sendByte+0xa2>
		UDR3 = data;
    2634:	e6 e3       	ldi	r30, 0x36	; 54
    2636:	f1 e0       	ldi	r31, 0x01	; 1
    2638:	89 81       	ldd	r24, Y+1	; 0x01
    263a:	80 83       	st	Z, r24
		break;
	}

}
    263c:	0f 90       	pop	r0
    263e:	0f 90       	pop	r0
    2640:	0f 90       	pop	r0
    2642:	0f 90       	pop	r0
    2644:	cf 91       	pop	r28
    2646:	df 91       	pop	r29
    2648:	08 95       	ret

0000264a <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
u8 UART_recieveByte(u8 uart_no)
{
    264a:	df 93       	push	r29
    264c:	cf 93       	push	r28
    264e:	00 d0       	rcall	.+0      	; 0x2650 <UART_recieveByte+0x6>
    2650:	0f 92       	push	r0
    2652:	cd b7       	in	r28, 0x3d	; 61
    2654:	de b7       	in	r29, 0x3e	; 62
    2656:	89 83       	std	Y+1, r24	; 0x01
	switch (uart_no){
    2658:	89 81       	ldd	r24, Y+1	; 0x01
    265a:	28 2f       	mov	r18, r24
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	3c 83       	std	Y+4, r19	; 0x04
    2660:	2b 83       	std	Y+3, r18	; 0x03
    2662:	8b 81       	ldd	r24, Y+3	; 0x03
    2664:	9c 81       	ldd	r25, Y+4	; 0x04
    2666:	81 30       	cpi	r24, 0x01	; 1
    2668:	91 05       	cpc	r25, r1
    266a:	f9 f0       	breq	.+62     	; 0x26aa <UART_recieveByte+0x60>
    266c:	2b 81       	ldd	r18, Y+3	; 0x03
    266e:	3c 81       	ldd	r19, Y+4	; 0x04
    2670:	22 30       	cpi	r18, 0x02	; 2
    2672:	31 05       	cpc	r19, r1
    2674:	2c f4       	brge	.+10     	; 0x2680 <UART_recieveByte+0x36>
    2676:	8b 81       	ldd	r24, Y+3	; 0x03
    2678:	9c 81       	ldd	r25, Y+4	; 0x04
    267a:	00 97       	sbiw	r24, 0x00	; 0
    267c:	61 f0       	breq	.+24     	; 0x2696 <UART_recieveByte+0x4c>
    267e:	33 c0       	rjmp	.+102    	; 0x26e6 <UART_recieveByte+0x9c>
    2680:	2b 81       	ldd	r18, Y+3	; 0x03
    2682:	3c 81       	ldd	r19, Y+4	; 0x04
    2684:	22 30       	cpi	r18, 0x02	; 2
    2686:	31 05       	cpc	r19, r1
    2688:	d1 f0       	breq	.+52     	; 0x26be <UART_recieveByte+0x74>
    268a:	8b 81       	ldd	r24, Y+3	; 0x03
    268c:	9c 81       	ldd	r25, Y+4	; 0x04
    268e:	83 30       	cpi	r24, 0x03	; 3
    2690:	91 05       	cpc	r25, r1
    2692:	f9 f0       	breq	.+62     	; 0x26d2 <UART_recieveByte+0x88>
    2694:	28 c0       	rjmp	.+80     	; 0x26e6 <UART_recieveByte+0x9c>
	case uart0:
		while(BIT_IS_CLR(UCSR0A,RXC0)){}
    2696:	e0 ec       	ldi	r30, 0xC0	; 192
    2698:	f0 e0       	ldi	r31, 0x00	; 0
    269a:	80 81       	ld	r24, Z
    269c:	88 23       	and	r24, r24
    269e:	dc f7       	brge	.-10     	; 0x2696 <UART_recieveByte+0x4c>
		return UDR0;
    26a0:	e6 ec       	ldi	r30, 0xC6	; 198
    26a2:	f0 e0       	ldi	r31, 0x00	; 0
    26a4:	90 81       	ld	r25, Z
    26a6:	9a 83       	std	Y+2, r25	; 0x02
    26a8:	22 c0       	rjmp	.+68     	; 0x26ee <UART_recieveByte+0xa4>
		break;
	case uart1:
		while(BIT_IS_CLR(UCSR1A,RXC1)){}
    26aa:	e8 ec       	ldi	r30, 0xC8	; 200
    26ac:	f0 e0       	ldi	r31, 0x00	; 0
    26ae:	80 81       	ld	r24, Z
    26b0:	88 23       	and	r24, r24
    26b2:	dc f7       	brge	.-10     	; 0x26aa <UART_recieveByte+0x60>
		return UDR1;
    26b4:	ee ec       	ldi	r30, 0xCE	; 206
    26b6:	f0 e0       	ldi	r31, 0x00	; 0
    26b8:	20 81       	ld	r18, Z
    26ba:	2a 83       	std	Y+2, r18	; 0x02
    26bc:	18 c0       	rjmp	.+48     	; 0x26ee <UART_recieveByte+0xa4>
		break;
	case uart2:
		while(BIT_IS_CLR(UCSR2A,RXC2)){}
    26be:	e0 ed       	ldi	r30, 0xD0	; 208
    26c0:	f0 e0       	ldi	r31, 0x00	; 0
    26c2:	80 81       	ld	r24, Z
    26c4:	88 23       	and	r24, r24
    26c6:	dc f7       	brge	.-10     	; 0x26be <UART_recieveByte+0x74>
		return UDR2;
    26c8:	e6 ed       	ldi	r30, 0xD6	; 214
    26ca:	f0 e0       	ldi	r31, 0x00	; 0
    26cc:	30 81       	ld	r19, Z
    26ce:	3a 83       	std	Y+2, r19	; 0x02
    26d0:	0e c0       	rjmp	.+28     	; 0x26ee <UART_recieveByte+0xa4>
		break;
	case uart3:
		while(BIT_IS_CLR(UCSR3A,RXC3)){}
    26d2:	e0 e3       	ldi	r30, 0x30	; 48
    26d4:	f1 e0       	ldi	r31, 0x01	; 1
    26d6:	80 81       	ld	r24, Z
    26d8:	88 23       	and	r24, r24
    26da:	dc f7       	brge	.-10     	; 0x26d2 <UART_recieveByte+0x88>
		return UDR3;
    26dc:	e6 e3       	ldi	r30, 0x36	; 54
    26de:	f1 e0       	ldi	r31, 0x01	; 1
    26e0:	80 81       	ld	r24, Z
    26e2:	8a 83       	std	Y+2, r24	; 0x02
    26e4:	04 c0       	rjmp	.+8      	; 0x26ee <UART_recieveByte+0xa4>
		break;
	}
	return UDR0;
    26e6:	e6 ec       	ldi	r30, 0xC6	; 198
    26e8:	f0 e0       	ldi	r31, 0x00	; 0
    26ea:	90 81       	ld	r25, Z
    26ec:	9a 83       	std	Y+2, r25	; 0x02
    26ee:	8a 81       	ldd	r24, Y+2	; 0x02
}
    26f0:	0f 90       	pop	r0
    26f2:	0f 90       	pop	r0
    26f4:	0f 90       	pop	r0
    26f6:	0f 90       	pop	r0
    26f8:	cf 91       	pop	r28
    26fa:	df 91       	pop	r29
    26fc:	08 95       	ret

000026fe <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const u8 *Str, u8 uart_no)
{
    26fe:	df 93       	push	r29
    2700:	cf 93       	push	r28
    2702:	00 d0       	rcall	.+0      	; 0x2704 <UART_sendString+0x6>
    2704:	0f 92       	push	r0
    2706:	cd b7       	in	r28, 0x3d	; 61
    2708:	de b7       	in	r29, 0x3e	; 62
    270a:	9b 83       	std	Y+3, r25	; 0x03
    270c:	8a 83       	std	Y+2, r24	; 0x02
    270e:	6c 83       	std	Y+4, r22	; 0x04
	u8 i = 0;
    2710:	19 82       	std	Y+1, r1	; 0x01
    2712:	0f c0       	rjmp	.+30     	; 0x2732 <UART_sendString+0x34>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i],uart_no);
    2714:	89 81       	ldd	r24, Y+1	; 0x01
    2716:	28 2f       	mov	r18, r24
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	8a 81       	ldd	r24, Y+2	; 0x02
    271c:	9b 81       	ldd	r25, Y+3	; 0x03
    271e:	fc 01       	movw	r30, r24
    2720:	e2 0f       	add	r30, r18
    2722:	f3 1f       	adc	r31, r19
    2724:	80 81       	ld	r24, Z
    2726:	6c 81       	ldd	r22, Y+4	; 0x04
    2728:	0e 94 c0 12 	call	0x2580	; 0x2580 <UART_sendByte>
		i++;
    272c:	89 81       	ldd	r24, Y+1	; 0x01
    272e:	8f 5f       	subi	r24, 0xFF	; 255
    2730:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const u8 *Str, u8 uart_no)
{
	u8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2732:	89 81       	ldd	r24, Y+1	; 0x01
    2734:	28 2f       	mov	r18, r24
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	8a 81       	ldd	r24, Y+2	; 0x02
    273a:	9b 81       	ldd	r25, Y+3	; 0x03
    273c:	fc 01       	movw	r30, r24
    273e:	e2 0f       	add	r30, r18
    2740:	f3 1f       	adc	r31, r19
    2742:	80 81       	ld	r24, Z
    2744:	88 23       	and	r24, r24
    2746:	31 f7       	brne	.-52     	; 0x2714 <UART_sendString+0x16>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	 *******************************************************************/
}
    2748:	0f 90       	pop	r0
    274a:	0f 90       	pop	r0
    274c:	0f 90       	pop	r0
    274e:	0f 90       	pop	r0
    2750:	cf 91       	pop	r28
    2752:	df 91       	pop	r29
    2754:	08 95       	ret

00002756 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(u8 *Str, u8 uart_no)
{
    2756:	0f 93       	push	r16
    2758:	1f 93       	push	r17
    275a:	df 93       	push	r29
    275c:	cf 93       	push	r28
    275e:	00 d0       	rcall	.+0      	; 0x2760 <UART_receiveString+0xa>
    2760:	0f 92       	push	r0
    2762:	cd b7       	in	r28, 0x3d	; 61
    2764:	de b7       	in	r29, 0x3e	; 62
    2766:	9b 83       	std	Y+3, r25	; 0x03
    2768:	8a 83       	std	Y+2, r24	; 0x02
    276a:	6c 83       	std	Y+4, r22	; 0x04
	u8 i = 0;
    276c:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte(uart_no);
    276e:	89 81       	ldd	r24, Y+1	; 0x01
    2770:	28 2f       	mov	r18, r24
    2772:	30 e0       	ldi	r19, 0x00	; 0
    2774:	8a 81       	ldd	r24, Y+2	; 0x02
    2776:	9b 81       	ldd	r25, Y+3	; 0x03
    2778:	8c 01       	movw	r16, r24
    277a:	02 0f       	add	r16, r18
    277c:	13 1f       	adc	r17, r19
    277e:	8c 81       	ldd	r24, Y+4	; 0x04
    2780:	0e 94 25 13 	call	0x264a	; 0x264a <UART_recieveByte>
    2784:	f8 01       	movw	r30, r16
    2786:	80 83       	st	Z, r24
    2788:	10 c0       	rjmp	.+32     	; 0x27aa <UART_receiveString+0x54>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    278a:	89 81       	ldd	r24, Y+1	; 0x01
    278c:	8f 5f       	subi	r24, 0xFF	; 255
    278e:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte(uart_no);
    2790:	89 81       	ldd	r24, Y+1	; 0x01
    2792:	28 2f       	mov	r18, r24
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	8a 81       	ldd	r24, Y+2	; 0x02
    2798:	9b 81       	ldd	r25, Y+3	; 0x03
    279a:	8c 01       	movw	r16, r24
    279c:	02 0f       	add	r16, r18
    279e:	13 1f       	adc	r17, r19
    27a0:	8c 81       	ldd	r24, Y+4	; 0x04
    27a2:	0e 94 25 13 	call	0x264a	; 0x264a <UART_recieveByte>
    27a6:	f8 01       	movw	r30, r16
    27a8:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte(uart_no);

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    27aa:	89 81       	ldd	r24, Y+1	; 0x01
    27ac:	28 2f       	mov	r18, r24
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	8a 81       	ldd	r24, Y+2	; 0x02
    27b2:	9b 81       	ldd	r25, Y+3	; 0x03
    27b4:	fc 01       	movw	r30, r24
    27b6:	e2 0f       	add	r30, r18
    27b8:	f3 1f       	adc	r31, r19
    27ba:	80 81       	ld	r24, Z
    27bc:	83 32       	cpi	r24, 0x23	; 35
    27be:	29 f7       	brne	.-54     	; 0x278a <UART_receiveString+0x34>
		i++;
		Str[i] = UART_recieveByte(uart_no);
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    27c0:	89 81       	ldd	r24, Y+1	; 0x01
    27c2:	28 2f       	mov	r18, r24
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	8a 81       	ldd	r24, Y+2	; 0x02
    27c8:	9b 81       	ldd	r25, Y+3	; 0x03
    27ca:	fc 01       	movw	r30, r24
    27cc:	e2 0f       	add	r30, r18
    27ce:	f3 1f       	adc	r31, r19
    27d0:	10 82       	st	Z, r1
}
    27d2:	0f 90       	pop	r0
    27d4:	0f 90       	pop	r0
    27d6:	0f 90       	pop	r0
    27d8:	0f 90       	pop	r0
    27da:	cf 91       	pop	r28
    27dc:	df 91       	pop	r29
    27de:	1f 91       	pop	r17
    27e0:	0f 91       	pop	r16
    27e2:	08 95       	ret

000027e4 <__udivmodhi4>:
    27e4:	aa 1b       	sub	r26, r26
    27e6:	bb 1b       	sub	r27, r27
    27e8:	51 e1       	ldi	r21, 0x11	; 17
    27ea:	07 c0       	rjmp	.+14     	; 0x27fa <__udivmodhi4_ep>

000027ec <__udivmodhi4_loop>:
    27ec:	aa 1f       	adc	r26, r26
    27ee:	bb 1f       	adc	r27, r27
    27f0:	a6 17       	cp	r26, r22
    27f2:	b7 07       	cpc	r27, r23
    27f4:	10 f0       	brcs	.+4      	; 0x27fa <__udivmodhi4_ep>
    27f6:	a6 1b       	sub	r26, r22
    27f8:	b7 0b       	sbc	r27, r23

000027fa <__udivmodhi4_ep>:
    27fa:	88 1f       	adc	r24, r24
    27fc:	99 1f       	adc	r25, r25
    27fe:	5a 95       	dec	r21
    2800:	a9 f7       	brne	.-22     	; 0x27ec <__udivmodhi4_loop>
    2802:	80 95       	com	r24
    2804:	90 95       	com	r25
    2806:	bc 01       	movw	r22, r24
    2808:	cd 01       	movw	r24, r26
    280a:	08 95       	ret

0000280c <__udivmodsi4>:
    280c:	a1 e2       	ldi	r26, 0x21	; 33
    280e:	1a 2e       	mov	r1, r26
    2810:	aa 1b       	sub	r26, r26
    2812:	bb 1b       	sub	r27, r27
    2814:	fd 01       	movw	r30, r26
    2816:	0d c0       	rjmp	.+26     	; 0x2832 <__udivmodsi4_ep>

00002818 <__udivmodsi4_loop>:
    2818:	aa 1f       	adc	r26, r26
    281a:	bb 1f       	adc	r27, r27
    281c:	ee 1f       	adc	r30, r30
    281e:	ff 1f       	adc	r31, r31
    2820:	a2 17       	cp	r26, r18
    2822:	b3 07       	cpc	r27, r19
    2824:	e4 07       	cpc	r30, r20
    2826:	f5 07       	cpc	r31, r21
    2828:	20 f0       	brcs	.+8      	; 0x2832 <__udivmodsi4_ep>
    282a:	a2 1b       	sub	r26, r18
    282c:	b3 0b       	sbc	r27, r19
    282e:	e4 0b       	sbc	r30, r20
    2830:	f5 0b       	sbc	r31, r21

00002832 <__udivmodsi4_ep>:
    2832:	66 1f       	adc	r22, r22
    2834:	77 1f       	adc	r23, r23
    2836:	88 1f       	adc	r24, r24
    2838:	99 1f       	adc	r25, r25
    283a:	1a 94       	dec	r1
    283c:	69 f7       	brne	.-38     	; 0x2818 <__udivmodsi4_loop>
    283e:	60 95       	com	r22
    2840:	70 95       	com	r23
    2842:	80 95       	com	r24
    2844:	90 95       	com	r25
    2846:	9b 01       	movw	r18, r22
    2848:	ac 01       	movw	r20, r24
    284a:	bd 01       	movw	r22, r26
    284c:	cf 01       	movw	r24, r30
    284e:	08 95       	ret

00002850 <__prologue_saves__>:
    2850:	2f 92       	push	r2
    2852:	3f 92       	push	r3
    2854:	4f 92       	push	r4
    2856:	5f 92       	push	r5
    2858:	6f 92       	push	r6
    285a:	7f 92       	push	r7
    285c:	8f 92       	push	r8
    285e:	9f 92       	push	r9
    2860:	af 92       	push	r10
    2862:	bf 92       	push	r11
    2864:	cf 92       	push	r12
    2866:	df 92       	push	r13
    2868:	ef 92       	push	r14
    286a:	ff 92       	push	r15
    286c:	0f 93       	push	r16
    286e:	1f 93       	push	r17
    2870:	cf 93       	push	r28
    2872:	df 93       	push	r29
    2874:	cd b7       	in	r28, 0x3d	; 61
    2876:	de b7       	in	r29, 0x3e	; 62
    2878:	ca 1b       	sub	r28, r26
    287a:	db 0b       	sbc	r29, r27
    287c:	0f b6       	in	r0, 0x3f	; 63
    287e:	f8 94       	cli
    2880:	de bf       	out	0x3e, r29	; 62
    2882:	0f be       	out	0x3f, r0	; 63
    2884:	cd bf       	out	0x3d, r28	; 61
    2886:	19 94       	eijmp

00002888 <__epilogue_restores__>:
    2888:	2a 88       	ldd	r2, Y+18	; 0x12
    288a:	39 88       	ldd	r3, Y+17	; 0x11
    288c:	48 88       	ldd	r4, Y+16	; 0x10
    288e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2890:	6e 84       	ldd	r6, Y+14	; 0x0e
    2892:	7d 84       	ldd	r7, Y+13	; 0x0d
    2894:	8c 84       	ldd	r8, Y+12	; 0x0c
    2896:	9b 84       	ldd	r9, Y+11	; 0x0b
    2898:	aa 84       	ldd	r10, Y+10	; 0x0a
    289a:	b9 84       	ldd	r11, Y+9	; 0x09
    289c:	c8 84       	ldd	r12, Y+8	; 0x08
    289e:	df 80       	ldd	r13, Y+7	; 0x07
    28a0:	ee 80       	ldd	r14, Y+6	; 0x06
    28a2:	fd 80       	ldd	r15, Y+5	; 0x05
    28a4:	0c 81       	ldd	r16, Y+4	; 0x04
    28a6:	1b 81       	ldd	r17, Y+3	; 0x03
    28a8:	aa 81       	ldd	r26, Y+2	; 0x02
    28aa:	b9 81       	ldd	r27, Y+1	; 0x01
    28ac:	ce 0f       	add	r28, r30
    28ae:	d1 1d       	adc	r29, r1
    28b0:	0f b6       	in	r0, 0x3f	; 63
    28b2:	f8 94       	cli
    28b4:	de bf       	out	0x3e, r29	; 62
    28b6:	0f be       	out	0x3f, r0	; 63
    28b8:	cd bf       	out	0x3d, r28	; 61
    28ba:	ed 01       	movw	r28, r26
    28bc:	08 95       	ret

000028be <_exit>:
    28be:	f8 94       	cli

000028c0 <__stop_program>:
    28c0:	ff cf       	rjmp	.-2      	; 0x28c0 <__stop_program>
